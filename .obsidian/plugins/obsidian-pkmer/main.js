"use strict";const lt=require("obsidian");/**
* @vue/shared v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function ps(t,e){const n=new Set(t.split(","));return e?s=>n.has(s.toLowerCase()):s=>n.has(s)}const bt={},Te=[],Vt=()=>{},bi=()=>!1,In=t=>t.charCodeAt(0)===111&&t.charCodeAt(1)===110&&(t.charCodeAt(2)>122||t.charCodeAt(2)<97),ms=t=>t.startsWith("onUpdate:"),Dt=Object.assign,gs=(t,e)=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)},xi=Object.prototype.hasOwnProperty,vt=(t,e)=>xi.call(t,e),ut=Array.isArray,Ie=t=>qe(t)==="[object Map]",En=t=>qe(t)==="[object Set]",Us=t=>qe(t)==="[object Date]",dt=t=>typeof t=="function",zt=t=>typeof t=="string",fe=t=>typeof t=="symbol",xt=t=>t!==null&&typeof t=="object",ws=t=>(xt(t)||dt(t))&&dt(t.then)&&dt(t.catch),gr=Object.prototype.toString,qe=t=>gr.call(t),ki=t=>qe(t).slice(8,-1),wr=t=>qe(t)==="[object Object]",vs=t=>zt(t)&&t!=="NaN"&&t[0]!=="-"&&""+parseInt(t,10)===t,Ne=ps(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),An=t=>{const e=Object.create(null);return n=>e[n]||(e[n]=t(n))},Ci=/-(\w)/g,Oe=An(t=>t.replace(Ci,(e,n)=>n?n.toUpperCase():"")),Si=/\B([A-Z])/g,De=An(t=>t.replace(Si,"-$1").toLowerCase()),vr=An(t=>t.charAt(0).toUpperCase()+t.slice(1)),jn=An(t=>t?`on${vr(t)}`:""),he=(t,e)=>!Object.is(t,e),dn=(t,e)=>{for(let n=0;n<t.length;n++)t[n](e)},vn=(t,e,n)=>{Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value:n})},_s=t=>{const e=parseFloat(t);return isNaN(e)?t:e},Ti=t=>{const e=zt(t)?Number(t):NaN;return isNaN(e)?t:e};let Rs;const _r=()=>Rs||(Rs=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function Je(t){if(ut(t)){const e={};for(let n=0;n<t.length;n++){const s=t[n],i=zt(s)?Pi(s):Je(s);if(i)for(const r in i)e[r]=i[r]}return e}else if(zt(t)||xt(t))return t}const Ii=/;(?![^(]*\))/g,Ei=/:([^]+)/,Ai=/\/\*[^]*?\*\//g;function Pi(t){const e={};return t.replace(Ai,"").split(Ii).forEach(n=>{if(n){const s=n.split(Ei);s.length>1&&(e[s[0].trim()]=s[1].trim())}}),e}function At(t){let e="";if(zt(t))e=t;else if(ut(t))for(let n=0;n<t.length;n++){const s=At(t[n]);s&&(e+=s+" ")}else if(xt(t))for(const n in t)t[n]&&(e+=n+" ");return e.trim()}const Oi="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",zi=ps(Oi);function yr(t){return!!t||t===""}function Li(t,e){if(t.length!==e.length)return!1;let n=!0;for(let s=0;n&&s<t.length;s++)n=Pn(t[s],e[s]);return n}function Pn(t,e){if(t===e)return!0;let n=Us(t),s=Us(e);if(n||s)return n&&s?t.getTime()===e.getTime():!1;if(n=fe(t),s=fe(e),n||s)return t===e;if(n=ut(t),s=ut(e),n||s)return n&&s?Li(t,e):!1;if(n=xt(t),s=xt(e),n||s){if(!n||!s)return!1;const i=Object.keys(t).length,r=Object.keys(e).length;if(i!==r)return!1;for(const a in t){const l=t.hasOwnProperty(a),c=e.hasOwnProperty(a);if(l&&!c||!l&&c||!Pn(t[a],e[a]))return!1}}return String(t)===String(e)}function Bi(t,e){return t.findIndex(n=>Pn(n,e))}const Tt=t=>zt(t)?t:t==null?"":ut(t)||xt(t)&&(t.toString===gr||!dt(t.toString))?JSON.stringify(t,br,2):String(t),br=(t,e)=>e&&e.__v_isRef?br(t,e.value):Ie(e)?{[`Map(${e.size})`]:[...e.entries()].reduce((n,[s,i],r)=>(n[Hn(s,r)+" =>"]=i,n),{})}:En(e)?{[`Set(${e.size})`]:[...e.values()].map(n=>Hn(n))}:fe(e)?Hn(e):xt(e)&&!ut(e)&&!wr(e)?String(e):e,Hn=(t,e="")=>{var n;return fe(t)?`Symbol(${(n=t.description)!=null?n:e})`:t};/**
* @vue/reactivity v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let qt;class Di{constructor(e=!1){this.detached=e,this._active=!0,this.effects=[],this.cleanups=[],this.parent=qt,!e&&qt&&(this.index=(qt.scopes||(qt.scopes=[])).push(this)-1)}get active(){return this._active}run(e){if(this._active){const n=qt;try{return qt=this,e()}finally{qt=n}}}on(){qt=this}off(){qt=this.parent}stop(e){if(this._active){let n,s;for(n=0,s=this.effects.length;n<s;n++)this.effects[n].stop();for(n=0,s=this.cleanups.length;n<s;n++)this.cleanups[n]();if(this.scopes)for(n=0,s=this.scopes.length;n<s;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!e){const i=this.parent.scopes.pop();i&&i!==this&&(this.parent.scopes[this.index]=i,i.index=this.index)}this.parent=void 0,this._active=!1}}}function $i(t,e=qt){e&&e.active&&e.effects.push(t)}function Ui(){return qt}let _e;class ys{constructor(e,n,s,i){this.fn=e,this.trigger=n,this.scheduler=s,this.active=!0,this.deps=[],this._dirtyLevel=4,this._trackId=0,this._runnings=0,this._shouldSchedule=!1,this._depsLength=0,$i(this,i)}get dirty(){if(this._dirtyLevel===2||this._dirtyLevel===3){this._dirtyLevel=1,xe();for(let e=0;e<this._depsLength;e++){const n=this.deps[e];if(n.computed&&(Ri(n.computed),this._dirtyLevel>=4))break}this._dirtyLevel===1&&(this._dirtyLevel=0),ke()}return this._dirtyLevel>=4}set dirty(e){this._dirtyLevel=e?4:0}run(){if(this._dirtyLevel=0,!this.active)return this.fn();let e=ue,n=_e;try{return ue=!0,_e=this,this._runnings++,Ms(this),this.fn()}finally{Fs(this),this._runnings--,_e=n,ue=e}}stop(){var e;this.active&&(Ms(this),Fs(this),(e=this.onStop)==null||e.call(this),this.active=!1)}}function Ri(t){return t.value}function Ms(t){t._trackId++,t._depsLength=0}function Fs(t){if(t.deps.length>t._depsLength){for(let e=t._depsLength;e<t.deps.length;e++)xr(t.deps[e],t);t.deps.length=t._depsLength}}function xr(t,e){const n=t.get(e);n!==void 0&&e._trackId!==n&&(t.delete(e),t.size===0&&t.cleanup())}let ue=!0,Yn=0;const kr=[];function xe(){kr.push(ue),ue=!1}function ke(){const t=kr.pop();ue=t===void 0?!0:t}function bs(){Yn++}function xs(){for(Yn--;!Yn&&Xn.length;)Xn.shift()()}function Cr(t,e,n){if(e.get(t)!==t._trackId){e.set(t,t._trackId);const s=t.deps[t._depsLength];s!==e?(s&&xr(s,t),t.deps[t._depsLength++]=e):t._depsLength++}}const Xn=[];function Sr(t,e,n){bs();for(const s of t.keys()){let i;s._dirtyLevel<e&&(i??(i=t.get(s)===s._trackId))&&(s._shouldSchedule||(s._shouldSchedule=s._dirtyLevel===0),s._dirtyLevel=e),s._shouldSchedule&&(i??(i=t.get(s)===s._trackId))&&(s.trigger(),(!s._runnings||s.allowRecurse)&&s._dirtyLevel!==2&&(s._shouldSchedule=!1,s.scheduler&&Xn.push(s.scheduler)))}xs()}const Tr=(t,e)=>{const n=new Map;return n.cleanup=t,n.computed=e,n},Qn=new WeakMap,ye=Symbol(""),ts=Symbol("");function Ht(t,e,n){if(ue&&_e){let s=Qn.get(t);s||Qn.set(t,s=new Map);let i=s.get(n);i||s.set(n,i=Tr(()=>s.delete(n))),Cr(_e,i)}}function ee(t,e,n,s,i,r){const a=Qn.get(t);if(!a)return;let l=[];if(e==="clear")l=[...a.values()];else if(n==="length"&&ut(t)){const c=Number(s);a.forEach((f,y)=>{(y==="length"||!fe(y)&&y>=c)&&l.push(f)})}else switch(n!==void 0&&l.push(a.get(n)),e){case"add":ut(t)?vs(n)&&l.push(a.get("length")):(l.push(a.get(ye)),Ie(t)&&l.push(a.get(ts)));break;case"delete":ut(t)||(l.push(a.get(ye)),Ie(t)&&l.push(a.get(ts)));break;case"set":Ie(t)&&l.push(a.get(ye));break}bs();for(const c of l)c&&Sr(c,4);xs()}const Mi=ps("__proto__,__v_isRef,__isVue"),Ir=new Set(Object.getOwnPropertyNames(Symbol).filter(t=>t!=="arguments"&&t!=="caller").map(t=>Symbol[t]).filter(fe)),Ns=Fi();function Fi(){const t={};return["includes","indexOf","lastIndexOf"].forEach(e=>{t[e]=function(...n){const s=_t(this);for(let r=0,a=this.length;r<a;r++)Ht(s,"get",r+"");const i=s[e](...n);return i===-1||i===!1?s[e](...n.map(_t)):i}}),["push","pop","shift","unshift","splice"].forEach(e=>{t[e]=function(...n){xe(),bs();const s=_t(this)[e].apply(this,n);return xs(),ke(),s}}),t}function Ni(t){const e=_t(this);return Ht(e,"has",t),e.hasOwnProperty(t)}class Er{constructor(e=!1,n=!1){this._isReadonly=e,this._isShallow=n}get(e,n,s){const i=this._isReadonly,r=this._isShallow;if(n==="__v_isReactive")return!i;if(n==="__v_isReadonly")return i;if(n==="__v_isShallow")return r;if(n==="__v_raw")return s===(i?r?to:zr:r?Or:Pr).get(e)||Object.getPrototypeOf(e)===Object.getPrototypeOf(s)?e:void 0;const a=ut(e);if(!i){if(a&&vt(Ns,n))return Reflect.get(Ns,n,s);if(n==="hasOwnProperty")return Ni}const l=Reflect.get(e,n,s);return(fe(n)?Ir.has(n):Mi(n))||(i||Ht(e,"get",n),r)?l:Wt(l)?a&&vs(n)?l:l.value:xt(l)?i?Lr(l):Ss(l):l}}class Ar extends Er{constructor(e=!1){super(!1,e)}set(e,n,s,i){let r=e[n];if(!this._isShallow){const c=ze(r);if(!_n(s)&&!ze(s)&&(r=_t(r),s=_t(s)),!ut(e)&&Wt(r)&&!Wt(s))return c?!1:(r.value=s,!0)}const a=ut(e)&&vs(n)?Number(n)<e.length:vt(e,n),l=Reflect.set(e,n,s,i);return e===_t(i)&&(a?he(s,r)&&ee(e,"set",n,s):ee(e,"add",n,s)),l}deleteProperty(e,n){const s=vt(e,n);e[n];const i=Reflect.deleteProperty(e,n);return i&&s&&ee(e,"delete",n,void 0),i}has(e,n){const s=Reflect.has(e,n);return(!fe(n)||!Ir.has(n))&&Ht(e,"has",n),s}ownKeys(e){return Ht(e,"iterate",ut(e)?"length":ye),Reflect.ownKeys(e)}}class ji extends Er{constructor(e=!1){super(!0,e)}set(e,n){return!0}deleteProperty(e,n){return!0}}const Hi=new Ar,Wi=new ji,Zi=new Ar(!0),ks=t=>t,On=t=>Reflect.getPrototypeOf(t);function nn(t,e,n=!1,s=!1){t=t.__v_raw;const i=_t(t),r=_t(e);n||(he(e,r)&&Ht(i,"get",e),Ht(i,"get",r));const{has:a}=On(i),l=s?ks:n?Is:Ze;if(a.call(i,e))return l(t.get(e));if(a.call(i,r))return l(t.get(r));t!==i&&t.get(e)}function sn(t,e=!1){const n=this.__v_raw,s=_t(n),i=_t(t);return e||(he(t,i)&&Ht(s,"has",t),Ht(s,"has",i)),t===i?n.has(t):n.has(t)||n.has(i)}function rn(t,e=!1){return t=t.__v_raw,!e&&Ht(_t(t),"iterate",ye),Reflect.get(t,"size",t)}function js(t){t=_t(t);const e=_t(this);return On(e).has.call(e,t)||(e.add(t),ee(e,"add",t,t)),this}function Hs(t,e){e=_t(e);const n=_t(this),{has:s,get:i}=On(n);let r=s.call(n,t);r||(t=_t(t),r=s.call(n,t));const a=i.call(n,t);return n.set(t,e),r?he(e,a)&&ee(n,"set",t,e):ee(n,"add",t,e),this}function Ws(t){const e=_t(this),{has:n,get:s}=On(e);let i=n.call(e,t);i||(t=_t(t),i=n.call(e,t)),s&&s.call(e,t);const r=e.delete(t);return i&&ee(e,"delete",t,void 0),r}function Zs(){const t=_t(this),e=t.size!==0,n=t.clear();return e&&ee(t,"clear",void 0,void 0),n}function on(t,e){return function(s,i){const r=this,a=r.__v_raw,l=_t(a),c=e?ks:t?Is:Ze;return!t&&Ht(l,"iterate",ye),a.forEach((f,y)=>s.call(i,c(f),c(y),r))}}function an(t,e,n){return function(...s){const i=this.__v_raw,r=_t(i),a=Ie(r),l=t==="entries"||t===Symbol.iterator&&a,c=t==="keys"&&a,f=i[t](...s),y=n?ks:e?Is:Ze;return!e&&Ht(r,"iterate",c?ts:ye),{next(){const{value:m,done:w}=f.next();return w?{value:m,done:w}:{value:l?[y(m[0]),y(m[1])]:y(m),done:w}},[Symbol.iterator](){return this}}}}function re(t){return function(...e){return t==="delete"?!1:t==="clear"?void 0:this}}function Vi(){const t={get(r){return nn(this,r)},get size(){return rn(this)},has:sn,add:js,set:Hs,delete:Ws,clear:Zs,forEach:on(!1,!1)},e={get(r){return nn(this,r,!1,!0)},get size(){return rn(this)},has:sn,add:js,set:Hs,delete:Ws,clear:Zs,forEach:on(!1,!0)},n={get(r){return nn(this,r,!0)},get size(){return rn(this,!0)},has(r){return sn.call(this,r,!0)},add:re("add"),set:re("set"),delete:re("delete"),clear:re("clear"),forEach:on(!0,!1)},s={get(r){return nn(this,r,!0,!0)},get size(){return rn(this,!0)},has(r){return sn.call(this,r,!0)},add:re("add"),set:re("set"),delete:re("delete"),clear:re("clear"),forEach:on(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(r=>{t[r]=an(r,!1,!1),n[r]=an(r,!0,!1),e[r]=an(r,!1,!0),s[r]=an(r,!0,!0)}),[t,n,e,s]}const[Ki,Gi,qi,Ji]=Vi();function Cs(t,e){const n=e?t?Ji:qi:t?Gi:Ki;return(s,i,r)=>i==="__v_isReactive"?!t:i==="__v_isReadonly"?t:i==="__v_raw"?s:Reflect.get(vt(n,i)&&i in s?n:s,i,r)}const Yi={get:Cs(!1,!1)},Xi={get:Cs(!1,!0)},Qi={get:Cs(!0,!1)},Pr=new WeakMap,Or=new WeakMap,zr=new WeakMap,to=new WeakMap;function eo(t){switch(t){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function no(t){return t.__v_skip||!Object.isExtensible(t)?0:eo(ki(t))}function Ss(t){return ze(t)?t:Ts(t,!1,Hi,Yi,Pr)}function so(t){return Ts(t,!1,Zi,Xi,Or)}function Lr(t){return Ts(t,!0,Wi,Qi,zr)}function Ts(t,e,n,s,i){if(!xt(t)||t.__v_raw&&!(e&&t.__v_isReactive))return t;const r=i.get(t);if(r)return r;const a=no(t);if(a===0)return t;const l=new Proxy(t,a===2?s:n);return i.set(t,l),l}function Ee(t){return ze(t)?Ee(t.__v_raw):!!(t&&t.__v_isReactive)}function ze(t){return!!(t&&t.__v_isReadonly)}function _n(t){return!!(t&&t.__v_isShallow)}function Br(t){return Ee(t)||ze(t)}function _t(t){const e=t&&t.__v_raw;return e?_t(e):t}function Dr(t){return Object.isExtensible(t)&&vn(t,"__v_skip",!0),t}const Ze=t=>xt(t)?Ss(t):t,Is=t=>xt(t)?Lr(t):t;class $r{constructor(e,n,s,i){this.getter=e,this._setter=n,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this.effect=new ys(()=>e(this._value),()=>fn(this,this.effect._dirtyLevel===2?2:3)),this.effect.computed=this,this.effect.active=this._cacheable=!i,this.__v_isReadonly=s}get value(){const e=_t(this);return(!e._cacheable||e.effect.dirty)&&he(e._value,e._value=e.effect.run())&&fn(e,4),Ur(e),e.effect._dirtyLevel>=2&&fn(e,2),e._value}set value(e){this._setter(e)}get _dirty(){return this.effect.dirty}set _dirty(e){this.effect.dirty=e}}function ro(t,e,n=!1){let s,i;const r=dt(t);return r?(s=t,i=Vt):(s=t.get,i=t.set),new $r(s,i,r||!i,n)}function Ur(t){var e;ue&&_e&&(t=_t(t),Cr(_e,(e=t.dep)!=null?e:t.dep=Tr(()=>t.dep=void 0,t instanceof $r?t:void 0)))}function fn(t,e=4,n){t=_t(t);const s=t.dep;s&&Sr(s,e)}function Wt(t){return!!(t&&t.__v_isRef===!0)}function ht(t){return io(t,!1)}function io(t,e){return Wt(t)?t:new oo(t,e)}class oo{constructor(e,n){this.__v_isShallow=n,this.dep=void 0,this.__v_isRef=!0,this._rawValue=n?e:_t(e),this._value=n?e:Ze(e)}get value(){return Ur(this),this._value}set value(e){const n=this.__v_isShallow||_n(e)||ze(e);e=n?e:_t(e),he(e,this._rawValue)&&(this._rawValue=e,this._value=n?e:Ze(e),fn(this,4))}}function $t(t){return Wt(t)?t.value:t}const ao={get:(t,e,n)=>$t(Reflect.get(t,e,n)),set:(t,e,n,s)=>{const i=t[e];return Wt(i)&&!Wt(n)?(i.value=n,!0):Reflect.set(t,e,n,s)}};function Rr(t){return Ee(t)?t:new Proxy(t,ao)}/**
* @vue/runtime-core v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function de(t,e,n,s){try{return s?t(...s):t()}catch(i){Ye(i,e,n)}}function Yt(t,e,n,s){if(dt(t)){const r=de(t,e,n,s);return r&&ws(r)&&r.catch(a=>{Ye(a,e,n)}),r}const i=[];for(let r=0;r<t.length;r++)i.push(Yt(t[r],e,n,s));return i}function Ye(t,e,n,s=!0){const i=e?e.vnode:null;if(e){let r=e.parent;const a=e.proxy,l=`https://vuejs.org/error-reference/#runtime-${n}`;for(;r;){const f=r.ec;if(f){for(let y=0;y<f.length;y++)if(f[y](t,a,l)===!1)return}r=r.parent}const c=e.appContext.config.errorHandler;if(c){de(c,null,10,[t,a,l]);return}}lo(t,n,i,s)}function lo(t,e,n,s=!0){console.error(t)}let Ve=!1,es=!1;const Ut=[];let te=0;const Ae=[];let oe=null,we=0;const Mr=Promise.resolve();let Es=null;function Fr(t){const e=Es||Mr;return t?e.then(this?t.bind(this):t):e}function co(t){let e=te+1,n=Ut.length;for(;e<n;){const s=e+n>>>1,i=Ut[s],r=Ke(i);r<t||r===t&&i.pre?e=s+1:n=s}return e}function As(t){(!Ut.length||!Ut.includes(t,Ve&&t.allowRecurse?te+1:te))&&(t.id==null?Ut.push(t):Ut.splice(co(t.id),0,t),Nr())}function Nr(){!Ve&&!es&&(es=!0,Es=Mr.then(Hr))}function uo(t){const e=Ut.indexOf(t);e>te&&Ut.splice(e,1)}function ns(t){ut(t)?Ae.push(...t):(!oe||!oe.includes(t,t.allowRecurse?we+1:we))&&Ae.push(t),Nr()}function Vs(t,e,n=Ve?te+1:0){for(;n<Ut.length;n++){const s=Ut[n];if(s&&s.pre){if(t&&s.id!==t.uid)continue;Ut.splice(n,1),n--,s()}}}function jr(t){if(Ae.length){const e=[...new Set(Ae)].sort((n,s)=>Ke(n)-Ke(s));if(Ae.length=0,oe){oe.push(...e);return}for(oe=e,we=0;we<oe.length;we++)oe[we]();oe=null,we=0}}const Ke=t=>t.id==null?1/0:t.id,fo=(t,e)=>{const n=Ke(t)-Ke(e);if(n===0){if(t.pre&&!e.pre)return-1;if(e.pre&&!t.pre)return 1}return n};function Hr(t){es=!1,Ve=!0,Ut.sort(fo);const e=Vt;try{for(te=0;te<Ut.length;te++){const n=Ut[te];n&&n.active!==!1&&de(n,null,14)}}finally{te=0,Ut.length=0,jr(),Ve=!1,Es=null,(Ut.length||Ae.length)&&Hr()}}function ho(t,e,...n){if(t.isUnmounted)return;const s=t.vnode.props||bt;let i=n;const r=e.startsWith("update:"),a=r&&e.slice(7);if(a&&a in s){const y=`${a==="modelValue"?"model":a}Modifiers`,{number:m,trim:w}=s[y]||bt;w&&(i=n.map(d=>zt(d)?d.trim():d)),m&&(i=n.map(_s))}let l,c=s[l=jn(e)]||s[l=jn(Oe(e))];!c&&r&&(c=s[l=jn(De(e))]),c&&Yt(c,t,6,i);const f=s[l+"Once"];if(f){if(!t.emitted)t.emitted={};else if(t.emitted[l])return;t.emitted[l]=!0,Yt(f,t,6,i)}}function Wr(t,e,n=!1){const s=e.emitsCache,i=s.get(t);if(i!==void 0)return i;const r=t.emits;let a={},l=!1;if(!dt(t)){const c=f=>{const y=Wr(f,e,!0);y&&(l=!0,Dt(a,y))};!n&&e.mixins.length&&e.mixins.forEach(c),t.extends&&c(t.extends),t.mixins&&t.mixins.forEach(c)}return!r&&!l?(xt(t)&&s.set(t,null),null):(ut(r)?r.forEach(c=>a[c]=null):Dt(a,r),xt(t)&&s.set(t,a),a)}function zn(t,e){return!t||!In(e)?!1:(e=e.slice(2).replace(/Once$/,""),vt(t,e[0].toLowerCase()+e.slice(1))||vt(t,De(e))||vt(t,e))}let jt=null,Ln=null;function yn(t){const e=jt;return jt=t,Ln=t&&t.type.__scopeId||null,e}function Zr(t){Ln=t}function Vr(){Ln=null}function ss(t,e=jt,n){if(!e||t._n)return t;const s=(...i)=>{s._d&&sr(-1);const r=yn(e);let a;try{a=t(...i)}finally{yn(r),s._d&&sr(1)}return a};return s._n=!0,s._c=!0,s._d=!0,s}function Wn(t){const{type:e,vnode:n,proxy:s,withProxy:i,props:r,propsOptions:[a],slots:l,attrs:c,emit:f,render:y,renderCache:m,data:w,setupState:d,ctx:x,inheritAttrs:h}=t;let v,_;const k=yn(t);try{if(n.shapeFlag&4){const z=i||s,O=z;v=Jt(y.call(O,z,m,r,d,w,x)),_=c}else{const z=e;v=Jt(z.length>1?z(r,{attrs:c,slots:l,emit:f}):z(r,null)),_=e.props?c:mo(c)}}catch(z){We.length=0,Ye(z,t,1),v=Lt(ne)}let A=v;if(_&&h!==!1){const z=Object.keys(_),{shapeFlag:O}=A;z.length&&O&7&&(a&&z.some(ms)&&(_=go(_,a)),A=Be(A,_))}return n.dirs&&(A=Be(A),A.dirs=A.dirs?A.dirs.concat(n.dirs):n.dirs),n.transition&&(A.transition=n.transition),v=A,yn(k),v}function po(t,e=!0){let n;for(let s=0;s<t.length;s++){const i=t[s];if(ci(i)){if(i.type!==ne||i.children==="v-if"){if(n)return;n=i}}else return}return n}const mo=t=>{let e;for(const n in t)(n==="class"||n==="style"||In(n))&&((e||(e={}))[n]=t[n]);return e},go=(t,e)=>{const n={};for(const s in t)(!ms(s)||!(s.slice(9)in e))&&(n[s]=t[s]);return n};function wo(t,e,n){const{props:s,children:i,component:r}=t,{props:a,children:l,patchFlag:c}=e,f=r.emitsOptions;if(e.dirs||e.transition)return!0;if(n&&c>=0){if(c&1024)return!0;if(c&16)return s?Ks(s,a,f):!!a;if(c&8){const y=e.dynamicProps;for(let m=0;m<y.length;m++){const w=y[m];if(a[w]!==s[w]&&!zn(f,w))return!0}}}else return(i||l)&&(!l||!l.$stable)?!0:s===a?!1:s?a?Ks(s,a,f):!0:!!a;return!1}function Ks(t,e,n){const s=Object.keys(e);if(s.length!==Object.keys(t).length)return!0;for(let i=0;i<s.length;i++){const r=s[i];if(e[r]!==t[r]&&!zn(n,r))return!0}return!1}function Ps({vnode:t,parent:e},n){for(;e;){const s=e.subTree;if(s.suspense&&s.suspense.activeBranch===t&&(s.el=t.el),s===t)(t=e.vnode).el=n,e=e.parent;else break}}const vo=Symbol.for("v-ndc"),_o=t=>t.__isSuspense;let rs=0;const yo={name:"Suspense",__isSuspense:!0,process(t,e,n,s,i,r,a,l,c,f){if(t==null)xo(e,n,s,i,r,a,l,c,f);else{if(r&&r.deps>0&&!t.suspense.isInFallback){e.suspense=t.suspense,e.suspense.vnode=e,e.el=t.el;return}ko(t,e,n,s,i,a,l,c,f)}},hydrate:Co,create:Os,normalize:So},bo=yo;function Ge(t,e){const n=t.props&&t.props[e];dt(n)&&n()}function xo(t,e,n,s,i,r,a,l,c){const{p:f,o:{createElement:y}}=c,m=y("div"),w=t.suspense=Os(t,i,s,e,m,n,r,a,l,c);f(null,w.pendingBranch=t.ssContent,m,null,s,w,r,a),w.deps>0?(Ge(t,"onPending"),Ge(t,"onFallback"),f(null,t.ssFallback,e,n,s,null,r,a),Pe(w,t.ssFallback)):w.resolve(!1,!0)}function ko(t,e,n,s,i,r,a,l,{p:c,um:f,o:{createElement:y}}){const m=e.suspense=t.suspense;m.vnode=e,e.el=t.el;const w=e.ssContent,d=e.ssFallback,{activeBranch:x,pendingBranch:h,isInFallback:v,isHydrating:_}=m;if(h)m.pendingBranch=w,ce(w,h)?(c(h,w,m.hiddenContainer,null,i,m,r,a,l),m.deps<=0?m.resolve():v&&(_||(c(x,d,n,s,i,null,r,a,l),Pe(m,d)))):(m.pendingId=rs++,_?(m.isHydrating=!1,m.activeBranch=h):f(h,i,m),m.deps=0,m.effects.length=0,m.hiddenContainer=y("div"),v?(c(null,w,m.hiddenContainer,null,i,m,r,a,l),m.deps<=0?m.resolve():(c(x,d,n,s,i,null,r,a,l),Pe(m,d))):x&&ce(w,x)?(c(x,w,n,s,i,m,r,a,l),m.resolve(!0)):(c(null,w,m.hiddenContainer,null,i,m,r,a,l),m.deps<=0&&m.resolve()));else if(x&&ce(w,x))c(x,w,n,s,i,m,r,a,l),Pe(m,w);else if(Ge(e,"onPending"),m.pendingBranch=w,w.shapeFlag&512?m.pendingId=w.component.suspenseId:m.pendingId=rs++,c(null,w,m.hiddenContainer,null,i,m,r,a,l),m.deps<=0)m.resolve();else{const{timeout:k,pendingId:A}=m;k>0?setTimeout(()=>{m.pendingId===A&&m.fallback(d)},k):k===0&&m.fallback(d)}}function Os(t,e,n,s,i,r,a,l,c,f,y=!1){const{p:m,m:w,um:d,n:x,o:{parentNode:h,remove:v}}=f;let _;const k=Io(t);k&&e?.pendingBranch&&(_=e.pendingId,e.deps++);const A=t.props?Ti(t.props.timeout):void 0,z=r,O={vnode:t,parent:e,parentComponent:n,namespace:a,container:s,hiddenContainer:i,deps:0,pendingId:rs++,timeout:typeof A=="number"?A:-1,activeBranch:null,pendingBranch:null,isInFallback:!y,isHydrating:y,isUnmounted:!1,effects:[],resolve(U=!1,H=!1){const{vnode:G,activeBranch:j,pendingBranch:q,pendingId:it,effects:P,parentComponent:Z,container:u}=O;let V=!1;O.isHydrating?O.isHydrating=!1:U||(V=j&&q.transition&&q.transition.mode==="out-in",V&&(j.transition.afterLeave=()=>{it===O.pendingId&&(w(q,u,r===z?x(j):r,0),ns(P))}),j&&(h(j.el)!==O.hiddenContainer&&(r=x(j)),d(j,Z,O,!0)),V||w(q,u,r,0)),Pe(O,q),O.pendingBranch=null,O.isInFallback=!1;let st=O.parent,F=!1;for(;st;){if(st.pendingBranch){st.effects.push(...P),F=!0;break}st=st.parent}!F&&!V&&ns(P),O.effects=[],k&&e&&e.pendingBranch&&_===e.pendingId&&(e.deps--,e.deps===0&&!H&&e.resolve()),Ge(G,"onResolve")},fallback(U){if(!O.pendingBranch)return;const{vnode:H,activeBranch:G,parentComponent:j,container:q,namespace:it}=O;Ge(H,"onFallback");const P=x(G),Z=()=>{O.isInFallback&&(m(null,U,q,P,j,null,it,l,c),Pe(O,U))},u=U.transition&&U.transition.mode==="out-in";u&&(G.transition.afterLeave=Z),O.isInFallback=!0,d(G,j,null,!0),u||Z()},move(U,H,G){O.activeBranch&&w(O.activeBranch,U,H,G),O.container=U},next(){return O.activeBranch&&x(O.activeBranch)},registerDep(U,H){const G=!!O.pendingBranch;G&&O.deps++;const j=U.vnode.el;U.asyncDep.catch(q=>{Ye(q,U,0)}).then(q=>{if(U.isUnmounted||O.isUnmounted||O.pendingId!==U.suspenseId)return;U.asyncResolved=!0;const{vnode:it}=U;fs(U,q,!1),j&&(it.el=j);const P=!j&&U.subTree.el;H(U,it,h(j||U.subTree.el),j?null:x(U.subTree),O,a,c),P&&v(P),Ps(U,it.el),G&&--O.deps===0&&O.resolve()})},unmount(U,H){O.isUnmounted=!0,O.activeBranch&&d(O.activeBranch,n,U,H),O.pendingBranch&&d(O.pendingBranch,n,U,H)}};return O}function Co(t,e,n,s,i,r,a,l,c){const f=e.suspense=Os(e,s,n,t.parentNode,document.createElement("div"),null,i,r,a,l,!0),y=c(t,f.pendingBranch=e.ssContent,n,f,r,a);return f.deps===0&&f.resolve(!1,!0),y}function So(t){const{shapeFlag:e,children:n}=t,s=e&32;t.ssContent=Gs(s?n.default:n),t.ssFallback=s?Gs(n.fallback):Lt(ne)}function Gs(t){let e;if(dt(t)){const n=Le&&t._c;n&&(t._d=!1,gt()),t=t(),n&&(t._d=!0,e=Gt,oi())}return ut(t)&&(t=po(t)),t=Jt(t),e&&!t.dynamicChildren&&(t.dynamicChildren=e.filter(n=>n!==t)),t}function To(t,e){e&&e.pendingBranch?ut(t)?e.effects.push(...t):e.effects.push(t):ns(t)}function Pe(t,e){t.activeBranch=e;const{vnode:n,parentComponent:s}=t;let i=e.el;for(;!i&&e.component;)e=e.component.subTree,i=e.el;n.el=i,s&&s.subTree===n&&(s.vnode.el=i,Ps(s,i))}function Io(t){var e;return((e=t.props)==null?void 0:e.suspensible)!=null&&t.props.suspensible!==!1}const Eo=Symbol.for("v-scx"),Ao=()=>pn(Eo),ln={};function Zn(t,e,n){return Kr(t,e,n)}function Kr(t,e,{immediate:n,deep:s,flush:i,once:r,onTrack:a,onTrigger:l}=bt){if(e&&r){const U=e;e=(...H)=>{U(...H),O()}}const c=Rt,f=U=>s===!0?U:ve(U,s===!1?1:void 0);let y,m=!1,w=!1;if(Wt(t)?(y=()=>t.value,m=_n(t)):Ee(t)?(y=()=>f(t),m=!0):ut(t)?(w=!0,m=t.some(U=>Ee(U)||_n(U)),y=()=>t.map(U=>{if(Wt(U))return U.value;if(Ee(U))return f(U);if(dt(U))return de(U,c,2)})):dt(t)?e?y=()=>de(t,c,2):y=()=>(d&&d(),Yt(t,c,3,[x])):y=Vt,e&&s){const U=y;y=()=>ve(U())}let d,x=U=>{d=A.onStop=()=>{de(U,c,4),d=A.onStop=void 0}},h;if(Mn)if(x=Vt,e?n&&Yt(e,c,3,[y(),w?[]:void 0,x]):y(),i==="sync"){const U=Ao();h=U.__watcherHandles||(U.__watcherHandles=[])}else return Vt;let v=w?new Array(t.length).fill(ln):ln;const _=()=>{if(!(!A.active||!A.dirty))if(e){const U=A.run();(s||m||(w?U.some((H,G)=>he(H,v[G])):he(U,v)))&&(d&&d(),Yt(e,c,3,[U,v===ln?void 0:w&&v[0]===ln?[]:v,x]),v=U)}else A.run()};_.allowRecurse=!!e;let k;i==="sync"?k=_:i==="post"?k=()=>Nt(_,c&&c.suspense):(_.pre=!0,c&&(_.id=c.uid),k=()=>As(_));const A=new ys(y,Vt,k),z=Ui(),O=()=>{A.stop(),z&&gs(z.effects,A)};return e?n?_():v=A.run():i==="post"?Nt(A.run.bind(A),c&&c.suspense):A.run(),h&&h.push(O),O}function Po(t,e,n){const s=this.proxy,i=zt(t)?t.includes(".")?Gr(s,t):()=>s[t]:t.bind(s,s);let r;dt(e)?r=e:(r=e.handler,n=e);const a=be(this),l=Kr(i,r.bind(s),n);return a(),l}function Gr(t,e){const n=e.split(".");return()=>{let s=t;for(let i=0;i<n.length&&s;i++)s=s[n[i]];return s}}function ve(t,e,n=0,s){if(!xt(t)||t.__v_skip)return t;if(e&&e>0){if(n>=e)return t;n++}if(s=s||new Set,s.has(t))return t;if(s.add(t),Wt(t))ve(t.value,e,n,s);else if(ut(t))for(let i=0;i<t.length;i++)ve(t[i],e,n,s);else if(En(t)||Ie(t))t.forEach(i=>{ve(i,e,n,s)});else if(wr(t))for(const i in t)ve(t[i],e,n,s);return t}function St(t,e){if(jt===null)return t;const n=Fn(jt)||jt.proxy,s=t.dirs||(t.dirs=[]);for(let i=0;i<e.length;i++){let[r,a,l,c=bt]=e[i];r&&(dt(r)&&(r={mounted:r,updated:r}),r.deep&&ve(a),s.push({dir:r,instance:n,value:a,oldValue:void 0,arg:l,modifiers:c}))}return t}function me(t,e,n,s){const i=t.dirs,r=e&&e.dirs;for(let a=0;a<i.length;a++){const l=i[a];r&&(l.oldValue=r[a].value);let c=l.dir[s];c&&(xe(),Yt(c,n,8,[t.el,l,t,e]),ke())}}/*! #__NO_SIDE_EFFECTS__ */function pe(t,e){return dt(t)?(()=>Dt({name:t.name},e,{setup:t}))():t}const hn=t=>!!t.type.__asyncLoader,qr=t=>t.type.__isKeepAlive;function Oo(t,e){Jr(t,"a",e)}function zo(t,e){Jr(t,"da",e)}function Jr(t,e,n=Rt){const s=t.__wdc||(t.__wdc=()=>{let i=n;for(;i;){if(i.isDeactivated)return;i=i.parent}return t()});if(Bn(e,s,n),n){let i=n.parent;for(;i&&i.parent;)qr(i.parent.vnode)&&Lo(s,e,n,i),i=i.parent}}function Lo(t,e,n,s){const i=Bn(e,t,s,!0);Xe(()=>{gs(s[e],i)},n)}function Bn(t,e,n=Rt,s=!1){if(n){const i=n[t]||(n[t]=[]),r=e.__weh||(e.__weh=(...a)=>{if(n.isUnmounted)return;xe();const l=be(n),c=Yt(e,n,t,a);return l(),ke(),c});return s?i.unshift(r):i.push(r),r}}const se=t=>(e,n=Rt)=>(!Mn||t==="sp")&&Bn(t,(...s)=>e(...s),n),Bo=se("bm"),Dn=se("m"),Do=se("bu"),$o=se("u"),Uo=se("bum"),Xe=se("um"),Ro=se("sp"),Mo=se("rtg"),Fo=se("rtc");function No(t,e=Rt){Bn("ec",t,e)}function $n(t,e,n,s){let i;const r=n&&n[s];if(ut(t)||zt(t)){i=new Array(t.length);for(let a=0,l=t.length;a<l;a++)i[a]=e(t[a],a,void 0,r&&r[a])}else if(typeof t=="number"){i=new Array(t);for(let a=0;a<t;a++)i[a]=e(a+1,a,void 0,r&&r[a])}else if(xt(t))if(t[Symbol.iterator])i=Array.from(t,(a,l)=>e(a,l,void 0,r&&r[l]));else{const a=Object.keys(t);i=new Array(a.length);for(let l=0,c=a.length;l<c;l++){const f=a[l];i[l]=e(t[f],f,l,r&&r[l])}}else i=[];return n&&(n[s]=i),i}const is=t=>t?di(t)?Fn(t)||t.proxy:is(t.parent):null,je=Dt(Object.create(null),{$:t=>t,$el:t=>t.vnode.el,$data:t=>t.data,$props:t=>t.props,$attrs:t=>t.attrs,$slots:t=>t.slots,$refs:t=>t.refs,$parent:t=>is(t.parent),$root:t=>is(t.root),$emit:t=>t.emit,$options:t=>zs(t),$forceUpdate:t=>t.f||(t.f=()=>{t.effect.dirty=!0,As(t.update)}),$nextTick:t=>t.n||(t.n=Fr.bind(t.proxy)),$watch:t=>Po.bind(t)}),Vn=(t,e)=>t!==bt&&!t.__isScriptSetup&&vt(t,e),jo={get({_:t},e){const{ctx:n,setupState:s,data:i,props:r,accessCache:a,type:l,appContext:c}=t;let f;if(e[0]!=="$"){const d=a[e];if(d!==void 0)switch(d){case 1:return s[e];case 2:return i[e];case 4:return n[e];case 3:return r[e]}else{if(Vn(s,e))return a[e]=1,s[e];if(i!==bt&&vt(i,e))return a[e]=2,i[e];if((f=t.propsOptions[0])&&vt(f,e))return a[e]=3,r[e];if(n!==bt&&vt(n,e))return a[e]=4,n[e];os&&(a[e]=0)}}const y=je[e];let m,w;if(y)return e==="$attrs"&&Ht(t,"get",e),y(t);if((m=l.__cssModules)&&(m=m[e]))return m;if(n!==bt&&vt(n,e))return a[e]=4,n[e];if(w=c.config.globalProperties,vt(w,e))return w[e]},set({_:t},e,n){const{data:s,setupState:i,ctx:r}=t;return Vn(i,e)?(i[e]=n,!0):s!==bt&&vt(s,e)?(s[e]=n,!0):vt(t.props,e)||e[0]==="$"&&e.slice(1)in t?!1:(r[e]=n,!0)},has({_:{data:t,setupState:e,accessCache:n,ctx:s,appContext:i,propsOptions:r}},a){let l;return!!n[a]||t!==bt&&vt(t,a)||Vn(e,a)||(l=r[0])&&vt(l,a)||vt(s,a)||vt(je,a)||vt(i.config.globalProperties,a)},defineProperty(t,e,n){return n.get!=null?t._.accessCache[e]=0:vt(n,"value")&&this.set(t,e,n.value,null),Reflect.defineProperty(t,e,n)}};function qs(t){return ut(t)?t.reduce((e,n)=>(e[n]=null,e),{}):t}function bn(t){const e=pa();let n=t();return ds(),ws(n)&&(n=n.catch(s=>{throw be(e),s})),[n,()=>be(e)]}let os=!0;function Ho(t){const e=zs(t),n=t.proxy,s=t.ctx;os=!1,e.beforeCreate&&Js(e.beforeCreate,t,"bc");const{data:i,computed:r,methods:a,watch:l,provide:c,inject:f,created:y,beforeMount:m,mounted:w,beforeUpdate:d,updated:x,activated:h,deactivated:v,beforeDestroy:_,beforeUnmount:k,destroyed:A,unmounted:z,render:O,renderTracked:U,renderTriggered:H,errorCaptured:G,serverPrefetch:j,expose:q,inheritAttrs:it,components:P,directives:Z,filters:u}=e;if(f&&Wo(f,s,null),a)for(const F in a){const rt=a[F];dt(rt)&&(s[F]=rt.bind(n))}if(i){const F=i.call(n,n);xt(F)&&(t.data=Ss(F))}if(os=!0,r)for(const F in r){const rt=r[F],J=dt(rt)?rt.bind(n,n):dt(rt.get)?rt.get.bind(n,n):Vt,tt=!dt(rt)&&dt(rt.set)?rt.set.bind(n):Vt,N=Ot({get:J,set:tt});Object.defineProperty(s,F,{enumerable:!0,configurable:!0,get:()=>N.value,set:R=>N.value=R})}if(l)for(const F in l)Yr(l[F],s,n,F);if(c){const F=dt(c)?c.call(n):c;Reflect.ownKeys(F).forEach(rt=>{Jo(rt,F[rt])})}y&&Js(y,t,"c");function st(F,rt){ut(rt)?rt.forEach(J=>F(J.bind(n))):rt&&F(rt.bind(n))}if(st(Bo,m),st(Dn,w),st(Do,d),st($o,x),st(Oo,h),st(zo,v),st(No,G),st(Fo,U),st(Mo,H),st(Uo,k),st(Xe,z),st(Ro,j),ut(q))if(q.length){const F=t.exposed||(t.exposed={});q.forEach(rt=>{Object.defineProperty(F,rt,{get:()=>n[rt],set:J=>n[rt]=J})})}else t.exposed||(t.exposed={});O&&t.render===Vt&&(t.render=O),it!=null&&(t.inheritAttrs=it),P&&(t.components=P),Z&&(t.directives=Z)}function Wo(t,e,n=Vt){ut(t)&&(t=as(t));for(const s in t){const i=t[s];let r;xt(i)?"default"in i?r=pn(i.from||s,i.default,!0):r=pn(i.from||s):r=pn(i),Wt(r)?Object.defineProperty(e,s,{enumerable:!0,configurable:!0,get:()=>r.value,set:a=>r.value=a}):e[s]=r}}function Js(t,e,n){Yt(ut(t)?t.map(s=>s.bind(e.proxy)):t.bind(e.proxy),e,n)}function Yr(t,e,n,s){const i=s.includes(".")?Gr(n,s):()=>n[s];if(zt(t)){const r=e[t];dt(r)&&Zn(i,r)}else if(dt(t))Zn(i,t.bind(n));else if(xt(t))if(ut(t))t.forEach(r=>Yr(r,e,n,s));else{const r=dt(t.handler)?t.handler.bind(n):e[t.handler];dt(r)&&Zn(i,r,t)}}function zs(t){const e=t.type,{mixins:n,extends:s}=e,{mixins:i,optionsCache:r,config:{optionMergeStrategies:a}}=t.appContext,l=r.get(e);let c;return l?c=l:!i.length&&!n&&!s?c=e:(c={},i.length&&i.forEach(f=>xn(c,f,a,!0)),xn(c,e,a)),xt(e)&&r.set(e,c),c}function xn(t,e,n,s=!1){const{mixins:i,extends:r}=e;r&&xn(t,r,n,!0),i&&i.forEach(a=>xn(t,a,n,!0));for(const a in e)if(!(s&&a==="expose")){const l=Zo[a]||n&&n[a];t[a]=l?l(t[a],e[a]):e[a]}return t}const Zo={data:Ys,props:Xs,emits:Xs,methods:Fe,computed:Fe,beforeCreate:Ft,created:Ft,beforeMount:Ft,mounted:Ft,beforeUpdate:Ft,updated:Ft,beforeDestroy:Ft,beforeUnmount:Ft,destroyed:Ft,unmounted:Ft,activated:Ft,deactivated:Ft,errorCaptured:Ft,serverPrefetch:Ft,components:Fe,directives:Fe,watch:Ko,provide:Ys,inject:Vo};function Ys(t,e){return e?t?function(){return Dt(dt(t)?t.call(this,this):t,dt(e)?e.call(this,this):e)}:e:t}function Vo(t,e){return Fe(as(t),as(e))}function as(t){if(ut(t)){const e={};for(let n=0;n<t.length;n++)e[t[n]]=t[n];return e}return t}function Ft(t,e){return t?[...new Set([].concat(t,e))]:e}function Fe(t,e){return t?Dt(Object.create(null),t,e):e}function Xs(t,e){return t?ut(t)&&ut(e)?[...new Set([...t,...e])]:Dt(Object.create(null),qs(t),qs(e??{})):e}function Ko(t,e){if(!t)return e;if(!e)return t;const n=Dt(Object.create(null),t);for(const s in e)n[s]=Ft(t[s],e[s]);return n}function Xr(){return{app:null,config:{isNativeTag:bi,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Go=0;function qo(t,e){return function(s,i=null){dt(s)||(s=Dt({},s)),i!=null&&!xt(i)&&(i=null);const r=Xr(),a=new WeakSet;let l=!1;const c=r.app={_uid:Go++,_component:s,_props:i,_container:null,_context:r,_instance:null,version:ya,get config(){return r.config},set config(f){},use(f,...y){return a.has(f)||(f&&dt(f.install)?(a.add(f),f.install(c,...y)):dt(f)&&(a.add(f),f(c,...y))),c},mixin(f){return r.mixins.includes(f)||r.mixins.push(f),c},component(f,y){return y?(r.components[f]=y,c):r.components[f]},directive(f,y){return y?(r.directives[f]=y,c):r.directives[f]},mount(f,y,m){if(!l){const w=Lt(s,i);return w.appContext=r,m===!0?m="svg":m===!1&&(m=void 0),y&&e?e(w,f):t(w,f,m),l=!0,c._container=f,f.__vue_app__=c,Fn(w.component)||w.component.proxy}},unmount(){l&&(t(null,c._container),delete c._container.__vue_app__)},provide(f,y){return r.provides[f]=y,c},runWithContext(f){const y=He;He=c;try{return f()}finally{He=y}}};return c}}let He=null;function Jo(t,e){if(Rt){let n=Rt.provides;const s=Rt.parent&&Rt.parent.provides;s===n&&(n=Rt.provides=Object.create(s)),n[t]=e}}function pn(t,e,n=!1){const s=Rt||jt;if(s||He){const i=s?s.parent==null?s.vnode.appContext&&s.vnode.appContext.provides:s.parent.provides:He._context.provides;if(i&&t in i)return i[t];if(arguments.length>1)return n&&dt(e)?e.call(s&&s.proxy):e}}function Yo(t,e,n,s=!1){const i={},r={};vn(r,Rn,1),t.propsDefaults=Object.create(null),Qr(t,e,i,r);for(const a in t.propsOptions[0])a in i||(i[a]=void 0);n?t.props=s?i:so(i):t.type.props?t.props=i:t.props=r,t.attrs=r}function Xo(t,e,n,s){const{props:i,attrs:r,vnode:{patchFlag:a}}=t,l=_t(i),[c]=t.propsOptions;let f=!1;if((s||a>0)&&!(a&16)){if(a&8){const y=t.vnode.dynamicProps;for(let m=0;m<y.length;m++){let w=y[m];if(zn(t.emitsOptions,w))continue;const d=e[w];if(c)if(vt(r,w))d!==r[w]&&(r[w]=d,f=!0);else{const x=Oe(w);i[x]=ls(c,l,x,d,t,!1)}else d!==r[w]&&(r[w]=d,f=!0)}}}else{Qr(t,e,i,r)&&(f=!0);let y;for(const m in l)(!e||!vt(e,m)&&((y=De(m))===m||!vt(e,y)))&&(c?n&&(n[m]!==void 0||n[y]!==void 0)&&(i[m]=ls(c,l,m,void 0,t,!0)):delete i[m]);if(r!==l)for(const m in r)(!e||!vt(e,m))&&(delete r[m],f=!0)}f&&ee(t,"set","$attrs")}function Qr(t,e,n,s){const[i,r]=t.propsOptions;let a=!1,l;if(e)for(let c in e){if(Ne(c))continue;const f=e[c];let y;i&&vt(i,y=Oe(c))?!r||!r.includes(y)?n[y]=f:(l||(l={}))[y]=f:zn(t.emitsOptions,c)||(!(c in s)||f!==s[c])&&(s[c]=f,a=!0)}if(r){const c=_t(n),f=l||bt;for(let y=0;y<r.length;y++){const m=r[y];n[m]=ls(i,c,m,f[m],t,!vt(f,m))}}return a}function ls(t,e,n,s,i,r){const a=t[n];if(a!=null){const l=vt(a,"default");if(l&&s===void 0){const c=a.default;if(a.type!==Function&&!a.skipFactory&&dt(c)){const{propsDefaults:f}=i;if(n in f)s=f[n];else{const y=be(i);s=f[n]=c.call(null,e),y()}}else s=c}a[0]&&(r&&!l?s=!1:a[1]&&(s===""||s===De(n))&&(s=!0))}return s}function ti(t,e,n=!1){const s=e.propsCache,i=s.get(t);if(i)return i;const r=t.props,a={},l=[];let c=!1;if(!dt(t)){const y=m=>{c=!0;const[w,d]=ti(m,e,!0);Dt(a,w),d&&l.push(...d)};!n&&e.mixins.length&&e.mixins.forEach(y),t.extends&&y(t.extends),t.mixins&&t.mixins.forEach(y)}if(!r&&!c)return xt(t)&&s.set(t,Te),Te;if(ut(r))for(let y=0;y<r.length;y++){const m=Oe(r[y]);Qs(m)&&(a[m]=bt)}else if(r)for(const y in r){const m=Oe(y);if(Qs(m)){const w=r[y],d=a[m]=ut(w)||dt(w)?{type:w}:Dt({},w);if(d){const x=nr(Boolean,d.type),h=nr(String,d.type);d[0]=x>-1,d[1]=h<0||x<h,(x>-1||vt(d,"default"))&&l.push(m)}}}const f=[a,l];return xt(t)&&s.set(t,f),f}function Qs(t){return t[0]!=="$"&&!Ne(t)}function tr(t){return t===null?"null":typeof t=="function"?t.name||"":typeof t=="object"&&t.constructor&&t.constructor.name||""}function er(t,e){return tr(t)===tr(e)}function nr(t,e){return ut(e)?e.findIndex(n=>er(n,t)):dt(e)&&er(e,t)?0:-1}const ei=t=>t[0]==="_"||t==="$stable",Ls=t=>ut(t)?t.map(Jt):[Jt(t)],Qo=(t,e,n)=>{if(e._n)return e;const s=ss((...i)=>Ls(e(...i)),n);return s._c=!1,s},ni=(t,e,n)=>{const s=t._ctx;for(const i in t){if(ei(i))continue;const r=t[i];if(dt(r))e[i]=Qo(i,r,s);else if(r!=null){const a=Ls(r);e[i]=()=>a}}},si=(t,e)=>{const n=Ls(e);t.slots.default=()=>n},ta=(t,e)=>{if(t.vnode.shapeFlag&32){const n=e._;n?(t.slots=_t(e),vn(e,"_",n)):ni(e,t.slots={})}else t.slots={},e&&si(t,e);vn(t.slots,Rn,1)},ea=(t,e,n)=>{const{vnode:s,slots:i}=t;let r=!0,a=bt;if(s.shapeFlag&32){const l=e._;l?n&&l===1?r=!1:(Dt(i,e),!n&&l===1&&delete i._):(r=!e.$stable,ni(e,i)),a=e}else e&&(si(t,e),a={default:1});if(r)for(const l in i)!ei(l)&&a[l]==null&&delete i[l]};function cs(t,e,n,s,i=!1){if(ut(t)){t.forEach((w,d)=>cs(w,e&&(ut(e)?e[d]:e),n,s,i));return}if(hn(s)&&!i)return;const r=s.shapeFlag&4?Fn(s.component)||s.component.proxy:s.el,a=i?null:r,{i:l,r:c}=t,f=e&&e.r,y=l.refs===bt?l.refs={}:l.refs,m=l.setupState;if(f!=null&&f!==c&&(zt(f)?(y[f]=null,vt(m,f)&&(m[f]=null)):Wt(f)&&(f.value=null)),dt(c))de(c,l,12,[a,y]);else{const w=zt(c),d=Wt(c);if(w||d){const x=()=>{if(t.f){const h=w?vt(m,c)?m[c]:y[c]:c.value;i?ut(h)&&gs(h,r):ut(h)?h.includes(r)||h.push(r):w?(y[c]=[r],vt(m,c)&&(m[c]=y[c])):(c.value=[r],t.k&&(y[t.k]=c.value))}else w?(y[c]=a,vt(m,c)&&(m[c]=a)):d&&(c.value=a,t.k&&(y[t.k]=a))};a?(x.id=-1,Nt(x,n)):x()}}}const Nt=To;function na(t){return sa(t)}function sa(t,e){const n=_r();n.__VUE__=!0;const{insert:s,remove:i,patchProp:r,createElement:a,createText:l,createComment:c,setText:f,setElementText:y,parentNode:m,nextSibling:w,setScopeId:d=Vt,insertStaticContent:x}=t,h=(T,o,I,E=null,g=null,p=null,C=void 0,L=null,D=!!o.dynamicChildren)=>{if(T===o)return;T&&!ce(T,o)&&(E=yt(T),R(T,g,p,!0),T=null),o.patchFlag===-2&&(D=!1,o.dynamicChildren=null);const{type:S,ref:M,shapeFlag:K}=o;switch(S){case Un:v(T,o,I,E);break;case ne:_(T,o,I,E);break;case mn:T==null&&k(o,I,E,C);break;case Bt:P(T,o,I,E,g,p,C,L,D);break;default:K&1?O(T,o,I,E,g,p,C,L,D):K&6?Z(T,o,I,E,g,p,C,L,D):(K&64||K&128)&&S.process(T,o,I,E,g,p,C,L,D,B)}M!=null&&g&&cs(M,T&&T.ref,p,o||T,!o)},v=(T,o,I,E)=>{if(T==null)s(o.el=l(o.children),I,E);else{const g=o.el=T.el;o.children!==T.children&&f(g,o.children)}},_=(T,o,I,E)=>{T==null?s(o.el=c(o.children||""),I,E):o.el=T.el},k=(T,o,I,E)=>{[T.el,T.anchor]=x(T.children,o,I,E,T.el,T.anchor)},A=({el:T,anchor:o},I,E)=>{let g;for(;T&&T!==o;)g=w(T),s(T,I,E),T=g;s(o,I,E)},z=({el:T,anchor:o})=>{let I;for(;T&&T!==o;)I=w(T),i(T),T=I;i(o)},O=(T,o,I,E,g,p,C,L,D)=>{o.type==="svg"?C="svg":o.type==="math"&&(C="mathml"),T==null?U(o,I,E,g,p,C,L,D):j(T,o,g,p,C,L,D)},U=(T,o,I,E,g,p,C,L)=>{let D,S;const{props:M,shapeFlag:K,transition:W,dirs:X}=T;if(D=T.el=a(T.type,p,M&&M.is,M),K&8?y(D,T.children):K&16&&G(T.children,D,null,E,g,Kn(T,p),C,L),X&&me(T,null,E,"created"),H(D,T,T.scopeId,C,E),M){for(const at in M)at!=="value"&&!Ne(at)&&r(D,at,null,M[at],p,T.children,E,g,pt);"value"in M&&r(D,"value",null,M.value,p),(S=M.onVnodeBeforeMount)&&Qt(S,E,T)}X&&me(T,null,E,"beforeMount");const ot=ra(g,W);ot&&W.beforeEnter(D),s(D,o,I),((S=M&&M.onVnodeMounted)||ot||X)&&Nt(()=>{S&&Qt(S,E,T),ot&&W.enter(D),X&&me(T,null,E,"mounted")},g)},H=(T,o,I,E,g)=>{if(I&&d(T,I),E)for(let p=0;p<E.length;p++)d(T,E[p]);if(g){let p=g.subTree;if(o===p){const C=g.vnode;H(T,C,C.scopeId,C.slotScopeIds,g.parent)}}},G=(T,o,I,E,g,p,C,L,D=0)=>{for(let S=D;S<T.length;S++){const M=T[S]=L?ae(T[S]):Jt(T[S]);h(null,M,o,I,E,g,p,C,L)}},j=(T,o,I,E,g,p,C)=>{const L=o.el=T.el;let{patchFlag:D,dynamicChildren:S,dirs:M}=o;D|=T.patchFlag&16;const K=T.props||bt,W=o.props||bt;let X;if(I&&ge(I,!1),(X=W.onVnodeBeforeUpdate)&&Qt(X,I,o,T),M&&me(o,T,I,"beforeUpdate"),I&&ge(I,!0),S?q(T.dynamicChildren,S,L,I,E,Kn(o,g),p):C||rt(T,o,L,null,I,E,Kn(o,g),p,!1),D>0){if(D&16)it(L,o,K,W,I,E,g);else if(D&2&&K.class!==W.class&&r(L,"class",null,W.class,g),D&4&&r(L,"style",K.style,W.style,g),D&8){const ot=o.dynamicProps;for(let at=0;at<ot.length;at++){const mt=ot[at],kt=K[mt],Pt=W[mt];(Pt!==kt||mt==="value")&&r(L,mt,kt,Pt,g,T.children,I,E,pt)}}D&1&&T.children!==o.children&&y(L,o.children)}else!C&&S==null&&it(L,o,K,W,I,E,g);((X=W.onVnodeUpdated)||M)&&Nt(()=>{X&&Qt(X,I,o,T),M&&me(o,T,I,"updated")},E)},q=(T,o,I,E,g,p,C)=>{for(let L=0;L<o.length;L++){const D=T[L],S=o[L],M=D.el&&(D.type===Bt||!ce(D,S)||D.shapeFlag&70)?m(D.el):I;h(D,S,M,null,E,g,p,C,!0)}},it=(T,o,I,E,g,p,C)=>{if(I!==E){if(I!==bt)for(const L in I)!Ne(L)&&!(L in E)&&r(T,L,I[L],null,C,o.children,g,p,pt);for(const L in E){if(Ne(L))continue;const D=E[L],S=I[L];D!==S&&L!=="value"&&r(T,L,S,D,C,o.children,g,p,pt)}"value"in E&&r(T,"value",I.value,E.value,C)}},P=(T,o,I,E,g,p,C,L,D)=>{const S=o.el=T?T.el:l(""),M=o.anchor=T?T.anchor:l("");let{patchFlag:K,dynamicChildren:W,slotScopeIds:X}=o;X&&(L=L?L.concat(X):X),T==null?(s(S,I,E),s(M,I,E),G(o.children||[],I,M,g,p,C,L,D)):K>0&&K&64&&W&&T.dynamicChildren?(q(T.dynamicChildren,W,I,g,p,C,L),(o.key!=null||g&&o===g.subTree)&&ri(T,o,!0)):rt(T,o,I,M,g,p,C,L,D)},Z=(T,o,I,E,g,p,C,L,D)=>{o.slotScopeIds=L,T==null?o.shapeFlag&512?g.ctx.activate(o,I,E,C,D):u(o,I,E,g,p,C,D):V(T,o,D)},u=(T,o,I,E,g,p,C)=>{const L=T.component=ha(T,E,g);if(qr(T)&&(L.ctx.renderer=B),ma(L),L.asyncDep){if(g&&g.registerDep(L,st),!T.el){const D=L.subTree=Lt(ne);_(null,D,o,I)}}else st(L,T,o,I,g,p,C)},V=(T,o,I)=>{const E=o.component=T.component;if(wo(T,o,I))if(E.asyncDep&&!E.asyncResolved){F(E,o,I);return}else E.next=o,uo(E.update),E.effect.dirty=!0,E.update();else o.el=T.el,E.vnode=o},st=(T,o,I,E,g,p,C)=>{const L=()=>{if(T.isMounted){let{next:M,bu:K,u:W,parent:X,vnode:ot}=T;{const Kt=ii(T);if(Kt){M&&(M.el=ot.el,F(T,M,C)),Kt.asyncDep.then(()=>{T.isUnmounted||L()});return}}let at=M,mt;ge(T,!1),M?(M.el=ot.el,F(T,M,C)):M=ot,K&&dn(K),(mt=M.props&&M.props.onVnodeBeforeUpdate)&&Qt(mt,X,M,ot),ge(T,!0);const kt=Wn(T),Pt=T.subTree;T.subTree=kt,h(Pt,kt,m(Pt.el),yt(Pt),T,g,p),M.el=kt.el,at===null&&Ps(T,kt.el),W&&Nt(W,g),(mt=M.props&&M.props.onVnodeUpdated)&&Nt(()=>Qt(mt,X,M,ot),g)}else{let M;const{el:K,props:W}=o,{bm:X,m:ot,parent:at}=T,mt=hn(o);if(ge(T,!1),X&&dn(X),!mt&&(M=W&&W.onVnodeBeforeMount)&&Qt(M,at,o),ge(T,!0),K&&nt){const kt=()=>{T.subTree=Wn(T),nt(K,T.subTree,T,g,null)};mt?o.type.__asyncLoader().then(()=>!T.isUnmounted&&kt()):kt()}else{const kt=T.subTree=Wn(T);h(null,kt,I,E,T,g,p),o.el=kt.el}if(ot&&Nt(ot,g),!mt&&(M=W&&W.onVnodeMounted)){const kt=o;Nt(()=>Qt(M,at,kt),g)}(o.shapeFlag&256||at&&hn(at.vnode)&&at.vnode.shapeFlag&256)&&T.a&&Nt(T.a,g),T.isMounted=!0,o=I=E=null}},D=T.effect=new ys(L,Vt,()=>As(S),T.scope),S=T.update=()=>{D.dirty&&D.run()};S.id=T.uid,ge(T,!0),S()},F=(T,o,I)=>{o.component=T;const E=T.vnode.props;T.vnode=o,T.next=null,Xo(T,o.props,E,I),ea(T,o.children,I),xe(),Vs(T),ke()},rt=(T,o,I,E,g,p,C,L,D=!1)=>{const S=T&&T.children,M=T?T.shapeFlag:0,K=o.children,{patchFlag:W,shapeFlag:X}=o;if(W>0){if(W&128){tt(S,K,I,E,g,p,C,L,D);return}else if(W&256){J(S,K,I,E,g,p,C,L,D);return}}X&8?(M&16&&pt(S,g,p),K!==S&&y(I,K)):M&16?X&16?tt(S,K,I,E,g,p,C,L,D):pt(S,g,p,!0):(M&8&&y(I,""),X&16&&G(K,I,E,g,p,C,L,D))},J=(T,o,I,E,g,p,C,L,D)=>{T=T||Te,o=o||Te;const S=T.length,M=o.length,K=Math.min(S,M);let W;for(W=0;W<K;W++){const X=o[W]=D?ae(o[W]):Jt(o[W]);h(T[W],X,I,null,g,p,C,L,D)}S>M?pt(T,g,p,!0,!1,K):G(o,I,E,g,p,C,L,D,K)},tt=(T,o,I,E,g,p,C,L,D)=>{let S=0;const M=o.length;let K=T.length-1,W=M-1;for(;S<=K&&S<=W;){const X=T[S],ot=o[S]=D?ae(o[S]):Jt(o[S]);if(ce(X,ot))h(X,ot,I,null,g,p,C,L,D);else break;S++}for(;S<=K&&S<=W;){const X=T[K],ot=o[W]=D?ae(o[W]):Jt(o[W]);if(ce(X,ot))h(X,ot,I,null,g,p,C,L,D);else break;K--,W--}if(S>K){if(S<=W){const X=W+1,ot=X<M?o[X].el:E;for(;S<=W;)h(null,o[S]=D?ae(o[S]):Jt(o[S]),I,ot,g,p,C,L,D),S++}}else if(S>W)for(;S<=K;)R(T[S],g,p,!0),S++;else{const X=S,ot=S,at=new Map;for(S=ot;S<=W;S++){const It=o[S]=D?ae(o[S]):Jt(o[S]);It.key!=null&&at.set(It.key,S)}let mt,kt=0;const Pt=W-ot+1;let Kt=!1,Ct=0;const Xt=new Array(Pt);for(S=0;S<Pt;S++)Xt[S]=0;for(S=X;S<=K;S++){const It=T[S];if(kt>=Pt){R(It,g,p,!0);continue}let Zt;if(It.key!=null)Zt=at.get(It.key);else for(mt=ot;mt<=W;mt++)if(Xt[mt-ot]===0&&ce(It,o[mt])){Zt=mt;break}Zt===void 0?R(It,g,p,!0):(Xt[Zt-ot]=S+1,Zt>=Ct?Ct=Zt:Kt=!0,h(It,o[Zt],I,null,g,p,C,L,D),kt++)}const Se=Kt?ia(Xt):Te;for(mt=Se.length-1,S=Pt-1;S>=0;S--){const It=ot+S,Zt=o[It],tn=It+1<M?o[It+1].el:E;Xt[S]===0?h(null,Zt,I,tn,g,p,C,L,D):Kt&&(mt<0||S!==Se[mt]?N(Zt,I,tn,2):mt--)}}},N=(T,o,I,E,g=null)=>{const{el:p,type:C,transition:L,children:D,shapeFlag:S}=T;if(S&6){N(T.component.subTree,o,I,E);return}if(S&128){T.suspense.move(o,I,E);return}if(S&64){C.move(T,o,I,B);return}if(C===Bt){s(p,o,I);for(let K=0;K<D.length;K++)N(D[K],o,I,E);s(T.anchor,o,I);return}if(C===mn){A(T,o,I);return}if(E!==2&&S&1&&L)if(E===0)L.beforeEnter(p),s(p,o,I),Nt(()=>L.enter(p),g);else{const{leave:K,delayLeave:W,afterLeave:X}=L,ot=()=>s(p,o,I),at=()=>{K(p,()=>{ot(),X&&X()})};W?W(p,ot,at):at()}else s(p,o,I)},R=(T,o,I,E=!1,g=!1)=>{const{type:p,props:C,ref:L,children:D,dynamicChildren:S,shapeFlag:M,patchFlag:K,dirs:W}=T;if(L!=null&&cs(L,null,I,T,!0),M&256){o.ctx.deactivate(T);return}const X=M&1&&W,ot=!hn(T);let at;if(ot&&(at=C&&C.onVnodeBeforeUnmount)&&Qt(at,o,T),M&6)Q(T.component,I,E);else{if(M&128){T.suspense.unmount(I,E);return}X&&me(T,null,o,"beforeUnmount"),M&64?T.type.remove(T,o,I,g,B,E):S&&(p!==Bt||K>0&&K&64)?pt(S,o,I,!1,!0):(p===Bt&&K&384||!g&&M&16)&&pt(D,o,I),E&&ct(T)}(ot&&(at=C&&C.onVnodeUnmounted)||X)&&Nt(()=>{at&&Qt(at,o,T),X&&me(T,null,o,"unmounted")},I)},ct=T=>{const{type:o,el:I,anchor:E,transition:g}=T;if(o===Bt){et(I,E);return}if(o===mn){z(T);return}const p=()=>{i(I),g&&!g.persisted&&g.afterLeave&&g.afterLeave()};if(T.shapeFlag&1&&g&&!g.persisted){const{leave:C,delayLeave:L}=g,D=()=>C(I,p);L?L(T.el,p,D):D()}else p()},et=(T,o)=>{let I;for(;T!==o;)I=w(T),i(T),T=I;i(o)},Q=(T,o,I)=>{const{bum:E,scope:g,update:p,subTree:C,um:L}=T;E&&dn(E),g.stop(),p&&(p.active=!1,R(C,T,o,I)),L&&Nt(L,o),Nt(()=>{T.isUnmounted=!0},o),o&&o.pendingBranch&&!o.isUnmounted&&T.asyncDep&&!T.asyncResolved&&T.suspenseId===o.pendingId&&(o.deps--,o.deps===0&&o.resolve())},pt=(T,o,I,E=!1,g=!1,p=0)=>{for(let C=p;C<T.length;C++)R(T[C],o,I,E,g)},yt=T=>T.shapeFlag&6?yt(T.component.subTree):T.shapeFlag&128?T.suspense.next():w(T.anchor||T.el);let ft=!1;const Y=(T,o,I)=>{T==null?o._vnode&&R(o._vnode,null,null,!0):h(o._vnode||null,T,o,null,null,null,I),ft||(ft=!0,Vs(),jr(),ft=!1),o._vnode=T},B={p:h,um:R,m:N,r:ct,mt:u,mc:G,pc:rt,pbc:q,n:yt,o:t};let $,nt;return e&&([$,nt]=e(B)),{render:Y,hydrate:$,createApp:qo(Y,$)}}function Kn({type:t,props:e},n){return n==="svg"&&t==="foreignObject"||n==="mathml"&&t==="annotation-xml"&&e&&e.encoding&&e.encoding.includes("html")?void 0:n}function ge({effect:t,update:e},n){t.allowRecurse=e.allowRecurse=n}function ra(t,e){return(!t||t&&!t.pendingBranch)&&e&&!e.persisted}function ri(t,e,n=!1){const s=t.children,i=e.children;if(ut(s)&&ut(i))for(let r=0;r<s.length;r++){const a=s[r];let l=i[r];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=i[r]=ae(i[r]),l.el=a.el),n||ri(a,l)),l.type===Un&&(l.el=a.el)}}function ia(t){const e=t.slice(),n=[0];let s,i,r,a,l;const c=t.length;for(s=0;s<c;s++){const f=t[s];if(f!==0){if(i=n[n.length-1],t[i]<f){e[s]=i,n.push(s);continue}for(r=0,a=n.length-1;r<a;)l=r+a>>1,t[n[l]]<f?r=l+1:a=l;f<t[n[r]]&&(r>0&&(e[s]=n[r-1]),n[r]=s)}}for(r=n.length,a=n[r-1];r-- >0;)n[r]=a,a=e[a];return n}function ii(t){const e=t.subTree.component;if(e)return e.asyncDep&&!e.asyncResolved?e:ii(e)}const oa=t=>t.__isTeleport,Bt=Symbol.for("v-fgt"),Un=Symbol.for("v-txt"),ne=Symbol.for("v-cmt"),mn=Symbol.for("v-stc"),We=[];let Gt=null;function gt(t=!1){We.push(Gt=t?null:[])}function oi(){We.pop(),Gt=We[We.length-1]||null}let Le=1;function sr(t){Le+=t}function ai(t){return t.dynamicChildren=Le>0?Gt||Te:null,oi(),Le>0&&Gt&&Gt.push(t),t}function wt(t,e,n,s,i,r){return ai(b(t,e,n,s,i,r,!0))}function li(t,e,n,s,i){return ai(Lt(t,e,n,s,i,!0))}function ci(t){return t?t.__v_isVNode===!0:!1}function ce(t,e){return t.type===e.type&&t.key===e.key}const Rn="__vInternal",ui=({key:t})=>t??null,gn=({ref:t,ref_key:e,ref_for:n})=>(typeof t=="number"&&(t=""+t),t!=null?zt(t)||Wt(t)||dt(t)?{i:jt,r:t,k:e,f:!!n}:t:null);function b(t,e=null,n=null,s=0,i=null,r=t===Bt?0:1,a=!1,l=!1){const c={__v_isVNode:!0,__v_skip:!0,type:t,props:e,key:e&&ui(e),ref:e&&gn(e),scopeId:Ln,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:r,patchFlag:s,dynamicProps:i,dynamicChildren:null,appContext:null,ctx:jt};return l?(Bs(c,n),r&128&&t.normalize(c)):n&&(c.shapeFlag|=zt(n)?8:16),Le>0&&!a&&Gt&&(c.patchFlag>0||r&6)&&c.patchFlag!==32&&Gt.push(c),c}const Lt=aa;function aa(t,e=null,n=null,s=0,i=null,r=!1){if((!t||t===vo)&&(t=ne),ci(t)){const l=Be(t,e,!0);return n&&Bs(l,n),Le>0&&!r&&Gt&&(l.shapeFlag&6?Gt[Gt.indexOf(t)]=l:Gt.push(l)),l.patchFlag|=-2,l}if(_a(t)&&(t=t.__vccOpts),e){e=la(e);let{class:l,style:c}=e;l&&!zt(l)&&(e.class=At(l)),xt(c)&&(Br(c)&&!ut(c)&&(c=Dt({},c)),e.style=Je(c))}const a=zt(t)?1:_o(t)?128:oa(t)?64:xt(t)?4:dt(t)?2:0;return b(t,e,n,s,i,a,r,!0)}function la(t){return t?Br(t)||Rn in t?Dt({},t):t:null}function Be(t,e,n=!1){const{props:s,ref:i,patchFlag:r,children:a}=t,l=e?ua(s||{},e):s;return{__v_isVNode:!0,__v_skip:!0,type:t.type,props:l,key:l&&ui(l),ref:e&&e.ref?n&&i?ut(i)?i.concat(gn(e)):[i,gn(e)]:gn(e):i,scopeId:t.scopeId,slotScopeIds:t.slotScopeIds,children:a,target:t.target,targetAnchor:t.targetAnchor,staticCount:t.staticCount,shapeFlag:t.shapeFlag,patchFlag:e&&t.type!==Bt?r===-1?16:r|16:r,dynamicProps:t.dynamicProps,dynamicChildren:t.dynamicChildren,appContext:t.appContext,dirs:t.dirs,transition:t.transition,component:t.component,suspense:t.suspense,ssContent:t.ssContent&&Be(t.ssContent),ssFallback:t.ssFallback&&Be(t.ssFallback),el:t.el,anchor:t.anchor,ctx:t.ctx,ce:t.ce}}function Mt(t=" ",e=0){return Lt(Un,null,t,e)}function ca(t,e){const n=Lt(mn,null,t);return n.staticCount=e,n}function Qe(t="",e=!1){return e?(gt(),li(ne,null,t)):Lt(ne,null,t)}function Jt(t){return t==null||typeof t=="boolean"?Lt(ne):ut(t)?Lt(Bt,null,t.slice()):typeof t=="object"?ae(t):Lt(Un,null,String(t))}function ae(t){return t.el===null&&t.patchFlag!==-1||t.memo?t:Be(t)}function Bs(t,e){let n=0;const{shapeFlag:s}=t;if(e==null)e=null;else if(ut(e))n=16;else if(typeof e=="object")if(s&65){const i=e.default;i&&(i._c&&(i._d=!1),Bs(t,i()),i._c&&(i._d=!0));return}else{n=32;const i=e._;!i&&!(Rn in e)?e._ctx=jt:i===3&&jt&&(jt.slots._===1?e._=1:(e._=2,t.patchFlag|=1024))}else dt(e)?(e={default:e,_ctx:jt},n=32):(e=String(e),s&64?(n=16,e=[Mt(e)]):n=8);t.children=e,t.shapeFlag|=n}function ua(...t){const e={};for(let n=0;n<t.length;n++){const s=t[n];for(const i in s)if(i==="class")e.class!==s.class&&(e.class=At([e.class,s.class]));else if(i==="style")e.style=Je([e.style,s.style]);else if(In(i)){const r=e[i],a=s[i];a&&r!==a&&!(ut(r)&&r.includes(a))&&(e[i]=r?[].concat(r,a):a)}else i!==""&&(e[i]=s[i])}return e}function Qt(t,e,n,s=null){Yt(t,e,7,[n,s])}const da=Xr();let fa=0;function ha(t,e,n){const s=t.type,i=(e?e.appContext:t.appContext)||da,r={uid:fa++,vnode:t,type:s,parent:e,appContext:i,root:null,next:null,subTree:null,effect:null,update:null,scope:new Di(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:e?e.provides:Object.create(i.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:ti(s,i),emitsOptions:Wr(s,i),emit:null,emitted:null,propsDefaults:bt,inheritAttrs:s.inheritAttrs,ctx:bt,data:bt,props:bt,attrs:bt,slots:bt,refs:bt,setupState:bt,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return r.ctx={_:r},r.root=e?e.root:r,r.emit=ho.bind(null,r),t.ce&&t.ce(r),r}let Rt=null;const pa=()=>Rt||jt;let kn,us;{const t=_r(),e=(n,s)=>{let i;return(i=t[n])||(i=t[n]=[]),i.push(s),r=>{i.length>1?i.forEach(a=>a(r)):i[0](r)}};kn=e("__VUE_INSTANCE_SETTERS__",n=>Rt=n),us=e("__VUE_SSR_SETTERS__",n=>Mn=n)}const be=t=>{const e=Rt;return kn(t),t.scope.on(),()=>{t.scope.off(),kn(e)}},ds=()=>{Rt&&Rt.scope.off(),kn(null)};function di(t){return t.vnode.shapeFlag&4}let Mn=!1;function ma(t,e=!1){e&&us(e);const{props:n,children:s}=t.vnode,i=di(t);Yo(t,n,i,e),ta(t,s);const r=i?ga(t,e):void 0;return e&&us(!1),r}function ga(t,e){const n=t.type;t.accessCache=Object.create(null),t.proxy=Dr(new Proxy(t.ctx,jo));const{setup:s}=n;if(s){const i=t.setupContext=s.length>1?va(t):null,r=be(t);xe();const a=de(s,t,0,[t.props,i]);if(ke(),r(),ws(a)){if(a.then(ds,ds),e)return a.then(l=>{fs(t,l,e)}).catch(l=>{Ye(l,t,0)});t.asyncDep=a}else fs(t,a,e)}else fi(t,e)}function fs(t,e,n){dt(e)?t.type.__ssrInlineRender?t.ssrRender=e:t.render=e:xt(e)&&(t.setupState=Rr(e)),fi(t,n)}let rr;function fi(t,e,n){const s=t.type;if(!t.render){if(!e&&rr&&!s.render){const i=s.template||zs(t).template;if(i){const{isCustomElement:r,compilerOptions:a}=t.appContext.config,{delimiters:l,compilerOptions:c}=s,f=Dt(Dt({isCustomElement:r,delimiters:l},a),c);s.render=rr(i,f)}}t.render=s.render||Vt}{const i=be(t);xe();try{Ho(t)}finally{ke(),i()}}}function wa(t){return t.attrsProxy||(t.attrsProxy=new Proxy(t.attrs,{get(e,n){return Ht(t,"get","$attrs"),e[n]}}))}function va(t){const e=n=>{t.exposed=n||{}};return{get attrs(){return wa(t)},slots:t.slots,emit:t.emit,expose:e}}function Fn(t){if(t.exposed)return t.exposeProxy||(t.exposeProxy=new Proxy(Rr(Dr(t.exposed)),{get(e,n){if(n in e)return e[n];if(n in je)return je[n](t)},has(e,n){return n in e||n in je}}))}function _a(t){return dt(t)&&"__vccOpts"in t}const Ot=(t,e)=>ro(t,e,Mn),ya="3.4.21";/**
* @vue/runtime-dom v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const ba="http://www.w3.org/2000/svg",xa="http://www.w3.org/1998/Math/MathML",le=typeof document<"u"?document:null,ir=le&&le.createElement("template"),ka={insert:(t,e,n)=>{e.insertBefore(t,n||null)},remove:t=>{const e=t.parentNode;e&&e.removeChild(t)},createElement:(t,e,n,s)=>{const i=e==="svg"?le.createElementNS(ba,t):e==="mathml"?le.createElementNS(xa,t):le.createElement(t,n?{is:n}:void 0);return t==="select"&&s&&s.multiple!=null&&i.setAttribute("multiple",s.multiple),i},createText:t=>le.createTextNode(t),createComment:t=>le.createComment(t),setText:(t,e)=>{t.nodeValue=e},setElementText:(t,e)=>{t.textContent=e},parentNode:t=>t.parentNode,nextSibling:t=>t.nextSibling,querySelector:t=>le.querySelector(t),setScopeId(t,e){t.setAttribute(e,"")},insertStaticContent(t,e,n,s,i,r){const a=n?n.previousSibling:e.lastChild;if(i&&(i===r||i.nextSibling))for(;e.insertBefore(i.cloneNode(!0),n),!(i===r||!(i=i.nextSibling)););else{ir.innerHTML=s==="svg"?`<svg>${t}</svg>`:s==="mathml"?`<math>${t}</math>`:t;const l=ir.content;if(s==="svg"||s==="mathml"){const c=l.firstChild;for(;c.firstChild;)l.appendChild(c.firstChild);l.removeChild(c)}e.insertBefore(l,n)}return[a?a.nextSibling:e.firstChild,n?n.previousSibling:e.lastChild]}},Ca=Symbol("_vtc");function Sa(t,e,n){const s=t[Ca];s&&(e=(e?[e,...s]:[...s]).join(" ")),e==null?t.removeAttribute("class"):n?t.setAttribute("class",e):t.className=e}const Cn=Symbol("_vod"),hi=Symbol("_vsh"),Et={beforeMount(t,{value:e},{transition:n}){t[Cn]=t.style.display==="none"?"":t.style.display,n&&e?n.beforeEnter(t):Me(t,e)},mounted(t,{value:e},{transition:n}){n&&e&&n.enter(t)},updated(t,{value:e,oldValue:n},{transition:s}){!e!=!n&&(s?e?(s.beforeEnter(t),Me(t,!0),s.enter(t)):s.leave(t,()=>{Me(t,!1)}):Me(t,e))},beforeUnmount(t,{value:e}){Me(t,e)}};function Me(t,e){t.style.display=e?t[Cn]:"none",t[hi]=!e}const Ta=Symbol(""),Ia=/(^|;)\s*display\s*:/;function Ea(t,e,n){const s=t.style,i=zt(n);let r=!1;if(n&&!i){if(e)if(zt(e))for(const a of e.split(";")){const l=a.slice(0,a.indexOf(":")).trim();n[l]==null&&wn(s,l,"")}else for(const a in e)n[a]==null&&wn(s,a,"");for(const a in n)a==="display"&&(r=!0),wn(s,a,n[a])}else if(i){if(e!==n){const a=s[Ta];a&&(n+=";"+a),s.cssText=n,r=Ia.test(n)}}else e&&t.removeAttribute("style");Cn in t&&(t[Cn]=r?s.display:"",t[hi]&&(s.display="none"))}const or=/\s*!important$/;function wn(t,e,n){if(ut(n))n.forEach(s=>wn(t,e,s));else if(n==null&&(n=""),e.startsWith("--"))t.setProperty(e,n);else{const s=Aa(t,e);or.test(n)?t.setProperty(De(s),n.replace(or,""),"important"):t[s]=n}}const ar=["Webkit","Moz","ms"],Gn={};function Aa(t,e){const n=Gn[e];if(n)return n;let s=Oe(e);if(s!=="filter"&&s in t)return Gn[e]=s;s=vr(s);for(let i=0;i<ar.length;i++){const r=ar[i]+s;if(r in t)return Gn[e]=r}return e}const lr="http://www.w3.org/1999/xlink";function Pa(t,e,n,s,i){if(s&&e.startsWith("xlink:"))n==null?t.removeAttributeNS(lr,e.slice(6,e.length)):t.setAttributeNS(lr,e,n);else{const r=zi(e);n==null||r&&!yr(n)?t.removeAttribute(e):t.setAttribute(e,r?"":n)}}function Oa(t,e,n,s,i,r,a){if(e==="innerHTML"||e==="textContent"){s&&a(s,i,r),t[e]=n??"";return}const l=t.tagName;if(e==="value"&&l!=="PROGRESS"&&!l.includes("-")){const f=l==="OPTION"?t.getAttribute("value")||"":t.value,y=n??"";(f!==y||!("_value"in t))&&(t.value=y),n==null&&t.removeAttribute(e),t._value=n;return}let c=!1;if(n===""||n==null){const f=typeof t[e];f==="boolean"?n=yr(n):n==null&&f==="string"?(n="",c=!0):f==="number"&&(n=0,c=!0)}try{t[e]=n}catch{}c&&t.removeAttribute(e)}function pi(t,e,n,s){t.addEventListener(e,n,s)}function za(t,e,n,s){t.removeEventListener(e,n,s)}const cr=Symbol("_vei");function La(t,e,n,s,i=null){const r=t[cr]||(t[cr]={}),a=r[e];if(s&&a)a.value=s;else{const[l,c]=Ba(e);if(s){const f=r[e]=Ua(s,i);pi(t,l,f,c)}else a&&(za(t,l,a,c),r[e]=void 0)}}const ur=/(?:Once|Passive|Capture)$/;function Ba(t){let e;if(ur.test(t)){e={};let s;for(;s=t.match(ur);)t=t.slice(0,t.length-s[0].length),e[s[0].toLowerCase()]=!0}return[t[2]===":"?t.slice(3):De(t.slice(2)),e]}let qn=0;const Da=Promise.resolve(),$a=()=>qn||(Da.then(()=>qn=0),qn=Date.now());function Ua(t,e){const n=s=>{if(!s._vts)s._vts=Date.now();else if(s._vts<=n.attached)return;Yt(Ra(s,n.value),e,5,[s])};return n.value=t,n.attached=$a(),n}function Ra(t,e){if(ut(e)){const n=t.stopImmediatePropagation;return t.stopImmediatePropagation=()=>{n.call(t),t._stopped=!0},e.map(s=>i=>!i._stopped&&s&&s(i))}else return e}const dr=t=>t.charCodeAt(0)===111&&t.charCodeAt(1)===110&&t.charCodeAt(2)>96&&t.charCodeAt(2)<123,Ma=(t,e,n,s,i,r,a,l,c)=>{const f=i==="svg";e==="class"?Sa(t,s,f):e==="style"?Ea(t,n,s):In(e)?ms(e)||La(t,e,n,s,a):(e[0]==="."?(e=e.slice(1),!0):e[0]==="^"?(e=e.slice(1),!1):Fa(t,e,s,f))?Oa(t,e,s,r,a,l,c):(e==="true-value"?t._trueValue=s:e==="false-value"&&(t._falseValue=s),Pa(t,e,s,f))};function Fa(t,e,n,s){if(s)return!!(e==="innerHTML"||e==="textContent"||e in t&&dr(e)&&dt(n));if(e==="spellcheck"||e==="draggable"||e==="translate"||e==="form"||e==="list"&&t.tagName==="INPUT"||e==="type"&&t.tagName==="TEXTAREA")return!1;if(e==="width"||e==="height"){const i=t.tagName;if(i==="IMG"||i==="VIDEO"||i==="CANVAS"||i==="SOURCE")return!1}return dr(e)&&zt(n)?!1:e in t}const fr=t=>{const e=t.props["onUpdate:modelValue"]||!1;return ut(e)?n=>dn(e,n):e},Jn=Symbol("_assign"),Na={deep:!0,created(t,{value:e,modifiers:{number:n}},s){const i=En(e);pi(t,"change",()=>{const r=Array.prototype.filter.call(t.options,a=>a.selected).map(a=>n?_s(Sn(a)):Sn(a));t[Jn](t.multiple?i?new Set(r):r:r[0]),t._assigning=!0,Fr(()=>{t._assigning=!1})}),t[Jn]=fr(s)},mounted(t,{value:e,modifiers:{number:n}}){hr(t,e,n)},beforeUpdate(t,e,n){t[Jn]=fr(n)},updated(t,{value:e,modifiers:{number:n}}){t._assigning||hr(t,e,n)}};function hr(t,e,n){const s=t.multiple,i=ut(e);if(!(s&&!i&&!En(e))){for(let r=0,a=t.options.length;r<a;r++){const l=t.options[r],c=Sn(l);if(s)if(i){const f=typeof c;f==="string"||f==="number"?l.selected=e.includes(n?_s(c):c):l.selected=Bi(e,c)>-1}else l.selected=e.has(c);else if(Pn(Sn(l),e)){t.selectedIndex!==r&&(t.selectedIndex=r);return}}!s&&t.selectedIndex!==-1&&(t.selectedIndex=-1)}}function Sn(t){return"_value"in t?t._value:t.value}const ja=["ctrl","shift","alt","meta"],Ha={stop:t=>t.stopPropagation(),prevent:t=>t.preventDefault(),self:t=>t.target!==t.currentTarget,ctrl:t=>!t.ctrlKey,shift:t=>!t.shiftKey,alt:t=>!t.altKey,meta:t=>!t.metaKey,left:t=>"button"in t&&t.button!==0,middle:t=>"button"in t&&t.button!==1,right:t=>"button"in t&&t.button!==2,exact:(t,e)=>ja.some(n=>t[`${n}Key`]&&!e.includes(n))},Nn=(t,e)=>{const n=t._withMods||(t._withMods={}),s=e.join(".");return n[s]||(n[s]=(i,...r)=>{for(let a=0;a<e.length;a++){const l=Ha[e[a]];if(l&&l(i,e))return}return t(i,...r)})},Wa=Dt({patchProp:Ma},ka);let pr;function Za(){return pr||(pr=na(Wa))}const Va=(...t)=>{const e=Za().createApp(...t),{mount:n}=e;return e.mount=s=>{const i=Ga(s);if(!i)return;const r=e._component;!dt(r)&&!r.render&&!r.template&&(r.template=i.innerHTML),i.innerHTML="";const a=n(i,!1,Ka(i));return i instanceof Element&&(i.removeAttribute("v-cloak"),i.setAttribute("data-v-app","")),a},e};function Ka(t){if(t instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&t instanceof MathMLElement)return"mathml"}function Ga(t){return zt(t)?document.querySelector(t):t}const qa={class:"relative flex flex-wrap justify-center w-full gap-2"},Ja={class:"relative flex flex-wrap justify-center w-full gap-2"},Ya=["onClick"],Xa=pe({__name:"Toolbar",props:{pluginList:{},activeCategory:{}},emits:["update-active-category"],setup(t){const e=t,n=ht(!1),s=Ot(()=>{let a=[];return Array.isArray(e.pluginList)&&e.pluginList.forEach(l=>{if(l.tags&&typeof l.tags=="string"){let c=l.tags.split(",").map(f=>f.trim());c=c.filter(f=>f!==""),c.length>0&&a.push(c[0])}}),a}),i=Ot(()=>Array.from(new Set(s.value))),r=()=>{n.value=!n.value};return(a,l)=>(gt(),wt("div",qa,[b("button",{class:At(["inline-flex items-center border-2 shadow-md justify-center px-4 py-2 font-sans text-sm transition-colors duration-300 rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 tw-accessibility",a.activeCategory==="all"?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent "]),onClick:l[0]||(l[0]=c=>a.$emit("update-active-category","all"))}," All ",2),b("button",{class:"inline-flex w-full items-center shadow-md justify-center px-4 py-2 font-sans text-sm transition-colors duration-300 rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 tw-accessibility",onClick:r}," 按分类筛选 ⇣ "),St(b("div",Ja,[(gt(!0),wt(Bt,null,$n(i.value,c=>(gt(),wt("div",{class:"plugin-item",key:c},[b("button",{class:At(["h-6 inline-flex items-center border-2 shadow-md justify-center flex-1 px-4 py-2 font-sans text-sm transition-colors duration-300 rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 tw-accessibility",a.activeCategory===c?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent"]),onClick:()=>{a.$emit("update-active-category",c)}},Tt(c),11,Ya)]))),128))],512),[[Et,n.value]])]))}}),$e=t=>(Zr("data-v-cee997d8"),t=t(),Vr(),t),Qa={class:"relative"},tl={class:"flex flex-col items-start h-full gap-4 p-6"},el={class:"relative w-full space-y-2"},nl={class:"relative"},sl={class:"absolute z-1 top-3 left-3 inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-primary-500 text-white shadow-xl shadow-primary-500/20"},rl={class:"mark"},il=$e(()=>b("span",{class:"learn"},"Tips ",-1)),ol=[il],al=["data-name"],ll=["data-name","alt","src"],cl=["src"],ul={class:"relative flex items-center h-10 overflow-hidden plugin_name"},dl={"data-pagefind-meta":"title",class:"flex items-center text-lg font-medium leading-6 plugin_name font-heading text-muted-800 dark:text-white"},fl=["href"],hl={class:"-mt-2 ml-2 px-2 rounded text-muted-100 bg-green-600 text-xs"},pl={class:"-mt-2 text-orange-500 ml-2 text-lg font-serif font-bold italic"},ml=$e(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-v-35974737":"","data-icon":"mdi:temperature-celsius",class:"-mt-2 text-orange-500 iconify w-4 h-4 iconify--mdi"},[b("path",{fill:"currentColor",d:"M16.5 5c1.55 0 3 .47 4.19 1.28l-1.16 2.89A4.47 4.47 0 0 0 16.5 8C14 8 12 10 12 12.5s2 4.5 4.5 4.5c1.03 0 1.97-.34 2.73-.92l1.14 2.85A7.47 7.47 0 0 1 16.5 20A7.5 7.5 0 0 1 9 12.5A7.5 7.5 0 0 1 16.5 5M6 3a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0 2a1 1 0 0 0-1 1a1 1 0 0 0 1 1a1 1 0 0 0 1-1a1 1 0 0 0-1-1Z"})],-1)),gl={class:"flex flex-wrap items-center leading-6 text-muted-600 dark:text-muted-400"},wl=["src"],vl=["src"],_l=["href"],yl=$e(()=>b("span",{class:"text-white font-sans text-xs py-1 px-3 m-1 rounded-lg bg-yellow-500"}," 教程 ",-1)),bl=[yl],xl=["href"],kl=$e(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 32 32","data-v-5df2a037":"","data-icon":"la:readme",class:"text-green-500 block mx-auto iconify w-6 h-6 iconify--la"},[b("path",{fill:"currentColor",d:"M5 6C3.346 6 2 7.346 2 9v12c0 1.654 1.346 3 3 3l6.184-.02c.99 0 1.949.31 2.773.86L16 26.2l2.043-1.361a4.988 4.988 0 0 1 2.773-.84H27c1.654 0 3-1.346 3-3V9c0-1.654-1.346-3-3-3h-6.184c-1.386 0-2.73.408-3.882 1.176L16 7.799l-.934-.623A6.978 6.978 0 0 0 11.184 6H5zm0 2h6.184c.99 0 1.949.29 2.773.84L16 10.2l2.043-1.361A4.988 4.988 0 0 1 20.816 8H27c.552 0 1 .449 1 1v12c0 .551-.448 1-1 1h-6.184c-1.386 0-2.73.408-3.882 1.176l-.934.623l-.934-.623A6.978 6.978 0 0 0 11.184 22H5c-.552 0-1-.449-1-1V9c0-.551.448-1 1-1zm1 4v2h8v-2H6zm12 0v2h8v-2h-8zM6 16v2h8v-2H6zm12 0v2h8v-2h-8z"})],-1)),Cl=[kl],Sl={class:"plugin_desc text-base mt-auto min-h-[3rem] text-muted-600 dark:text-muted-400 leading-6"},Tl={class:"w-full mt-auto space-y-6"},Il={class:"relative flex items-center justify-start w-full"},El=["src","onerror"],Al=["href"],Pl={class:"pl-2"},Ol=["tooltip"],zl={class:"font-sans text-sm text-muted-400"},Ll={class:"block ml-auto font-sans text-sm text-muted-400"},Bl=$e(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"svg-icon lucide-download"},[b("path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}),b("polyline",{points:"7 10 12 15 17 10"}),b("line",{x1:"12",y1:"15",x2:"12",y2:"3"})],-1)),Dl=$e(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 20 20","data-v-5ade68da":"","data-icon":"dashicons:update",class:"block w-4 h-4 mx-auto iconify iconify--dashicons"},[b("path",{fill:"currentColor",d:"M10.2 3.28c3.53 0 6.43 2.61 6.92 6h2.08l-3.5 4l-3.5-4h2.32a4.439 4.439 0 0 0-4.32-3.45c-1.45 0-2.73.71-3.54 1.78L4.95 5.66a6.965 6.965 0 0 1 5.25-2.38zm-.4 13.44c-3.52 0-6.43-2.61-6.92-6H.8l3.5-4c1.17 1.33 2.33 2.67 3.5 4H5.48a4.439 4.439 0 0 0 4.32 3.45c1.45 0 2.73-.71 3.54-1.78l1.71 1.95a6.95 6.95 0 0 1-5.25 2.38z"})],-1)),$l=["tooltip"],Ul={xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Rl=["fill"],Ml=pe({__name:"PluginCard",props:{app:{},pluginInfo:{},isLogin:{type:Boolean}},emits:["download-update-plugin"],setup(t){const e=t,n=e.isLogin,s=ht(!1),i=ht(""),r=ht("rgba(255, 51, 68, 0.8)");function a(){return e.pluginInfo.authorAvatar&&e.pluginInfo.authorAvatar.length>0?e.pluginInfo.authorAvatar:d(e.pluginInfo.author)}let l=[];e.pluginInfo.tags&&e.pluginInfo.tags.length>0&&(l=e.pluginInfo.tags.split(","));function c(v){return v>=1e6?(v/1e6).toFixed(0)+"M":v>=1e3?(v/1e3).toFixed(0)+"K":v.toString()}function f(v){if(v){const _=new Date(v),k=new Date,A=24*60*60*1e3,z=Math.round(Math.abs((k.getTime()-_.getTime())/A)),O=Math.round(z/30),U=Math.round(z/365);return z<=30?`${z}天前`:O<=12?`${O}月前`:`${U}年前`}else return"未知"}const y=()=>i.value=="未启用"?"当前插件未启用，点击启用":i.value=="已启用"?"当前插件已启动，点击禁用":"未成功启用。请查看控制台错误信息。",m=async v=>{i.value=="已启用"?(await e.app.plugins.disablePluginAndSave(v),i.value="未启用",r.value="rgba(255, 51, 68, 0.8)"):await e.app.plugins.enablePluginAndSave(v)?(i.value="已启用",r.value="#2aa330"):i.value="未成功"};Array.from(app.plugins.enabledPlugins).indexOf(e.pluginInfo.id)!=-1&&e.pluginInfo.isInstalled&&(i.value="已启用",r.value="#2aa330"),Array.from(app.plugins.enabledPlugins).indexOf(e.pluginInfo.id)==-1&&e.pluginInfo.isInstalled&&(i.value="未启用",r.value="rgba(255, 51, 68, 0.8)");function w(v){return(v.match(/\b\w/g)||[]).join("").toUpperCase()}function d(v){let _="";if(v){const k=w(v);/^[a-zA-Z]+$/.test(k)?_=`https://dummyimage.com/100x100/555/fff&text=${k.toUpperCase()}`:_=`https://dummyimage.com/100x100/555/ffff&text=${encodeURIComponent(k)}`}else _="https://cdn.pkmer.cn/covers/logo.png!nomark";return _}const x=()=>`background-image:url(${`https://pkmer.cn/img/cover/${Math.floor(Math.random()*11)}.jpg`});`,h=()=>{e.app.setting.open(),e.app.setting.openTabById("pkmer")};return(v,_)=>(gt(),wt("div",Qa,[b("div",tl,[b("div",el,[b("div",nl,[b("span",sl,Tt($t(l)[0]),1),St(b("view",rl,ol,512),[[Et,v.pluginInfo.contentUrl]]),b("span",{"data-name":v.pluginInfo.banner?"":v.pluginInfo.name,class:"noimg h-40 md:h-52",style:Je(x())},[b("img",{"data-name":v.pluginInfo.name,alt:v.pluginInfo.name,class:"border-0 absolute rounded-lg w-[200px] md:w-[300px] max-h-[148px] object-contain cursor-pointer",width:"348",height:"208",src:v.pluginInfo.banner?v.pluginInfo.banner.replace("!pkmer","!nomark"):"",loading:"lazy",decoding:"async",onClick:_[0]||(_[0]=k=>s.value=!0)},null,8,ll)],12,al),s.value?(gt(),wt("div",{key:0,class:"overlay",onClick:_[2]||(_[2]=k=>s.value=!1)},[b("img",{src:v.pluginInfo.banner?.replace("!nomark","!pkmer").replace("gif!pkmer","gif"),alt:"原图",onClick:_[1]||(_[1]=Nn(()=>{},["stop"]))},null,8,cl)])):Qe("",!0)]),b("div",ul,[b("h3",dl,[b("a",{href:v.pluginInfo.contentUrl?v.pluginInfo.contentUrl:v.pluginInfo.readme_zh?v.pluginInfo.readme_zh:"#"},Tt(v.pluginInfo.name),9,fl),b("span",hl,Tt(v.pluginInfo.version),1),b("span",pl,Tt(c(v.pluginInfo.pkmerDownloadCount)),1),ml])]),b("p",gl,[b("img",{class:"h-full",alt:"GitHub stars",src:`https://img.shields.io/github/stars/${v.pluginInfo.repo}?style=plastic&color=4F46E5&label=关注量`},null,8,wl),b("img",{class:"h-full ml-2",alt:"下载数量",src:`https://img.shields.io/badge/下载总数-${c(v.pluginInfo.downloadCount)}-yellow`},null,8,vl),St(b("a",{class:"ml-2",href:v.pluginInfo.contentUrl?v.pluginInfo.contentUrl:"javascript:void(0)"},bl,8,_l),[[Et,v.pluginInfo.contentUrl]]),St(b("a",{class:"ml-2",href:v.pluginInfo.readme_zh?v.pluginInfo.readme_zh:"javascript:void(0)",tooltip:"Readme文档"},Cl,8,xl),[[Et,v.pluginInfo.readme_zh]])]),b("p",Sl,Tt(v.pluginInfo.chineseDescription?.replace("【机翻】","")||v.pluginInfo.description),1)]),b("div",Tl,[b("div",Il,[b("img",{class:"w-12 mask mask-blob",src:a(),onerror:`javascript:this.src='${d(v.pluginInfo.author)}'`,alt:"avatar"},null,8,El),b("a",{href:"https://github.com/"+v.pluginInfo.repo},[b("div",Pl,[b("h3",{class:"whitespace-nowrap text-ellipsis overflow-hidden max-w-[140px] font-heading font-medium text-muted-800 dark:text-muted-50",tooltip:v.pluginInfo.author},Tt(v.pluginInfo.author),9,Ol),b("p",zl,Tt(f(v.pluginInfo.pluginUpdatedTime)),1)])],8,Al),b("div",Ll,[St(b("button",{onClick:h,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"}," 请登录 ",512),[[Et,!$t(n)]]),St(b("div",null,[v.pluginInfo.isInstalled?v.pluginInfo.isInstalled&&v.pluginInfo.isOutdated?(gt(),wt("button",{key:1,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:_[4]||(_[4]=k=>v.$emit("download-update-plugin","update",v.pluginInfo.id,v.pluginInfo.version))},[Dl,Mt(" 更新 ")])):(gt(),wt("button",{key:2,onClick:_[5]||(_[5]=k=>m(v.pluginInfo.id)),tooltip:y(),class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"},[(gt(),wt("svg",Ul,[b("path",{fill:r.value,d:"M8 4c.367 0 .721.048 1.063.145a3.943 3.943 0 0 1 1.762 1.031a3.944 3.944 0 0 1 1.03 1.762c.097.34.145.695.145 1.062c0 .367-.048.721-.145 1.063a3.94 3.94 0 0 1-1.03 1.765a4.017 4.017 0 0 1-1.762 1.031C8.72 11.953 8.367 12 8 12s-.721-.047-1.063-.14a4.056 4.056 0 0 1-1.765-1.032A4.055 4.055 0 0 1 4.14 9.062A3.992 3.992 0 0 1 4 8c0-.367.047-.721.14-1.063a4.02 4.02 0 0 1 .407-.953A4.089 4.089 0 0 1 5.98 4.546a3.94 3.94 0 0 1 .957-.401A3.89 3.89 0 0 1 8 4z"},null,8,Rl)])),Mt(" 已安装 ")],8,$l)):St((gt(),wt("button",{key:0,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:_[3]||(_[3]=k=>v.$emit("download-update-plugin","download",v.pluginInfo.id,v.pluginInfo.version))},[Bl,Mt(" 下载 ")],512)),[[Et,$t(n)]])],512),[[Et,$t(n)]])])])])])]))}});const mi=(t,e)=>{const n=t.__vccOpts||t;for(const[s,i]of e)n[s]=i;return n},Fl=mi(Ml,[["__scopeId","data-v-cee997d8"]]),ie="https://api.pkmer.cn/api/v1/download/obsidian";class Ce{token;constructor(e){this.token=e}fetchWithToken(e,n){return fetch(e,{...n,headers:{Authorization:"Bearer "+this.token}})}isTokenExpired(e){return Math.floor(Date.now()/1e3)>e.exp}async isUserLogin(){const e=this.token;if(e){const n=e.split("."),s=JSON.parse(decodeURIComponent(escape(window.atob(n[1].replace(/-/g,"+").replace(/_/g,"/")))));return this.isTokenExpired(s)?(console.log("Pkmer Token has expired. Please log in again to get a new token."),!1):!0}else return!1}async getPkmerDocs(){const e=await lt.requestUrl("https://pkmer.cn/getPost.json");return JSON.parse(e.text).map(s=>({slug:s.slug.split("/").pop(),uid:s.uid}))}async getDownloadUrl(e,n){return e=="obsidian-pkmer"?`https://pkmer.cn/_release/obsidian-pkmer.zip?v=${n}`:await(await this.fetchWithToken(ie+"/getPluginDownloadUrl/"+e+"/"+n,{method:"GET"})).text()}async getDownloadCount(){const e=await this.fetchWithToken(ie+"/getPluginDownloadCount");return parseInt(await e.text())+1}async getTop20Plugins(){const e=localStorage.getItem("top20Plugins"),n=localStorage.getItem("top20PluginsExpiry"),s=new Date().getTime();if(e&&n&&s<+n)return JSON.parse(e);{const r=await(await this.fetchWithToken(ie+"/getTop20Plugins")).json();return localStorage.setItem("top20Plugins",JSON.stringify(r)),localStorage.setItem("top20PluginsExpiry",String(s+8*60*60*1e3)),r}}async searchPlugins(e){return await(await this.fetchWithToken(ie+"/searchPlugins?keyword="+e+"&limit=10",{method:"GET"})).json()}async getPluginList(e=1*60*60*1e3){const n=localStorage.getItem("pluginList"),s=localStorage.getItem("pluginListExpiry"),i=new Date().getTime();if(n&&s){const r=parseInt(s);if(i<r)return JSON.parse(n)}try{const a=await(await this.fetchWithToken(ie+"/getAllPlugins",{method:"GET"})).json();return localStorage.setItem("pluginList",JSON.stringify(a)),localStorage.setItem("pluginListExpiry",String(i+e)),a}catch(r){throw console.error("Error fetching plugin list:",r),r}}async getTop20Themes(){const e=localStorage.getItem("top20Themes"),n=localStorage.getItem("top20ThemesExpiry"),s=new Date().getTime();if(e&&n&&s<+n)return JSON.parse(e);{const r=await(await this.fetchWithToken(ie+"/getTop20Themes")).json();return localStorage.setItem("top20Themes",JSON.stringify(r)),localStorage.setItem("top20ThemesExpiry",String(s+8*60*60*1e3)),r}}async getThemeList(e=1*60*60*1e3){const n=localStorage.getItem("themeList"),s=localStorage.getItem("themeListExpiry"),i=new Date().getTime();if(n&&s&&i<+s)return JSON.parse(n);try{const a=await(await this.fetchWithToken(ie+"/getAllThemes",{method:"GET"})).json();return localStorage.setItem("themeList",JSON.stringify(a)),localStorage.setItem("themeListExpiry",String(i+e)),a}catch(r){throw console.error("Error fetching theme list:",r),r}}async getThemeDownloadUrl(e,n){return await(await this.fetchWithToken(ie+"/getThemeDownloadUrl/"+e+"/"+n,{method:"GET"})).text()}async getPkmerVersion(){const e=Math.random(),n=await lt.requestUrl(`https://pkmer.cn/_release/manifest.json?_=${e}`);return JSON.parse(n.text).version}}var cn=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function un(t){throw new Error('Could not dynamically require "'+t+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var gi={exports:{}};/*!

JSZip v3.10.1 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/main/LICENSE
*/(function(t,e){(function(n){t.exports=n()})(function(){return function n(s,i,r){function a(f,y){if(!i[f]){if(!s[f]){var m=typeof un=="function"&&un;if(!y&&m)return m(f,!0);if(l)return l(f,!0);var w=new Error("Cannot find module '"+f+"'");throw w.code="MODULE_NOT_FOUND",w}var d=i[f]={exports:{}};s[f][0].call(d.exports,function(x){var h=s[f][1][x];return a(h||x)},d,d.exports,n,s,i,r)}return i[f].exports}for(var l=typeof un=="function"&&un,c=0;c<r.length;c++)a(r[c]);return a}({1:[function(n,s,i){var r=n("./utils"),a=n("./support"),l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";i.encode=function(c){for(var f,y,m,w,d,x,h,v=[],_=0,k=c.length,A=k,z=r.getTypeOf(c)!=="string";_<c.length;)A=k-_,m=z?(f=c[_++],y=_<k?c[_++]:0,_<k?c[_++]:0):(f=c.charCodeAt(_++),y=_<k?c.charCodeAt(_++):0,_<k?c.charCodeAt(_++):0),w=f>>2,d=(3&f)<<4|y>>4,x=1<A?(15&y)<<2|m>>6:64,h=2<A?63&m:64,v.push(l.charAt(w)+l.charAt(d)+l.charAt(x)+l.charAt(h));return v.join("")},i.decode=function(c){var f,y,m,w,d,x,h=0,v=0,_="data:";if(c.substr(0,_.length)===_)throw new Error("Invalid base64 input, it looks like a data url.");var k,A=3*(c=c.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(c.charAt(c.length-1)===l.charAt(64)&&A--,c.charAt(c.length-2)===l.charAt(64)&&A--,A%1!=0)throw new Error("Invalid base64 input, bad content length.");for(k=a.uint8array?new Uint8Array(0|A):new Array(0|A);h<c.length;)f=l.indexOf(c.charAt(h++))<<2|(w=l.indexOf(c.charAt(h++)))>>4,y=(15&w)<<4|(d=l.indexOf(c.charAt(h++)))>>2,m=(3&d)<<6|(x=l.indexOf(c.charAt(h++))),k[v++]=f,d!==64&&(k[v++]=y),x!==64&&(k[v++]=m);return k}},{"./support":30,"./utils":32}],2:[function(n,s,i){var r=n("./external"),a=n("./stream/DataWorker"),l=n("./stream/Crc32Probe"),c=n("./stream/DataLengthProbe");function f(y,m,w,d,x){this.compressedSize=y,this.uncompressedSize=m,this.crc32=w,this.compression=d,this.compressedContent=x}f.prototype={getContentWorker:function(){var y=new a(r.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new c("data_length")),m=this;return y.on("end",function(){if(this.streamInfo.data_length!==m.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),y},getCompressedWorker:function(){return new a(r.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},f.createWorkerFrom=function(y,m,w){return y.pipe(new l).pipe(new c("uncompressedSize")).pipe(m.compressWorker(w)).pipe(new c("compressedSize")).withStreamInfo("compression",m)},s.exports=f},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(n,s,i){var r=n("./stream/GenericWorker");i.STORE={magic:"\0\0",compressWorker:function(){return new r("STORE compression")},uncompressWorker:function(){return new r("STORE decompression")}},i.DEFLATE=n("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(n,s,i){var r=n("./utils"),a=function(){for(var l,c=[],f=0;f<256;f++){l=f;for(var y=0;y<8;y++)l=1&l?3988292384^l>>>1:l>>>1;c[f]=l}return c}();s.exports=function(l,c){return l!==void 0&&l.length?r.getTypeOf(l)!=="string"?function(f,y,m,w){var d=a,x=w+m;f^=-1;for(var h=w;h<x;h++)f=f>>>8^d[255&(f^y[h])];return-1^f}(0|c,l,l.length,0):function(f,y,m,w){var d=a,x=w+m;f^=-1;for(var h=w;h<x;h++)f=f>>>8^d[255&(f^y.charCodeAt(h))];return-1^f}(0|c,l,l.length,0):0}},{"./utils":32}],5:[function(n,s,i){i.base64=!1,i.binary=!1,i.dir=!1,i.createFolders=!0,i.date=null,i.compression=null,i.compressionOptions=null,i.comment=null,i.unixPermissions=null,i.dosPermissions=null},{}],6:[function(n,s,i){var r=null;r=typeof Promise<"u"?Promise:n("lie"),s.exports={Promise:r}},{lie:37}],7:[function(n,s,i){var r=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Uint32Array<"u",a=n("pako"),l=n("./utils"),c=n("./stream/GenericWorker"),f=r?"uint8array":"array";function y(m,w){c.call(this,"FlateWorker/"+m),this._pako=null,this._pakoAction=m,this._pakoOptions=w,this.meta={}}i.magic="\b\0",l.inherits(y,c),y.prototype.processChunk=function(m){this.meta=m.meta,this._pako===null&&this._createPako(),this._pako.push(l.transformTo(f,m.data),!1)},y.prototype.flush=function(){c.prototype.flush.call(this),this._pako===null&&this._createPako(),this._pako.push([],!0)},y.prototype.cleanUp=function(){c.prototype.cleanUp.call(this),this._pako=null},y.prototype._createPako=function(){this._pako=new a[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var m=this;this._pako.onData=function(w){m.push({data:w,meta:m.meta})}},i.compressWorker=function(m){return new y("Deflate",m)},i.uncompressWorker=function(){return new y("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(n,s,i){function r(d,x){var h,v="";for(h=0;h<x;h++)v+=String.fromCharCode(255&d),d>>>=8;return v}function a(d,x,h,v,_,k){var A,z,O=d.file,U=d.compression,H=k!==f.utf8encode,G=l.transformTo("string",k(O.name)),j=l.transformTo("string",f.utf8encode(O.name)),q=O.comment,it=l.transformTo("string",k(q)),P=l.transformTo("string",f.utf8encode(q)),Z=j.length!==O.name.length,u=P.length!==q.length,V="",st="",F="",rt=O.dir,J=O.date,tt={crc32:0,compressedSize:0,uncompressedSize:0};x&&!h||(tt.crc32=d.crc32,tt.compressedSize=d.compressedSize,tt.uncompressedSize=d.uncompressedSize);var N=0;x&&(N|=8),H||!Z&&!u||(N|=2048);var R=0,ct=0;rt&&(R|=16),_==="UNIX"?(ct=798,R|=function(Q,pt){var yt=Q;return Q||(yt=pt?16893:33204),(65535&yt)<<16}(O.unixPermissions,rt)):(ct=20,R|=function(Q){return 63&(Q||0)}(O.dosPermissions)),A=J.getUTCHours(),A<<=6,A|=J.getUTCMinutes(),A<<=5,A|=J.getUTCSeconds()/2,z=J.getUTCFullYear()-1980,z<<=4,z|=J.getUTCMonth()+1,z<<=5,z|=J.getUTCDate(),Z&&(st=r(1,1)+r(y(G),4)+j,V+="up"+r(st.length,2)+st),u&&(F=r(1,1)+r(y(it),4)+P,V+="uc"+r(F.length,2)+F);var et="";return et+=`
\0`,et+=r(N,2),et+=U.magic,et+=r(A,2),et+=r(z,2),et+=r(tt.crc32,4),et+=r(tt.compressedSize,4),et+=r(tt.uncompressedSize,4),et+=r(G.length,2),et+=r(V.length,2),{fileRecord:m.LOCAL_FILE_HEADER+et+G+V,dirRecord:m.CENTRAL_FILE_HEADER+r(ct,2)+et+r(it.length,2)+"\0\0\0\0"+r(R,4)+r(v,4)+G+V+it}}var l=n("../utils"),c=n("../stream/GenericWorker"),f=n("../utf8"),y=n("../crc32"),m=n("../signature");function w(d,x,h,v){c.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=x,this.zipPlatform=h,this.encodeFileName=v,this.streamFiles=d,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}l.inherits(w,c),w.prototype.push=function(d){var x=d.meta.percent||0,h=this.entriesCount,v=this._sources.length;this.accumulate?this.contentBuffer.push(d):(this.bytesWritten+=d.data.length,c.prototype.push.call(this,{data:d.data,meta:{currentFile:this.currentFile,percent:h?(x+100*(h-v-1))/h:100}}))},w.prototype.openedSource=function(d){this.currentSourceOffset=this.bytesWritten,this.currentFile=d.file.name;var x=this.streamFiles&&!d.file.dir;if(x){var h=a(d,x,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:h.fileRecord,meta:{percent:0}})}else this.accumulate=!0},w.prototype.closedSource=function(d){this.accumulate=!1;var x=this.streamFiles&&!d.file.dir,h=a(d,x,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(h.dirRecord),x)this.push({data:function(v){return m.DATA_DESCRIPTOR+r(v.crc32,4)+r(v.compressedSize,4)+r(v.uncompressedSize,4)}(d),meta:{percent:100}});else for(this.push({data:h.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},w.prototype.flush=function(){for(var d=this.bytesWritten,x=0;x<this.dirRecords.length;x++)this.push({data:this.dirRecords[x],meta:{percent:100}});var h=this.bytesWritten-d,v=function(_,k,A,z,O){var U=l.transformTo("string",O(z));return m.CENTRAL_DIRECTORY_END+"\0\0\0\0"+r(_,2)+r(_,2)+r(k,4)+r(A,4)+r(U.length,2)+U}(this.dirRecords.length,h,d,this.zipComment,this.encodeFileName);this.push({data:v,meta:{percent:100}})},w.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},w.prototype.registerPrevious=function(d){this._sources.push(d);var x=this;return d.on("data",function(h){x.processChunk(h)}),d.on("end",function(){x.closedSource(x.previous.streamInfo),x._sources.length?x.prepareNextSource():x.end()}),d.on("error",function(h){x.error(h)}),this},w.prototype.resume=function(){return!!c.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},w.prototype.error=function(d){var x=this._sources;if(!c.prototype.error.call(this,d))return!1;for(var h=0;h<x.length;h++)try{x[h].error(d)}catch{}return!0},w.prototype.lock=function(){c.prototype.lock.call(this);for(var d=this._sources,x=0;x<d.length;x++)d[x].lock()},s.exports=w},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(n,s,i){var r=n("../compressions"),a=n("./ZipFileWorker");i.generateWorker=function(l,c,f){var y=new a(c.streamFiles,f,c.platform,c.encodeFileName),m=0;try{l.forEach(function(w,d){m++;var x=function(k,A){var z=k||A,O=r[z];if(!O)throw new Error(z+" is not a valid compression method !");return O}(d.options.compression,c.compression),h=d.options.compressionOptions||c.compressionOptions||{},v=d.dir,_=d.date;d._compressWorker(x,h).withStreamInfo("file",{name:w,dir:v,date:_,comment:d.comment||"",unixPermissions:d.unixPermissions,dosPermissions:d.dosPermissions}).pipe(y)}),y.entriesCount=m}catch(w){y.error(w)}return y}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(n,s,i){function r(){if(!(this instanceof r))return new r;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var a=new r;for(var l in this)typeof this[l]!="function"&&(a[l]=this[l]);return a}}(r.prototype=n("./object")).loadAsync=n("./load"),r.support=n("./support"),r.defaults=n("./defaults"),r.version="3.10.1",r.loadAsync=function(a,l){return new r().loadAsync(a,l)},r.external=n("./external"),s.exports=r},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(n,s,i){var r=n("./utils"),a=n("./external"),l=n("./utf8"),c=n("./zipEntries"),f=n("./stream/Crc32Probe"),y=n("./nodejsUtils");function m(w){return new a.Promise(function(d,x){var h=w.decompressed.getContentWorker().pipe(new f);h.on("error",function(v){x(v)}).on("end",function(){h.streamInfo.crc32!==w.decompressed.crc32?x(new Error("Corrupted zip : CRC32 mismatch")):d()}).resume()})}s.exports=function(w,d){var x=this;return d=r.extend(d||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:l.utf8decode}),y.isNode&&y.isStream(w)?a.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):r.prepareContent("the loaded zip file",w,!0,d.optimizedBinaryString,d.base64).then(function(h){var v=new c(d);return v.load(h),v}).then(function(h){var v=[a.Promise.resolve(h)],_=h.files;if(d.checkCRC32)for(var k=0;k<_.length;k++)v.push(m(_[k]));return a.Promise.all(v)}).then(function(h){for(var v=h.shift(),_=v.files,k=0;k<_.length;k++){var A=_[k],z=A.fileNameStr,O=r.resolve(A.fileNameStr);x.file(O,A.decompressed,{binary:!0,optimizedBinaryString:!0,date:A.date,dir:A.dir,comment:A.fileCommentStr.length?A.fileCommentStr:null,unixPermissions:A.unixPermissions,dosPermissions:A.dosPermissions,createFolders:d.createFolders}),A.dir||(x.file(O).unsafeOriginalName=z)}return v.zipComment.length&&(x.comment=v.zipComment),x})}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(n,s,i){var r=n("../utils"),a=n("../stream/GenericWorker");function l(c,f){a.call(this,"Nodejs stream input adapter for "+c),this._upstreamEnded=!1,this._bindStream(f)}r.inherits(l,a),l.prototype._bindStream=function(c){var f=this;(this._stream=c).pause(),c.on("data",function(y){f.push({data:y,meta:{percent:0}})}).on("error",function(y){f.isPaused?this.generatedError=y:f.error(y)}).on("end",function(){f.isPaused?f._upstreamEnded=!0:f.end()})},l.prototype.pause=function(){return!!a.prototype.pause.call(this)&&(this._stream.pause(),!0)},l.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},s.exports=l},{"../stream/GenericWorker":28,"../utils":32}],13:[function(n,s,i){var r=n("readable-stream").Readable;function a(l,c,f){r.call(this,c),this._helper=l;var y=this;l.on("data",function(m,w){y.push(m)||y._helper.pause(),f&&f(w)}).on("error",function(m){y.emit("error",m)}).on("end",function(){y.push(null)})}n("../utils").inherits(a,r),a.prototype._read=function(){this._helper.resume()},s.exports=a},{"../utils":32,"readable-stream":16}],14:[function(n,s,i){s.exports={isNode:typeof Buffer<"u",newBufferFrom:function(r,a){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(r,a);if(typeof r=="number")throw new Error('The "data" argument must not be a number');return new Buffer(r,a)},allocBuffer:function(r){if(Buffer.alloc)return Buffer.alloc(r);var a=new Buffer(r);return a.fill(0),a},isBuffer:function(r){return Buffer.isBuffer(r)},isStream:function(r){return r&&typeof r.on=="function"&&typeof r.pause=="function"&&typeof r.resume=="function"}}},{}],15:[function(n,s,i){function r(O,U,H){var G,j=l.getTypeOf(U),q=l.extend(H||{},y);q.date=q.date||new Date,q.compression!==null&&(q.compression=q.compression.toUpperCase()),typeof q.unixPermissions=="string"&&(q.unixPermissions=parseInt(q.unixPermissions,8)),q.unixPermissions&&16384&q.unixPermissions&&(q.dir=!0),q.dosPermissions&&16&q.dosPermissions&&(q.dir=!0),q.dir&&(O=_(O)),q.createFolders&&(G=v(O))&&k.call(this,G,!0);var it=j==="string"&&q.binary===!1&&q.base64===!1;H&&H.binary!==void 0||(q.binary=!it),(U instanceof m&&U.uncompressedSize===0||q.dir||!U||U.length===0)&&(q.base64=!1,q.binary=!0,U="",q.compression="STORE",j="string");var P=null;P=U instanceof m||U instanceof c?U:x.isNode&&x.isStream(U)?new h(O,U):l.prepareContent(O,U,q.binary,q.optimizedBinaryString,q.base64);var Z=new w(O,P,q);this.files[O]=Z}var a=n("./utf8"),l=n("./utils"),c=n("./stream/GenericWorker"),f=n("./stream/StreamHelper"),y=n("./defaults"),m=n("./compressedObject"),w=n("./zipObject"),d=n("./generate"),x=n("./nodejsUtils"),h=n("./nodejs/NodejsStreamInputAdapter"),v=function(O){O.slice(-1)==="/"&&(O=O.substring(0,O.length-1));var U=O.lastIndexOf("/");return 0<U?O.substring(0,U):""},_=function(O){return O.slice(-1)!=="/"&&(O+="/"),O},k=function(O,U){return U=U!==void 0?U:y.createFolders,O=_(O),this.files[O]||r.call(this,O,null,{dir:!0,createFolders:U}),this.files[O]};function A(O){return Object.prototype.toString.call(O)==="[object RegExp]"}var z={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(O){var U,H,G;for(U in this.files)G=this.files[U],(H=U.slice(this.root.length,U.length))&&U.slice(0,this.root.length)===this.root&&O(H,G)},filter:function(O){var U=[];return this.forEach(function(H,G){O(H,G)&&U.push(G)}),U},file:function(O,U,H){if(arguments.length!==1)return O=this.root+O,r.call(this,O,U,H),this;if(A(O)){var G=O;return this.filter(function(q,it){return!it.dir&&G.test(q)})}var j=this.files[this.root+O];return j&&!j.dir?j:null},folder:function(O){if(!O)return this;if(A(O))return this.filter(function(j,q){return q.dir&&O.test(j)});var U=this.root+O,H=k.call(this,U),G=this.clone();return G.root=H.name,G},remove:function(O){O=this.root+O;var U=this.files[O];if(U||(O.slice(-1)!=="/"&&(O+="/"),U=this.files[O]),U&&!U.dir)delete this.files[O];else for(var H=this.filter(function(j,q){return q.name.slice(0,O.length)===O}),G=0;G<H.length;G++)delete this.files[H[G].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(O){var U,H={};try{if((H=l.extend(O||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:a.utf8encode})).type=H.type.toLowerCase(),H.compression=H.compression.toUpperCase(),H.type==="binarystring"&&(H.type="string"),!H.type)throw new Error("No output type specified.");l.checkSupport(H.type),H.platform!=="darwin"&&H.platform!=="freebsd"&&H.platform!=="linux"&&H.platform!=="sunos"||(H.platform="UNIX"),H.platform==="win32"&&(H.platform="DOS");var G=H.comment||this.comment||"";U=d.generateWorker(this,H,G)}catch(j){(U=new c("error")).error(j)}return new f(U,H.type||"string",H.mimeType)},generateAsync:function(O,U){return this.generateInternalStream(O).accumulate(U)},generateNodeStream:function(O,U){return(O=O||{}).type||(O.type="nodebuffer"),this.generateInternalStream(O).toNodejsStream(U)}};s.exports=z},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(n,s,i){s.exports=n("stream")},{stream:void 0}],17:[function(n,s,i){var r=n("./DataReader");function a(l){r.call(this,l);for(var c=0;c<this.data.length;c++)l[c]=255&l[c]}n("../utils").inherits(a,r),a.prototype.byteAt=function(l){return this.data[this.zero+l]},a.prototype.lastIndexOfSignature=function(l){for(var c=l.charCodeAt(0),f=l.charCodeAt(1),y=l.charCodeAt(2),m=l.charCodeAt(3),w=this.length-4;0<=w;--w)if(this.data[w]===c&&this.data[w+1]===f&&this.data[w+2]===y&&this.data[w+3]===m)return w-this.zero;return-1},a.prototype.readAndCheckSignature=function(l){var c=l.charCodeAt(0),f=l.charCodeAt(1),y=l.charCodeAt(2),m=l.charCodeAt(3),w=this.readData(4);return c===w[0]&&f===w[1]&&y===w[2]&&m===w[3]},a.prototype.readData=function(l){if(this.checkOffset(l),l===0)return[];var c=this.data.slice(this.zero+this.index,this.zero+this.index+l);return this.index+=l,c},s.exports=a},{"../utils":32,"./DataReader":18}],18:[function(n,s,i){var r=n("../utils");function a(l){this.data=l,this.length=l.length,this.index=0,this.zero=0}a.prototype={checkOffset:function(l){this.checkIndex(this.index+l)},checkIndex:function(l){if(this.length<this.zero+l||l<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+l+"). Corrupted zip ?")},setIndex:function(l){this.checkIndex(l),this.index=l},skip:function(l){this.setIndex(this.index+l)},byteAt:function(){},readInt:function(l){var c,f=0;for(this.checkOffset(l),c=this.index+l-1;c>=this.index;c--)f=(f<<8)+this.byteAt(c);return this.index+=l,f},readString:function(l){return r.transformTo("string",this.readData(l))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var l=this.readInt(4);return new Date(Date.UTC(1980+(l>>25&127),(l>>21&15)-1,l>>16&31,l>>11&31,l>>5&63,(31&l)<<1))}},s.exports=a},{"../utils":32}],19:[function(n,s,i){var r=n("./Uint8ArrayReader");function a(l){r.call(this,l)}n("../utils").inherits(a,r),a.prototype.readData=function(l){this.checkOffset(l);var c=this.data.slice(this.zero+this.index,this.zero+this.index+l);return this.index+=l,c},s.exports=a},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(n,s,i){var r=n("./DataReader");function a(l){r.call(this,l)}n("../utils").inherits(a,r),a.prototype.byteAt=function(l){return this.data.charCodeAt(this.zero+l)},a.prototype.lastIndexOfSignature=function(l){return this.data.lastIndexOf(l)-this.zero},a.prototype.readAndCheckSignature=function(l){return l===this.readData(4)},a.prototype.readData=function(l){this.checkOffset(l);var c=this.data.slice(this.zero+this.index,this.zero+this.index+l);return this.index+=l,c},s.exports=a},{"../utils":32,"./DataReader":18}],21:[function(n,s,i){var r=n("./ArrayReader");function a(l){r.call(this,l)}n("../utils").inherits(a,r),a.prototype.readData=function(l){if(this.checkOffset(l),l===0)return new Uint8Array(0);var c=this.data.subarray(this.zero+this.index,this.zero+this.index+l);return this.index+=l,c},s.exports=a},{"../utils":32,"./ArrayReader":17}],22:[function(n,s,i){var r=n("../utils"),a=n("../support"),l=n("./ArrayReader"),c=n("./StringReader"),f=n("./NodeBufferReader"),y=n("./Uint8ArrayReader");s.exports=function(m){var w=r.getTypeOf(m);return r.checkSupport(w),w!=="string"||a.uint8array?w==="nodebuffer"?new f(m):a.uint8array?new y(r.transformTo("uint8array",m)):new l(r.transformTo("array",m)):new c(m)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(n,s,i){i.LOCAL_FILE_HEADER="PK",i.CENTRAL_FILE_HEADER="PK",i.CENTRAL_DIRECTORY_END="PK",i.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK\x07",i.ZIP64_CENTRAL_DIRECTORY_END="PK",i.DATA_DESCRIPTOR="PK\x07\b"},{}],24:[function(n,s,i){var r=n("./GenericWorker"),a=n("../utils");function l(c){r.call(this,"ConvertWorker to "+c),this.destType=c}a.inherits(l,r),l.prototype.processChunk=function(c){this.push({data:a.transformTo(this.destType,c.data),meta:c.meta})},s.exports=l},{"../utils":32,"./GenericWorker":28}],25:[function(n,s,i){var r=n("./GenericWorker"),a=n("../crc32");function l(){r.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}n("../utils").inherits(l,r),l.prototype.processChunk=function(c){this.streamInfo.crc32=a(c.data,this.streamInfo.crc32||0),this.push(c)},s.exports=l},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(n,s,i){var r=n("../utils"),a=n("./GenericWorker");function l(c){a.call(this,"DataLengthProbe for "+c),this.propName=c,this.withStreamInfo(c,0)}r.inherits(l,a),l.prototype.processChunk=function(c){if(c){var f=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=f+c.data.length}a.prototype.processChunk.call(this,c)},s.exports=l},{"../utils":32,"./GenericWorker":28}],27:[function(n,s,i){var r=n("../utils"),a=n("./GenericWorker");function l(c){a.call(this,"DataWorker");var f=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,c.then(function(y){f.dataIsReady=!0,f.data=y,f.max=y&&y.length||0,f.type=r.getTypeOf(y),f.isPaused||f._tickAndRepeat()},function(y){f.error(y)})}r.inherits(l,a),l.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this.data=null},l.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,r.delay(this._tickAndRepeat,[],this)),!0)},l.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(r.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},l.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var c=null,f=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":c=this.data.substring(this.index,f);break;case"uint8array":c=this.data.subarray(this.index,f);break;case"array":case"nodebuffer":c=this.data.slice(this.index,f)}return this.index=f,this.push({data:c,meta:{percent:this.max?this.index/this.max*100:0}})},s.exports=l},{"../utils":32,"./GenericWorker":28}],28:[function(n,s,i){function r(a){this.name=a||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}r.prototype={push:function(a){this.emit("data",a)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(a){this.emit("error",a)}return!0},error:function(a){return!this.isFinished&&(this.isPaused?this.generatedError=a:(this.isFinished=!0,this.emit("error",a),this.previous&&this.previous.error(a),this.cleanUp()),!0)},on:function(a,l){return this._listeners[a].push(l),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(a,l){if(this._listeners[a])for(var c=0;c<this._listeners[a].length;c++)this._listeners[a][c].call(this,l)},pipe:function(a){return a.registerPrevious(this)},registerPrevious:function(a){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=a.streamInfo,this.mergeStreamInfo(),this.previous=a;var l=this;return a.on("data",function(c){l.processChunk(c)}),a.on("end",function(){l.end()}),a.on("error",function(c){l.error(c)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var a=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),a=!0),this.previous&&this.previous.resume(),!a},flush:function(){},processChunk:function(a){this.push(a)},withStreamInfo:function(a,l){return this.extraStreamInfo[a]=l,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var a in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,a)&&(this.streamInfo[a]=this.extraStreamInfo[a])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var a="Worker "+this.name;return this.previous?this.previous+" -> "+a:a}},s.exports=r},{}],29:[function(n,s,i){var r=n("../utils"),a=n("./ConvertWorker"),l=n("./GenericWorker"),c=n("../base64"),f=n("../support"),y=n("../external"),m=null;if(f.nodestream)try{m=n("../nodejs/NodejsStreamOutputAdapter")}catch{}function w(x,h){return new y.Promise(function(v,_){var k=[],A=x._internalType,z=x._outputType,O=x._mimeType;x.on("data",function(U,H){k.push(U),h&&h(H)}).on("error",function(U){k=[],_(U)}).on("end",function(){try{var U=function(H,G,j){switch(H){case"blob":return r.newBlob(r.transformTo("arraybuffer",G),j);case"base64":return c.encode(G);default:return r.transformTo(H,G)}}(z,function(H,G){var j,q=0,it=null,P=0;for(j=0;j<G.length;j++)P+=G[j].length;switch(H){case"string":return G.join("");case"array":return Array.prototype.concat.apply([],G);case"uint8array":for(it=new Uint8Array(P),j=0;j<G.length;j++)it.set(G[j],q),q+=G[j].length;return it;case"nodebuffer":return Buffer.concat(G);default:throw new Error("concat : unsupported type '"+H+"'")}}(A,k),O);v(U)}catch(H){_(H)}k=[]}).resume()})}function d(x,h,v){var _=h;switch(h){case"blob":case"arraybuffer":_="uint8array";break;case"base64":_="string"}try{this._internalType=_,this._outputType=h,this._mimeType=v,r.checkSupport(_),this._worker=x.pipe(new a(_)),x.lock()}catch(k){this._worker=new l("error"),this._worker.error(k)}}d.prototype={accumulate:function(x){return w(this,x)},on:function(x,h){var v=this;return x==="data"?this._worker.on(x,function(_){h.call(v,_.data,_.meta)}):this._worker.on(x,function(){r.delay(h,arguments,v)}),this},resume:function(){return r.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(x){if(r.checkSupport("nodestream"),this._outputType!=="nodebuffer")throw new Error(this._outputType+" is not supported by this method");return new m(this,{objectMode:this._outputType!=="nodebuffer"},x)}},s.exports=d},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(n,s,i){if(i.base64=!0,i.array=!0,i.string=!0,i.arraybuffer=typeof ArrayBuffer<"u"&&typeof Uint8Array<"u",i.nodebuffer=typeof Buffer<"u",i.uint8array=typeof Uint8Array<"u",typeof ArrayBuffer>"u")i.blob=!1;else{var r=new ArrayBuffer(0);try{i.blob=new Blob([r],{type:"application/zip"}).size===0}catch{try{var a=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);a.append(r),i.blob=a.getBlob("application/zip").size===0}catch{i.blob=!1}}}try{i.nodestream=!!n("readable-stream").Readable}catch{i.nodestream=!1}},{"readable-stream":16}],31:[function(n,s,i){for(var r=n("./utils"),a=n("./support"),l=n("./nodejsUtils"),c=n("./stream/GenericWorker"),f=new Array(256),y=0;y<256;y++)f[y]=252<=y?6:248<=y?5:240<=y?4:224<=y?3:192<=y?2:1;f[254]=f[254]=1;function m(){c.call(this,"utf-8 decode"),this.leftOver=null}function w(){c.call(this,"utf-8 encode")}i.utf8encode=function(d){return a.nodebuffer?l.newBufferFrom(d,"utf-8"):function(x){var h,v,_,k,A,z=x.length,O=0;for(k=0;k<z;k++)(64512&(v=x.charCodeAt(k)))==55296&&k+1<z&&(64512&(_=x.charCodeAt(k+1)))==56320&&(v=65536+(v-55296<<10)+(_-56320),k++),O+=v<128?1:v<2048?2:v<65536?3:4;for(h=a.uint8array?new Uint8Array(O):new Array(O),k=A=0;A<O;k++)(64512&(v=x.charCodeAt(k)))==55296&&k+1<z&&(64512&(_=x.charCodeAt(k+1)))==56320&&(v=65536+(v-55296<<10)+(_-56320),k++),v<128?h[A++]=v:(v<2048?h[A++]=192|v>>>6:(v<65536?h[A++]=224|v>>>12:(h[A++]=240|v>>>18,h[A++]=128|v>>>12&63),h[A++]=128|v>>>6&63),h[A++]=128|63&v);return h}(d)},i.utf8decode=function(d){return a.nodebuffer?r.transformTo("nodebuffer",d).toString("utf-8"):function(x){var h,v,_,k,A=x.length,z=new Array(2*A);for(h=v=0;h<A;)if((_=x[h++])<128)z[v++]=_;else if(4<(k=f[_]))z[v++]=65533,h+=k-1;else{for(_&=k===2?31:k===3?15:7;1<k&&h<A;)_=_<<6|63&x[h++],k--;1<k?z[v++]=65533:_<65536?z[v++]=_:(_-=65536,z[v++]=55296|_>>10&1023,z[v++]=56320|1023&_)}return z.length!==v&&(z.subarray?z=z.subarray(0,v):z.length=v),r.applyFromCharCode(z)}(d=r.transformTo(a.uint8array?"uint8array":"array",d))},r.inherits(m,c),m.prototype.processChunk=function(d){var x=r.transformTo(a.uint8array?"uint8array":"array",d.data);if(this.leftOver&&this.leftOver.length){if(a.uint8array){var h=x;(x=new Uint8Array(h.length+this.leftOver.length)).set(this.leftOver,0),x.set(h,this.leftOver.length)}else x=this.leftOver.concat(x);this.leftOver=null}var v=function(k,A){var z;for((A=A||k.length)>k.length&&(A=k.length),z=A-1;0<=z&&(192&k[z])==128;)z--;return z<0||z===0?A:z+f[k[z]]>A?z:A}(x),_=x;v!==x.length&&(a.uint8array?(_=x.subarray(0,v),this.leftOver=x.subarray(v,x.length)):(_=x.slice(0,v),this.leftOver=x.slice(v,x.length))),this.push({data:i.utf8decode(_),meta:d.meta})},m.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:i.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},i.Utf8DecodeWorker=m,r.inherits(w,c),w.prototype.processChunk=function(d){this.push({data:i.utf8encode(d.data),meta:d.meta})},i.Utf8EncodeWorker=w},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(n,s,i){var r=n("./support"),a=n("./base64"),l=n("./nodejsUtils"),c=n("./external");function f(h){return h}function y(h,v){for(var _=0;_<h.length;++_)v[_]=255&h.charCodeAt(_);return v}n("setimmediate"),i.newBlob=function(h,v){i.checkSupport("blob");try{return new Blob([h],{type:v})}catch{try{var _=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return _.append(h),_.getBlob(v)}catch{throw new Error("Bug : can't construct the Blob.")}}};var m={stringifyByChunk:function(h,v,_){var k=[],A=0,z=h.length;if(z<=_)return String.fromCharCode.apply(null,h);for(;A<z;)v==="array"||v==="nodebuffer"?k.push(String.fromCharCode.apply(null,h.slice(A,Math.min(A+_,z)))):k.push(String.fromCharCode.apply(null,h.subarray(A,Math.min(A+_,z)))),A+=_;return k.join("")},stringifyByChar:function(h){for(var v="",_=0;_<h.length;_++)v+=String.fromCharCode(h[_]);return v},applyCanBeUsed:{uint8array:function(){try{return r.uint8array&&String.fromCharCode.apply(null,new Uint8Array(1)).length===1}catch{return!1}}(),nodebuffer:function(){try{return r.nodebuffer&&String.fromCharCode.apply(null,l.allocBuffer(1)).length===1}catch{return!1}}()}};function w(h){var v=65536,_=i.getTypeOf(h),k=!0;if(_==="uint8array"?k=m.applyCanBeUsed.uint8array:_==="nodebuffer"&&(k=m.applyCanBeUsed.nodebuffer),k)for(;1<v;)try{return m.stringifyByChunk(h,_,v)}catch{v=Math.floor(v/2)}return m.stringifyByChar(h)}function d(h,v){for(var _=0;_<h.length;_++)v[_]=h[_];return v}i.applyFromCharCode=w;var x={};x.string={string:f,array:function(h){return y(h,new Array(h.length))},arraybuffer:function(h){return x.string.uint8array(h).buffer},uint8array:function(h){return y(h,new Uint8Array(h.length))},nodebuffer:function(h){return y(h,l.allocBuffer(h.length))}},x.array={string:w,array:f,arraybuffer:function(h){return new Uint8Array(h).buffer},uint8array:function(h){return new Uint8Array(h)},nodebuffer:function(h){return l.newBufferFrom(h)}},x.arraybuffer={string:function(h){return w(new Uint8Array(h))},array:function(h){return d(new Uint8Array(h),new Array(h.byteLength))},arraybuffer:f,uint8array:function(h){return new Uint8Array(h)},nodebuffer:function(h){return l.newBufferFrom(new Uint8Array(h))}},x.uint8array={string:w,array:function(h){return d(h,new Array(h.length))},arraybuffer:function(h){return h.buffer},uint8array:f,nodebuffer:function(h){return l.newBufferFrom(h)}},x.nodebuffer={string:w,array:function(h){return d(h,new Array(h.length))},arraybuffer:function(h){return x.nodebuffer.uint8array(h).buffer},uint8array:function(h){return d(h,new Uint8Array(h.length))},nodebuffer:f},i.transformTo=function(h,v){if(v=v||"",!h)return v;i.checkSupport(h);var _=i.getTypeOf(v);return x[_][h](v)},i.resolve=function(h){for(var v=h.split("/"),_=[],k=0;k<v.length;k++){var A=v[k];A==="."||A===""&&k!==0&&k!==v.length-1||(A===".."?_.pop():_.push(A))}return _.join("/")},i.getTypeOf=function(h){return typeof h=="string"?"string":Object.prototype.toString.call(h)==="[object Array]"?"array":r.nodebuffer&&l.isBuffer(h)?"nodebuffer":r.uint8array&&h instanceof Uint8Array?"uint8array":r.arraybuffer&&h instanceof ArrayBuffer?"arraybuffer":void 0},i.checkSupport=function(h){if(!r[h.toLowerCase()])throw new Error(h+" is not supported by this platform")},i.MAX_VALUE_16BITS=65535,i.MAX_VALUE_32BITS=-1,i.pretty=function(h){var v,_,k="";for(_=0;_<(h||"").length;_++)k+="\\x"+((v=h.charCodeAt(_))<16?"0":"")+v.toString(16).toUpperCase();return k},i.delay=function(h,v,_){setImmediate(function(){h.apply(_||null,v||[])})},i.inherits=function(h,v){function _(){}_.prototype=v.prototype,h.prototype=new _},i.extend=function(){var h,v,_={};for(h=0;h<arguments.length;h++)for(v in arguments[h])Object.prototype.hasOwnProperty.call(arguments[h],v)&&_[v]===void 0&&(_[v]=arguments[h][v]);return _},i.prepareContent=function(h,v,_,k,A){return c.Promise.resolve(v).then(function(z){return r.blob&&(z instanceof Blob||["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(z))!==-1)&&typeof FileReader<"u"?new c.Promise(function(O,U){var H=new FileReader;H.onload=function(G){O(G.target.result)},H.onerror=function(G){U(G.target.error)},H.readAsArrayBuffer(z)}):z}).then(function(z){var O=i.getTypeOf(z);return O?(O==="arraybuffer"?z=i.transformTo("uint8array",z):O==="string"&&(A?z=a.decode(z):_&&k!==!0&&(z=function(U){return y(U,r.uint8array?new Uint8Array(U.length):new Array(U.length))}(z))),z):c.Promise.reject(new Error("Can't read the data of '"+h+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(n,s,i){var r=n("./reader/readerFor"),a=n("./utils"),l=n("./signature"),c=n("./zipEntry"),f=n("./support");function y(m){this.files=[],this.loadOptions=m}y.prototype={checkSignature:function(m){if(!this.reader.readAndCheckSignature(m)){this.reader.index-=4;var w=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+a.pretty(w)+", expected "+a.pretty(m)+")")}},isSignature:function(m,w){var d=this.reader.index;this.reader.setIndex(m);var x=this.reader.readString(4)===w;return this.reader.setIndex(d),x},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var m=this.reader.readData(this.zipCommentLength),w=f.uint8array?"uint8array":"array",d=a.transformTo(w,m);this.zipComment=this.loadOptions.decodeFileName(d)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var m,w,d,x=this.zip64EndOfCentralSize-44;0<x;)m=this.reader.readInt(2),w=this.reader.readInt(4),d=this.reader.readData(w),this.zip64ExtensibleData[m]={id:m,length:w,value:d}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var m,w;for(m=0;m<this.files.length;m++)w=this.files[m],this.reader.setIndex(w.localHeaderOffset),this.checkSignature(l.LOCAL_FILE_HEADER),w.readLocalPart(this.reader),w.handleUTF8(),w.processAttributes()},readCentralDir:function(){var m;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(l.CENTRAL_FILE_HEADER);)(m=new c({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(m);if(this.centralDirRecords!==this.files.length&&this.centralDirRecords!==0&&this.files.length===0)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var m=this.reader.lastIndexOfSignature(l.CENTRAL_DIRECTORY_END);if(m<0)throw this.isSignature(0,l.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(m);var w=m;if(this.checkSignature(l.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===a.MAX_VALUE_16BITS||this.diskWithCentralDirStart===a.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===a.MAX_VALUE_16BITS||this.centralDirRecords===a.MAX_VALUE_16BITS||this.centralDirSize===a.MAX_VALUE_32BITS||this.centralDirOffset===a.MAX_VALUE_32BITS){if(this.zip64=!0,(m=this.reader.lastIndexOfSignature(l.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(m),this.checkSignature(l.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,l.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(l.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(l.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var d=this.centralDirOffset+this.centralDirSize;this.zip64&&(d+=20,d+=12+this.zip64EndOfCentralSize);var x=w-d;if(0<x)this.isSignature(w,l.CENTRAL_FILE_HEADER)||(this.reader.zero=x);else if(x<0)throw new Error("Corrupted zip: missing "+Math.abs(x)+" bytes.")},prepareReader:function(m){this.reader=r(m)},load:function(m){this.prepareReader(m),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},s.exports=y},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(n,s,i){var r=n("./reader/readerFor"),a=n("./utils"),l=n("./compressedObject"),c=n("./crc32"),f=n("./utf8"),y=n("./compressions"),m=n("./support");function w(d,x){this.options=d,this.loadOptions=x}w.prototype={isEncrypted:function(){return(1&this.bitFlag)==1},useUTF8:function(){return(2048&this.bitFlag)==2048},readLocalPart:function(d){var x,h;if(d.skip(22),this.fileNameLength=d.readInt(2),h=d.readInt(2),this.fileName=d.readData(this.fileNameLength),d.skip(h),this.compressedSize===-1||this.uncompressedSize===-1)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if((x=function(v){for(var _ in y)if(Object.prototype.hasOwnProperty.call(y,_)&&y[_].magic===v)return y[_];return null}(this.compressionMethod))===null)throw new Error("Corrupted zip : compression "+a.pretty(this.compressionMethod)+" unknown (inner file : "+a.transformTo("string",this.fileName)+")");this.decompressed=new l(this.compressedSize,this.uncompressedSize,this.crc32,x,d.readData(this.compressedSize))},readCentralPart:function(d){this.versionMadeBy=d.readInt(2),d.skip(2),this.bitFlag=d.readInt(2),this.compressionMethod=d.readString(2),this.date=d.readDate(),this.crc32=d.readInt(4),this.compressedSize=d.readInt(4),this.uncompressedSize=d.readInt(4);var x=d.readInt(2);if(this.extraFieldsLength=d.readInt(2),this.fileCommentLength=d.readInt(2),this.diskNumberStart=d.readInt(2),this.internalFileAttributes=d.readInt(2),this.externalFileAttributes=d.readInt(4),this.localHeaderOffset=d.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");d.skip(x),this.readExtraFields(d),this.parseZIP64ExtraField(d),this.fileComment=d.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var d=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),d==0&&(this.dosPermissions=63&this.externalFileAttributes),d==3&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||this.fileNameStr.slice(-1)!=="/"||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var d=r(this.extraFields[1].value);this.uncompressedSize===a.MAX_VALUE_32BITS&&(this.uncompressedSize=d.readInt(8)),this.compressedSize===a.MAX_VALUE_32BITS&&(this.compressedSize=d.readInt(8)),this.localHeaderOffset===a.MAX_VALUE_32BITS&&(this.localHeaderOffset=d.readInt(8)),this.diskNumberStart===a.MAX_VALUE_32BITS&&(this.diskNumberStart=d.readInt(4))}},readExtraFields:function(d){var x,h,v,_=d.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});d.index+4<_;)x=d.readInt(2),h=d.readInt(2),v=d.readData(h),this.extraFields[x]={id:x,length:h,value:v};d.setIndex(_)},handleUTF8:function(){var d=m.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=f.utf8decode(this.fileName),this.fileCommentStr=f.utf8decode(this.fileComment);else{var x=this.findExtraFieldUnicodePath();if(x!==null)this.fileNameStr=x;else{var h=a.transformTo(d,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(h)}var v=this.findExtraFieldUnicodeComment();if(v!==null)this.fileCommentStr=v;else{var _=a.transformTo(d,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(_)}}},findExtraFieldUnicodePath:function(){var d=this.extraFields[28789];if(d){var x=r(d.value);return x.readInt(1)!==1||c(this.fileName)!==x.readInt(4)?null:f.utf8decode(x.readData(d.length-5))}return null},findExtraFieldUnicodeComment:function(){var d=this.extraFields[25461];if(d){var x=r(d.value);return x.readInt(1)!==1||c(this.fileComment)!==x.readInt(4)?null:f.utf8decode(x.readData(d.length-5))}return null}},s.exports=w},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(n,s,i){function r(x,h,v){this.name=x,this.dir=v.dir,this.date=v.date,this.comment=v.comment,this.unixPermissions=v.unixPermissions,this.dosPermissions=v.dosPermissions,this._data=h,this._dataBinary=v.binary,this.options={compression:v.compression,compressionOptions:v.compressionOptions}}var a=n("./stream/StreamHelper"),l=n("./stream/DataWorker"),c=n("./utf8"),f=n("./compressedObject"),y=n("./stream/GenericWorker");r.prototype={internalStream:function(x){var h=null,v="string";try{if(!x)throw new Error("No output type specified.");var _=(v=x.toLowerCase())==="string"||v==="text";v!=="binarystring"&&v!=="text"||(v="string"),h=this._decompressWorker();var k=!this._dataBinary;k&&!_&&(h=h.pipe(new c.Utf8EncodeWorker)),!k&&_&&(h=h.pipe(new c.Utf8DecodeWorker))}catch(A){(h=new y("error")).error(A)}return new a(h,v,"")},async:function(x,h){return this.internalStream(x).accumulate(h)},nodeStream:function(x,h){return this.internalStream(x||"nodebuffer").toNodejsStream(h)},_compressWorker:function(x,h){if(this._data instanceof f&&this._data.compression.magic===x.magic)return this._data.getCompressedWorker();var v=this._decompressWorker();return this._dataBinary||(v=v.pipe(new c.Utf8EncodeWorker)),f.createWorkerFrom(v,x,h)},_decompressWorker:function(){return this._data instanceof f?this._data.getContentWorker():this._data instanceof y?this._data:new l(this._data)}};for(var m=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],w=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},d=0;d<m.length;d++)r.prototype[m[d]]=w;s.exports=r},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(n,s,i){(function(r){var a,l,c=r.MutationObserver||r.WebKitMutationObserver;if(c){var f=0,y=new c(x),m=r.document.createTextNode("");y.observe(m,{characterData:!0}),a=function(){m.data=f=++f%2}}else if(r.setImmediate||r.MessageChannel===void 0)a="document"in r&&"onreadystatechange"in r.document.createElement("script")?function(){var h=r.document.createElement("script");h.onreadystatechange=function(){x(),h.onreadystatechange=null,h.parentNode.removeChild(h),h=null},r.document.documentElement.appendChild(h)}:function(){setTimeout(x,0)};else{var w=new r.MessageChannel;w.port1.onmessage=x,a=function(){w.port2.postMessage(0)}}var d=[];function x(){var h,v;l=!0;for(var _=d.length;_;){for(v=d,d=[],h=-1;++h<_;)v[h]();_=d.length}l=!1}s.exports=function(h){d.push(h)!==1||l||a()}}).call(this,typeof cn<"u"?cn:typeof self<"u"?self:typeof window<"u"?window:{})},{}],37:[function(n,s,i){var r=n("immediate");function a(){}var l={},c=["REJECTED"],f=["FULFILLED"],y=["PENDING"];function m(_){if(typeof _!="function")throw new TypeError("resolver must be a function");this.state=y,this.queue=[],this.outcome=void 0,_!==a&&h(this,_)}function w(_,k,A){this.promise=_,typeof k=="function"&&(this.onFulfilled=k,this.callFulfilled=this.otherCallFulfilled),typeof A=="function"&&(this.onRejected=A,this.callRejected=this.otherCallRejected)}function d(_,k,A){r(function(){var z;try{z=k(A)}catch(O){return l.reject(_,O)}z===_?l.reject(_,new TypeError("Cannot resolve promise with itself")):l.resolve(_,z)})}function x(_){var k=_&&_.then;if(_&&(typeof _=="object"||typeof _=="function")&&typeof k=="function")return function(){k.apply(_,arguments)}}function h(_,k){var A=!1;function z(H){A||(A=!0,l.reject(_,H))}function O(H){A||(A=!0,l.resolve(_,H))}var U=v(function(){k(O,z)});U.status==="error"&&z(U.value)}function v(_,k){var A={};try{A.value=_(k),A.status="success"}catch(z){A.status="error",A.value=z}return A}(s.exports=m).prototype.finally=function(_){if(typeof _!="function")return this;var k=this.constructor;return this.then(function(A){return k.resolve(_()).then(function(){return A})},function(A){return k.resolve(_()).then(function(){throw A})})},m.prototype.catch=function(_){return this.then(null,_)},m.prototype.then=function(_,k){if(typeof _!="function"&&this.state===f||typeof k!="function"&&this.state===c)return this;var A=new this.constructor(a);return this.state!==y?d(A,this.state===f?_:k,this.outcome):this.queue.push(new w(A,_,k)),A},w.prototype.callFulfilled=function(_){l.resolve(this.promise,_)},w.prototype.otherCallFulfilled=function(_){d(this.promise,this.onFulfilled,_)},w.prototype.callRejected=function(_){l.reject(this.promise,_)},w.prototype.otherCallRejected=function(_){d(this.promise,this.onRejected,_)},l.resolve=function(_,k){var A=v(x,k);if(A.status==="error")return l.reject(_,A.value);var z=A.value;if(z)h(_,z);else{_.state=f,_.outcome=k;for(var O=-1,U=_.queue.length;++O<U;)_.queue[O].callFulfilled(k)}return _},l.reject=function(_,k){_.state=c,_.outcome=k;for(var A=-1,z=_.queue.length;++A<z;)_.queue[A].callRejected(k);return _},m.resolve=function(_){return _ instanceof this?_:l.resolve(new this(a),_)},m.reject=function(_){var k=new this(a);return l.reject(k,_)},m.all=function(_){var k=this;if(Object.prototype.toString.call(_)!=="[object Array]")return this.reject(new TypeError("must be an array"));var A=_.length,z=!1;if(!A)return this.resolve([]);for(var O=new Array(A),U=0,H=-1,G=new this(a);++H<A;)j(_[H],H);return G;function j(q,it){k.resolve(q).then(function(P){O[it]=P,++U!==A||z||(z=!0,l.resolve(G,O))},function(P){z||(z=!0,l.reject(G,P))})}},m.race=function(_){var k=this;if(Object.prototype.toString.call(_)!=="[object Array]")return this.reject(new TypeError("must be an array"));var A=_.length,z=!1;if(!A)return this.resolve([]);for(var O=-1,U=new this(a);++O<A;)H=_[O],k.resolve(H).then(function(G){z||(z=!0,l.resolve(U,G))},function(G){z||(z=!0,l.reject(U,G))});var H;return U}},{immediate:36}],38:[function(n,s,i){var r={};(0,n("./lib/utils/common").assign)(r,n("./lib/deflate"),n("./lib/inflate"),n("./lib/zlib/constants")),s.exports=r},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(n,s,i){var r=n("./zlib/deflate"),a=n("./utils/common"),l=n("./utils/strings"),c=n("./zlib/messages"),f=n("./zlib/zstream"),y=Object.prototype.toString,m=0,w=-1,d=0,x=8;function h(_){if(!(this instanceof h))return new h(_);this.options=a.assign({level:w,method:x,chunkSize:16384,windowBits:15,memLevel:8,strategy:d,to:""},_||{});var k=this.options;k.raw&&0<k.windowBits?k.windowBits=-k.windowBits:k.gzip&&0<k.windowBits&&k.windowBits<16&&(k.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var A=r.deflateInit2(this.strm,k.level,k.method,k.windowBits,k.memLevel,k.strategy);if(A!==m)throw new Error(c[A]);if(k.header&&r.deflateSetHeader(this.strm,k.header),k.dictionary){var z;if(z=typeof k.dictionary=="string"?l.string2buf(k.dictionary):y.call(k.dictionary)==="[object ArrayBuffer]"?new Uint8Array(k.dictionary):k.dictionary,(A=r.deflateSetDictionary(this.strm,z))!==m)throw new Error(c[A]);this._dict_set=!0}}function v(_,k){var A=new h(k);if(A.push(_,!0),A.err)throw A.msg||c[A.err];return A.result}h.prototype.push=function(_,k){var A,z,O=this.strm,U=this.options.chunkSize;if(this.ended)return!1;z=k===~~k?k:k===!0?4:0,typeof _=="string"?O.input=l.string2buf(_):y.call(_)==="[object ArrayBuffer]"?O.input=new Uint8Array(_):O.input=_,O.next_in=0,O.avail_in=O.input.length;do{if(O.avail_out===0&&(O.output=new a.Buf8(U),O.next_out=0,O.avail_out=U),(A=r.deflate(O,z))!==1&&A!==m)return this.onEnd(A),!(this.ended=!0);O.avail_out!==0&&(O.avail_in!==0||z!==4&&z!==2)||(this.options.to==="string"?this.onData(l.buf2binstring(a.shrinkBuf(O.output,O.next_out))):this.onData(a.shrinkBuf(O.output,O.next_out)))}while((0<O.avail_in||O.avail_out===0)&&A!==1);return z===4?(A=r.deflateEnd(this.strm),this.onEnd(A),this.ended=!0,A===m):z!==2||(this.onEnd(m),!(O.avail_out=0))},h.prototype.onData=function(_){this.chunks.push(_)},h.prototype.onEnd=function(_){_===m&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=a.flattenChunks(this.chunks)),this.chunks=[],this.err=_,this.msg=this.strm.msg},i.Deflate=h,i.deflate=v,i.deflateRaw=function(_,k){return(k=k||{}).raw=!0,v(_,k)},i.gzip=function(_,k){return(k=k||{}).gzip=!0,v(_,k)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(n,s,i){var r=n("./zlib/inflate"),a=n("./utils/common"),l=n("./utils/strings"),c=n("./zlib/constants"),f=n("./zlib/messages"),y=n("./zlib/zstream"),m=n("./zlib/gzheader"),w=Object.prototype.toString;function d(h){if(!(this instanceof d))return new d(h);this.options=a.assign({chunkSize:16384,windowBits:0,to:""},h||{});var v=this.options;v.raw&&0<=v.windowBits&&v.windowBits<16&&(v.windowBits=-v.windowBits,v.windowBits===0&&(v.windowBits=-15)),!(0<=v.windowBits&&v.windowBits<16)||h&&h.windowBits||(v.windowBits+=32),15<v.windowBits&&v.windowBits<48&&!(15&v.windowBits)&&(v.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new y,this.strm.avail_out=0;var _=r.inflateInit2(this.strm,v.windowBits);if(_!==c.Z_OK)throw new Error(f[_]);this.header=new m,r.inflateGetHeader(this.strm,this.header)}function x(h,v){var _=new d(v);if(_.push(h,!0),_.err)throw _.msg||f[_.err];return _.result}d.prototype.push=function(h,v){var _,k,A,z,O,U,H=this.strm,G=this.options.chunkSize,j=this.options.dictionary,q=!1;if(this.ended)return!1;k=v===~~v?v:v===!0?c.Z_FINISH:c.Z_NO_FLUSH,typeof h=="string"?H.input=l.binstring2buf(h):w.call(h)==="[object ArrayBuffer]"?H.input=new Uint8Array(h):H.input=h,H.next_in=0,H.avail_in=H.input.length;do{if(H.avail_out===0&&(H.output=new a.Buf8(G),H.next_out=0,H.avail_out=G),(_=r.inflate(H,c.Z_NO_FLUSH))===c.Z_NEED_DICT&&j&&(U=typeof j=="string"?l.string2buf(j):w.call(j)==="[object ArrayBuffer]"?new Uint8Array(j):j,_=r.inflateSetDictionary(this.strm,U)),_===c.Z_BUF_ERROR&&q===!0&&(_=c.Z_OK,q=!1),_!==c.Z_STREAM_END&&_!==c.Z_OK)return this.onEnd(_),!(this.ended=!0);H.next_out&&(H.avail_out!==0&&_!==c.Z_STREAM_END&&(H.avail_in!==0||k!==c.Z_FINISH&&k!==c.Z_SYNC_FLUSH)||(this.options.to==="string"?(A=l.utf8border(H.output,H.next_out),z=H.next_out-A,O=l.buf2string(H.output,A),H.next_out=z,H.avail_out=G-z,z&&a.arraySet(H.output,H.output,A,z,0),this.onData(O)):this.onData(a.shrinkBuf(H.output,H.next_out)))),H.avail_in===0&&H.avail_out===0&&(q=!0)}while((0<H.avail_in||H.avail_out===0)&&_!==c.Z_STREAM_END);return _===c.Z_STREAM_END&&(k=c.Z_FINISH),k===c.Z_FINISH?(_=r.inflateEnd(this.strm),this.onEnd(_),this.ended=!0,_===c.Z_OK):k!==c.Z_SYNC_FLUSH||(this.onEnd(c.Z_OK),!(H.avail_out=0))},d.prototype.onData=function(h){this.chunks.push(h)},d.prototype.onEnd=function(h){h===c.Z_OK&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=a.flattenChunks(this.chunks)),this.chunks=[],this.err=h,this.msg=this.strm.msg},i.Inflate=d,i.inflate=x,i.inflateRaw=function(h,v){return(v=v||{}).raw=!0,x(h,v)},i.ungzip=x},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(n,s,i){var r=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Int32Array<"u";i.assign=function(c){for(var f=Array.prototype.slice.call(arguments,1);f.length;){var y=f.shift();if(y){if(typeof y!="object")throw new TypeError(y+"must be non-object");for(var m in y)y.hasOwnProperty(m)&&(c[m]=y[m])}}return c},i.shrinkBuf=function(c,f){return c.length===f?c:c.subarray?c.subarray(0,f):(c.length=f,c)};var a={arraySet:function(c,f,y,m,w){if(f.subarray&&c.subarray)c.set(f.subarray(y,y+m),w);else for(var d=0;d<m;d++)c[w+d]=f[y+d]},flattenChunks:function(c){var f,y,m,w,d,x;for(f=m=0,y=c.length;f<y;f++)m+=c[f].length;for(x=new Uint8Array(m),f=w=0,y=c.length;f<y;f++)d=c[f],x.set(d,w),w+=d.length;return x}},l={arraySet:function(c,f,y,m,w){for(var d=0;d<m;d++)c[w+d]=f[y+d]},flattenChunks:function(c){return[].concat.apply([],c)}};i.setTyped=function(c){c?(i.Buf8=Uint8Array,i.Buf16=Uint16Array,i.Buf32=Int32Array,i.assign(i,a)):(i.Buf8=Array,i.Buf16=Array,i.Buf32=Array,i.assign(i,l))},i.setTyped(r)},{}],42:[function(n,s,i){var r=n("./common"),a=!0,l=!0;try{String.fromCharCode.apply(null,[0])}catch{a=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{l=!1}for(var c=new r.Buf8(256),f=0;f<256;f++)c[f]=252<=f?6:248<=f?5:240<=f?4:224<=f?3:192<=f?2:1;function y(m,w){if(w<65537&&(m.subarray&&l||!m.subarray&&a))return String.fromCharCode.apply(null,r.shrinkBuf(m,w));for(var d="",x=0;x<w;x++)d+=String.fromCharCode(m[x]);return d}c[254]=c[254]=1,i.string2buf=function(m){var w,d,x,h,v,_=m.length,k=0;for(h=0;h<_;h++)(64512&(d=m.charCodeAt(h)))==55296&&h+1<_&&(64512&(x=m.charCodeAt(h+1)))==56320&&(d=65536+(d-55296<<10)+(x-56320),h++),k+=d<128?1:d<2048?2:d<65536?3:4;for(w=new r.Buf8(k),h=v=0;v<k;h++)(64512&(d=m.charCodeAt(h)))==55296&&h+1<_&&(64512&(x=m.charCodeAt(h+1)))==56320&&(d=65536+(d-55296<<10)+(x-56320),h++),d<128?w[v++]=d:(d<2048?w[v++]=192|d>>>6:(d<65536?w[v++]=224|d>>>12:(w[v++]=240|d>>>18,w[v++]=128|d>>>12&63),w[v++]=128|d>>>6&63),w[v++]=128|63&d);return w},i.buf2binstring=function(m){return y(m,m.length)},i.binstring2buf=function(m){for(var w=new r.Buf8(m.length),d=0,x=w.length;d<x;d++)w[d]=m.charCodeAt(d);return w},i.buf2string=function(m,w){var d,x,h,v,_=w||m.length,k=new Array(2*_);for(d=x=0;d<_;)if((h=m[d++])<128)k[x++]=h;else if(4<(v=c[h]))k[x++]=65533,d+=v-1;else{for(h&=v===2?31:v===3?15:7;1<v&&d<_;)h=h<<6|63&m[d++],v--;1<v?k[x++]=65533:h<65536?k[x++]=h:(h-=65536,k[x++]=55296|h>>10&1023,k[x++]=56320|1023&h)}return y(k,x)},i.utf8border=function(m,w){var d;for((w=w||m.length)>m.length&&(w=m.length),d=w-1;0<=d&&(192&m[d])==128;)d--;return d<0||d===0?w:d+c[m[d]]>w?d:w}},{"./common":41}],43:[function(n,s,i){s.exports=function(r,a,l,c){for(var f=65535&r|0,y=r>>>16&65535|0,m=0;l!==0;){for(l-=m=2e3<l?2e3:l;y=y+(f=f+a[c++]|0)|0,--m;);f%=65521,y%=65521}return f|y<<16|0}},{}],44:[function(n,s,i){s.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(n,s,i){var r=function(){for(var a,l=[],c=0;c<256;c++){a=c;for(var f=0;f<8;f++)a=1&a?3988292384^a>>>1:a>>>1;l[c]=a}return l}();s.exports=function(a,l,c,f){var y=r,m=f+c;a^=-1;for(var w=f;w<m;w++)a=a>>>8^y[255&(a^l[w])];return-1^a}},{}],46:[function(n,s,i){var r,a=n("../utils/common"),l=n("./trees"),c=n("./adler32"),f=n("./crc32"),y=n("./messages"),m=0,w=4,d=0,x=-2,h=-1,v=4,_=2,k=8,A=9,z=286,O=30,U=19,H=2*z+1,G=15,j=3,q=258,it=q+j+1,P=42,Z=113,u=1,V=2,st=3,F=4;function rt(o,I){return o.msg=y[I],I}function J(o){return(o<<1)-(4<o?9:0)}function tt(o){for(var I=o.length;0<=--I;)o[I]=0}function N(o){var I=o.state,E=I.pending;E>o.avail_out&&(E=o.avail_out),E!==0&&(a.arraySet(o.output,I.pending_buf,I.pending_out,E,o.next_out),o.next_out+=E,I.pending_out+=E,o.total_out+=E,o.avail_out-=E,I.pending-=E,I.pending===0&&(I.pending_out=0))}function R(o,I){l._tr_flush_block(o,0<=o.block_start?o.block_start:-1,o.strstart-o.block_start,I),o.block_start=o.strstart,N(o.strm)}function ct(o,I){o.pending_buf[o.pending++]=I}function et(o,I){o.pending_buf[o.pending++]=I>>>8&255,o.pending_buf[o.pending++]=255&I}function Q(o,I){var E,g,p=o.max_chain_length,C=o.strstart,L=o.prev_length,D=o.nice_match,S=o.strstart>o.w_size-it?o.strstart-(o.w_size-it):0,M=o.window,K=o.w_mask,W=o.prev,X=o.strstart+q,ot=M[C+L-1],at=M[C+L];o.prev_length>=o.good_match&&(p>>=2),D>o.lookahead&&(D=o.lookahead);do if(M[(E=I)+L]===at&&M[E+L-1]===ot&&M[E]===M[C]&&M[++E]===M[C+1]){C+=2,E++;do;while(M[++C]===M[++E]&&M[++C]===M[++E]&&M[++C]===M[++E]&&M[++C]===M[++E]&&M[++C]===M[++E]&&M[++C]===M[++E]&&M[++C]===M[++E]&&M[++C]===M[++E]&&C<X);if(g=q-(X-C),C=X-q,L<g){if(o.match_start=I,D<=(L=g))break;ot=M[C+L-1],at=M[C+L]}}while((I=W[I&K])>S&&--p!=0);return L<=o.lookahead?L:o.lookahead}function pt(o){var I,E,g,p,C,L,D,S,M,K,W=o.w_size;do{if(p=o.window_size-o.lookahead-o.strstart,o.strstart>=W+(W-it)){for(a.arraySet(o.window,o.window,W,W,0),o.match_start-=W,o.strstart-=W,o.block_start-=W,I=E=o.hash_size;g=o.head[--I],o.head[I]=W<=g?g-W:0,--E;);for(I=E=W;g=o.prev[--I],o.prev[I]=W<=g?g-W:0,--E;);p+=W}if(o.strm.avail_in===0)break;if(L=o.strm,D=o.window,S=o.strstart+o.lookahead,M=p,K=void 0,K=L.avail_in,M<K&&(K=M),E=K===0?0:(L.avail_in-=K,a.arraySet(D,L.input,L.next_in,K,S),L.state.wrap===1?L.adler=c(L.adler,D,K,S):L.state.wrap===2&&(L.adler=f(L.adler,D,K,S)),L.next_in+=K,L.total_in+=K,K),o.lookahead+=E,o.lookahead+o.insert>=j)for(C=o.strstart-o.insert,o.ins_h=o.window[C],o.ins_h=(o.ins_h<<o.hash_shift^o.window[C+1])&o.hash_mask;o.insert&&(o.ins_h=(o.ins_h<<o.hash_shift^o.window[C+j-1])&o.hash_mask,o.prev[C&o.w_mask]=o.head[o.ins_h],o.head[o.ins_h]=C,C++,o.insert--,!(o.lookahead+o.insert<j)););}while(o.lookahead<it&&o.strm.avail_in!==0)}function yt(o,I){for(var E,g;;){if(o.lookahead<it){if(pt(o),o.lookahead<it&&I===m)return u;if(o.lookahead===0)break}if(E=0,o.lookahead>=j&&(o.ins_h=(o.ins_h<<o.hash_shift^o.window[o.strstart+j-1])&o.hash_mask,E=o.prev[o.strstart&o.w_mask]=o.head[o.ins_h],o.head[o.ins_h]=o.strstart),E!==0&&o.strstart-E<=o.w_size-it&&(o.match_length=Q(o,E)),o.match_length>=j)if(g=l._tr_tally(o,o.strstart-o.match_start,o.match_length-j),o.lookahead-=o.match_length,o.match_length<=o.max_lazy_match&&o.lookahead>=j){for(o.match_length--;o.strstart++,o.ins_h=(o.ins_h<<o.hash_shift^o.window[o.strstart+j-1])&o.hash_mask,E=o.prev[o.strstart&o.w_mask]=o.head[o.ins_h],o.head[o.ins_h]=o.strstart,--o.match_length!=0;);o.strstart++}else o.strstart+=o.match_length,o.match_length=0,o.ins_h=o.window[o.strstart],o.ins_h=(o.ins_h<<o.hash_shift^o.window[o.strstart+1])&o.hash_mask;else g=l._tr_tally(o,0,o.window[o.strstart]),o.lookahead--,o.strstart++;if(g&&(R(o,!1),o.strm.avail_out===0))return u}return o.insert=o.strstart<j-1?o.strstart:j-1,I===w?(R(o,!0),o.strm.avail_out===0?st:F):o.last_lit&&(R(o,!1),o.strm.avail_out===0)?u:V}function ft(o,I){for(var E,g,p;;){if(o.lookahead<it){if(pt(o),o.lookahead<it&&I===m)return u;if(o.lookahead===0)break}if(E=0,o.lookahead>=j&&(o.ins_h=(o.ins_h<<o.hash_shift^o.window[o.strstart+j-1])&o.hash_mask,E=o.prev[o.strstart&o.w_mask]=o.head[o.ins_h],o.head[o.ins_h]=o.strstart),o.prev_length=o.match_length,o.prev_match=o.match_start,o.match_length=j-1,E!==0&&o.prev_length<o.max_lazy_match&&o.strstart-E<=o.w_size-it&&(o.match_length=Q(o,E),o.match_length<=5&&(o.strategy===1||o.match_length===j&&4096<o.strstart-o.match_start)&&(o.match_length=j-1)),o.prev_length>=j&&o.match_length<=o.prev_length){for(p=o.strstart+o.lookahead-j,g=l._tr_tally(o,o.strstart-1-o.prev_match,o.prev_length-j),o.lookahead-=o.prev_length-1,o.prev_length-=2;++o.strstart<=p&&(o.ins_h=(o.ins_h<<o.hash_shift^o.window[o.strstart+j-1])&o.hash_mask,E=o.prev[o.strstart&o.w_mask]=o.head[o.ins_h],o.head[o.ins_h]=o.strstart),--o.prev_length!=0;);if(o.match_available=0,o.match_length=j-1,o.strstart++,g&&(R(o,!1),o.strm.avail_out===0))return u}else if(o.match_available){if((g=l._tr_tally(o,0,o.window[o.strstart-1]))&&R(o,!1),o.strstart++,o.lookahead--,o.strm.avail_out===0)return u}else o.match_available=1,o.strstart++,o.lookahead--}return o.match_available&&(g=l._tr_tally(o,0,o.window[o.strstart-1]),o.match_available=0),o.insert=o.strstart<j-1?o.strstart:j-1,I===w?(R(o,!0),o.strm.avail_out===0?st:F):o.last_lit&&(R(o,!1),o.strm.avail_out===0)?u:V}function Y(o,I,E,g,p){this.good_length=o,this.max_lazy=I,this.nice_length=E,this.max_chain=g,this.func=p}function B(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=k,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new a.Buf16(2*H),this.dyn_dtree=new a.Buf16(2*(2*O+1)),this.bl_tree=new a.Buf16(2*(2*U+1)),tt(this.dyn_ltree),tt(this.dyn_dtree),tt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new a.Buf16(G+1),this.heap=new a.Buf16(2*z+1),tt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new a.Buf16(2*z+1),tt(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function $(o){var I;return o&&o.state?(o.total_in=o.total_out=0,o.data_type=_,(I=o.state).pending=0,I.pending_out=0,I.wrap<0&&(I.wrap=-I.wrap),I.status=I.wrap?P:Z,o.adler=I.wrap===2?0:1,I.last_flush=m,l._tr_init(I),d):rt(o,x)}function nt(o){var I=$(o);return I===d&&function(E){E.window_size=2*E.w_size,tt(E.head),E.max_lazy_match=r[E.level].max_lazy,E.good_match=r[E.level].good_length,E.nice_match=r[E.level].nice_length,E.max_chain_length=r[E.level].max_chain,E.strstart=0,E.block_start=0,E.lookahead=0,E.insert=0,E.match_length=E.prev_length=j-1,E.match_available=0,E.ins_h=0}(o.state),I}function T(o,I,E,g,p,C){if(!o)return x;var L=1;if(I===h&&(I=6),g<0?(L=0,g=-g):15<g&&(L=2,g-=16),p<1||A<p||E!==k||g<8||15<g||I<0||9<I||C<0||v<C)return rt(o,x);g===8&&(g=9);var D=new B;return(o.state=D).strm=o,D.wrap=L,D.gzhead=null,D.w_bits=g,D.w_size=1<<D.w_bits,D.w_mask=D.w_size-1,D.hash_bits=p+7,D.hash_size=1<<D.hash_bits,D.hash_mask=D.hash_size-1,D.hash_shift=~~((D.hash_bits+j-1)/j),D.window=new a.Buf8(2*D.w_size),D.head=new a.Buf16(D.hash_size),D.prev=new a.Buf16(D.w_size),D.lit_bufsize=1<<p+6,D.pending_buf_size=4*D.lit_bufsize,D.pending_buf=new a.Buf8(D.pending_buf_size),D.d_buf=1*D.lit_bufsize,D.l_buf=3*D.lit_bufsize,D.level=I,D.strategy=C,D.method=E,nt(o)}r=[new Y(0,0,0,0,function(o,I){var E=65535;for(E>o.pending_buf_size-5&&(E=o.pending_buf_size-5);;){if(o.lookahead<=1){if(pt(o),o.lookahead===0&&I===m)return u;if(o.lookahead===0)break}o.strstart+=o.lookahead,o.lookahead=0;var g=o.block_start+E;if((o.strstart===0||o.strstart>=g)&&(o.lookahead=o.strstart-g,o.strstart=g,R(o,!1),o.strm.avail_out===0)||o.strstart-o.block_start>=o.w_size-it&&(R(o,!1),o.strm.avail_out===0))return u}return o.insert=0,I===w?(R(o,!0),o.strm.avail_out===0?st:F):(o.strstart>o.block_start&&(R(o,!1),o.strm.avail_out),u)}),new Y(4,4,8,4,yt),new Y(4,5,16,8,yt),new Y(4,6,32,32,yt),new Y(4,4,16,16,ft),new Y(8,16,32,32,ft),new Y(8,16,128,128,ft),new Y(8,32,128,256,ft),new Y(32,128,258,1024,ft),new Y(32,258,258,4096,ft)],i.deflateInit=function(o,I){return T(o,I,k,15,8,0)},i.deflateInit2=T,i.deflateReset=nt,i.deflateResetKeep=$,i.deflateSetHeader=function(o,I){return o&&o.state?o.state.wrap!==2?x:(o.state.gzhead=I,d):x},i.deflate=function(o,I){var E,g,p,C;if(!o||!o.state||5<I||I<0)return o?rt(o,x):x;if(g=o.state,!o.output||!o.input&&o.avail_in!==0||g.status===666&&I!==w)return rt(o,o.avail_out===0?-5:x);if(g.strm=o,E=g.last_flush,g.last_flush=I,g.status===P)if(g.wrap===2)o.adler=0,ct(g,31),ct(g,139),ct(g,8),g.gzhead?(ct(g,(g.gzhead.text?1:0)+(g.gzhead.hcrc?2:0)+(g.gzhead.extra?4:0)+(g.gzhead.name?8:0)+(g.gzhead.comment?16:0)),ct(g,255&g.gzhead.time),ct(g,g.gzhead.time>>8&255),ct(g,g.gzhead.time>>16&255),ct(g,g.gzhead.time>>24&255),ct(g,g.level===9?2:2<=g.strategy||g.level<2?4:0),ct(g,255&g.gzhead.os),g.gzhead.extra&&g.gzhead.extra.length&&(ct(g,255&g.gzhead.extra.length),ct(g,g.gzhead.extra.length>>8&255)),g.gzhead.hcrc&&(o.adler=f(o.adler,g.pending_buf,g.pending,0)),g.gzindex=0,g.status=69):(ct(g,0),ct(g,0),ct(g,0),ct(g,0),ct(g,0),ct(g,g.level===9?2:2<=g.strategy||g.level<2?4:0),ct(g,3),g.status=Z);else{var L=k+(g.w_bits-8<<4)<<8;L|=(2<=g.strategy||g.level<2?0:g.level<6?1:g.level===6?2:3)<<6,g.strstart!==0&&(L|=32),L+=31-L%31,g.status=Z,et(g,L),g.strstart!==0&&(et(g,o.adler>>>16),et(g,65535&o.adler)),o.adler=1}if(g.status===69)if(g.gzhead.extra){for(p=g.pending;g.gzindex<(65535&g.gzhead.extra.length)&&(g.pending!==g.pending_buf_size||(g.gzhead.hcrc&&g.pending>p&&(o.adler=f(o.adler,g.pending_buf,g.pending-p,p)),N(o),p=g.pending,g.pending!==g.pending_buf_size));)ct(g,255&g.gzhead.extra[g.gzindex]),g.gzindex++;g.gzhead.hcrc&&g.pending>p&&(o.adler=f(o.adler,g.pending_buf,g.pending-p,p)),g.gzindex===g.gzhead.extra.length&&(g.gzindex=0,g.status=73)}else g.status=73;if(g.status===73)if(g.gzhead.name){p=g.pending;do{if(g.pending===g.pending_buf_size&&(g.gzhead.hcrc&&g.pending>p&&(o.adler=f(o.adler,g.pending_buf,g.pending-p,p)),N(o),p=g.pending,g.pending===g.pending_buf_size)){C=1;break}C=g.gzindex<g.gzhead.name.length?255&g.gzhead.name.charCodeAt(g.gzindex++):0,ct(g,C)}while(C!==0);g.gzhead.hcrc&&g.pending>p&&(o.adler=f(o.adler,g.pending_buf,g.pending-p,p)),C===0&&(g.gzindex=0,g.status=91)}else g.status=91;if(g.status===91)if(g.gzhead.comment){p=g.pending;do{if(g.pending===g.pending_buf_size&&(g.gzhead.hcrc&&g.pending>p&&(o.adler=f(o.adler,g.pending_buf,g.pending-p,p)),N(o),p=g.pending,g.pending===g.pending_buf_size)){C=1;break}C=g.gzindex<g.gzhead.comment.length?255&g.gzhead.comment.charCodeAt(g.gzindex++):0,ct(g,C)}while(C!==0);g.gzhead.hcrc&&g.pending>p&&(o.adler=f(o.adler,g.pending_buf,g.pending-p,p)),C===0&&(g.status=103)}else g.status=103;if(g.status===103&&(g.gzhead.hcrc?(g.pending+2>g.pending_buf_size&&N(o),g.pending+2<=g.pending_buf_size&&(ct(g,255&o.adler),ct(g,o.adler>>8&255),o.adler=0,g.status=Z)):g.status=Z),g.pending!==0){if(N(o),o.avail_out===0)return g.last_flush=-1,d}else if(o.avail_in===0&&J(I)<=J(E)&&I!==w)return rt(o,-5);if(g.status===666&&o.avail_in!==0)return rt(o,-5);if(o.avail_in!==0||g.lookahead!==0||I!==m&&g.status!==666){var D=g.strategy===2?function(S,M){for(var K;;){if(S.lookahead===0&&(pt(S),S.lookahead===0)){if(M===m)return u;break}if(S.match_length=0,K=l._tr_tally(S,0,S.window[S.strstart]),S.lookahead--,S.strstart++,K&&(R(S,!1),S.strm.avail_out===0))return u}return S.insert=0,M===w?(R(S,!0),S.strm.avail_out===0?st:F):S.last_lit&&(R(S,!1),S.strm.avail_out===0)?u:V}(g,I):g.strategy===3?function(S,M){for(var K,W,X,ot,at=S.window;;){if(S.lookahead<=q){if(pt(S),S.lookahead<=q&&M===m)return u;if(S.lookahead===0)break}if(S.match_length=0,S.lookahead>=j&&0<S.strstart&&(W=at[X=S.strstart-1])===at[++X]&&W===at[++X]&&W===at[++X]){ot=S.strstart+q;do;while(W===at[++X]&&W===at[++X]&&W===at[++X]&&W===at[++X]&&W===at[++X]&&W===at[++X]&&W===at[++X]&&W===at[++X]&&X<ot);S.match_length=q-(ot-X),S.match_length>S.lookahead&&(S.match_length=S.lookahead)}if(S.match_length>=j?(K=l._tr_tally(S,1,S.match_length-j),S.lookahead-=S.match_length,S.strstart+=S.match_length,S.match_length=0):(K=l._tr_tally(S,0,S.window[S.strstart]),S.lookahead--,S.strstart++),K&&(R(S,!1),S.strm.avail_out===0))return u}return S.insert=0,M===w?(R(S,!0),S.strm.avail_out===0?st:F):S.last_lit&&(R(S,!1),S.strm.avail_out===0)?u:V}(g,I):r[g.level].func(g,I);if(D!==st&&D!==F||(g.status=666),D===u||D===st)return o.avail_out===0&&(g.last_flush=-1),d;if(D===V&&(I===1?l._tr_align(g):I!==5&&(l._tr_stored_block(g,0,0,!1),I===3&&(tt(g.head),g.lookahead===0&&(g.strstart=0,g.block_start=0,g.insert=0))),N(o),o.avail_out===0))return g.last_flush=-1,d}return I!==w?d:g.wrap<=0?1:(g.wrap===2?(ct(g,255&o.adler),ct(g,o.adler>>8&255),ct(g,o.adler>>16&255),ct(g,o.adler>>24&255),ct(g,255&o.total_in),ct(g,o.total_in>>8&255),ct(g,o.total_in>>16&255),ct(g,o.total_in>>24&255)):(et(g,o.adler>>>16),et(g,65535&o.adler)),N(o),0<g.wrap&&(g.wrap=-g.wrap),g.pending!==0?d:1)},i.deflateEnd=function(o){var I;return o&&o.state?(I=o.state.status)!==P&&I!==69&&I!==73&&I!==91&&I!==103&&I!==Z&&I!==666?rt(o,x):(o.state=null,I===Z?rt(o,-3):d):x},i.deflateSetDictionary=function(o,I){var E,g,p,C,L,D,S,M,K=I.length;if(!o||!o.state||(C=(E=o.state).wrap)===2||C===1&&E.status!==P||E.lookahead)return x;for(C===1&&(o.adler=c(o.adler,I,K,0)),E.wrap=0,K>=E.w_size&&(C===0&&(tt(E.head),E.strstart=0,E.block_start=0,E.insert=0),M=new a.Buf8(E.w_size),a.arraySet(M,I,K-E.w_size,E.w_size,0),I=M,K=E.w_size),L=o.avail_in,D=o.next_in,S=o.input,o.avail_in=K,o.next_in=0,o.input=I,pt(E);E.lookahead>=j;){for(g=E.strstart,p=E.lookahead-(j-1);E.ins_h=(E.ins_h<<E.hash_shift^E.window[g+j-1])&E.hash_mask,E.prev[g&E.w_mask]=E.head[E.ins_h],E.head[E.ins_h]=g,g++,--p;);E.strstart=g,E.lookahead=j-1,pt(E)}return E.strstart+=E.lookahead,E.block_start=E.strstart,E.insert=E.lookahead,E.lookahead=0,E.match_length=E.prev_length=j-1,E.match_available=0,o.next_in=D,o.input=S,o.avail_in=L,E.wrap=C,d},i.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(n,s,i){s.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(n,s,i){s.exports=function(r,a){var l,c,f,y,m,w,d,x,h,v,_,k,A,z,O,U,H,G,j,q,it,P,Z,u,V;l=r.state,c=r.next_in,u=r.input,f=c+(r.avail_in-5),y=r.next_out,V=r.output,m=y-(a-r.avail_out),w=y+(r.avail_out-257),d=l.dmax,x=l.wsize,h=l.whave,v=l.wnext,_=l.window,k=l.hold,A=l.bits,z=l.lencode,O=l.distcode,U=(1<<l.lenbits)-1,H=(1<<l.distbits)-1;t:do{A<15&&(k+=u[c++]<<A,A+=8,k+=u[c++]<<A,A+=8),G=z[k&U];e:for(;;){if(k>>>=j=G>>>24,A-=j,(j=G>>>16&255)===0)V[y++]=65535&G;else{if(!(16&j)){if(!(64&j)){G=z[(65535&G)+(k&(1<<j)-1)];continue e}if(32&j){l.mode=12;break t}r.msg="invalid literal/length code",l.mode=30;break t}q=65535&G,(j&=15)&&(A<j&&(k+=u[c++]<<A,A+=8),q+=k&(1<<j)-1,k>>>=j,A-=j),A<15&&(k+=u[c++]<<A,A+=8,k+=u[c++]<<A,A+=8),G=O[k&H];n:for(;;){if(k>>>=j=G>>>24,A-=j,!(16&(j=G>>>16&255))){if(!(64&j)){G=O[(65535&G)+(k&(1<<j)-1)];continue n}r.msg="invalid distance code",l.mode=30;break t}if(it=65535&G,A<(j&=15)&&(k+=u[c++]<<A,(A+=8)<j&&(k+=u[c++]<<A,A+=8)),d<(it+=k&(1<<j)-1)){r.msg="invalid distance too far back",l.mode=30;break t}if(k>>>=j,A-=j,(j=y-m)<it){if(h<(j=it-j)&&l.sane){r.msg="invalid distance too far back",l.mode=30;break t}if(Z=_,(P=0)===v){if(P+=x-j,j<q){for(q-=j;V[y++]=_[P++],--j;);P=y-it,Z=V}}else if(v<j){if(P+=x+v-j,(j-=v)<q){for(q-=j;V[y++]=_[P++],--j;);if(P=0,v<q){for(q-=j=v;V[y++]=_[P++],--j;);P=y-it,Z=V}}}else if(P+=v-j,j<q){for(q-=j;V[y++]=_[P++],--j;);P=y-it,Z=V}for(;2<q;)V[y++]=Z[P++],V[y++]=Z[P++],V[y++]=Z[P++],q-=3;q&&(V[y++]=Z[P++],1<q&&(V[y++]=Z[P++]))}else{for(P=y-it;V[y++]=V[P++],V[y++]=V[P++],V[y++]=V[P++],2<(q-=3););q&&(V[y++]=V[P++],1<q&&(V[y++]=V[P++]))}break}}break}}while(c<f&&y<w);c-=q=A>>3,k&=(1<<(A-=q<<3))-1,r.next_in=c,r.next_out=y,r.avail_in=c<f?f-c+5:5-(c-f),r.avail_out=y<w?w-y+257:257-(y-w),l.hold=k,l.bits=A}},{}],49:[function(n,s,i){var r=n("../utils/common"),a=n("./adler32"),l=n("./crc32"),c=n("./inffast"),f=n("./inftrees"),y=1,m=2,w=0,d=-2,x=1,h=852,v=592;function _(P){return(P>>>24&255)+(P>>>8&65280)+((65280&P)<<8)+((255&P)<<24)}function k(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function A(P){var Z;return P&&P.state?(Z=P.state,P.total_in=P.total_out=Z.total=0,P.msg="",Z.wrap&&(P.adler=1&Z.wrap),Z.mode=x,Z.last=0,Z.havedict=0,Z.dmax=32768,Z.head=null,Z.hold=0,Z.bits=0,Z.lencode=Z.lendyn=new r.Buf32(h),Z.distcode=Z.distdyn=new r.Buf32(v),Z.sane=1,Z.back=-1,w):d}function z(P){var Z;return P&&P.state?((Z=P.state).wsize=0,Z.whave=0,Z.wnext=0,A(P)):d}function O(P,Z){var u,V;return P&&P.state?(V=P.state,Z<0?(u=0,Z=-Z):(u=1+(Z>>4),Z<48&&(Z&=15)),Z&&(Z<8||15<Z)?d:(V.window!==null&&V.wbits!==Z&&(V.window=null),V.wrap=u,V.wbits=Z,z(P))):d}function U(P,Z){var u,V;return P?(V=new k,(P.state=V).window=null,(u=O(P,Z))!==w&&(P.state=null),u):d}var H,G,j=!0;function q(P){if(j){var Z;for(H=new r.Buf32(512),G=new r.Buf32(32),Z=0;Z<144;)P.lens[Z++]=8;for(;Z<256;)P.lens[Z++]=9;for(;Z<280;)P.lens[Z++]=7;for(;Z<288;)P.lens[Z++]=8;for(f(y,P.lens,0,288,H,0,P.work,{bits:9}),Z=0;Z<32;)P.lens[Z++]=5;f(m,P.lens,0,32,G,0,P.work,{bits:5}),j=!1}P.lencode=H,P.lenbits=9,P.distcode=G,P.distbits=5}function it(P,Z,u,V){var st,F=P.state;return F.window===null&&(F.wsize=1<<F.wbits,F.wnext=0,F.whave=0,F.window=new r.Buf8(F.wsize)),V>=F.wsize?(r.arraySet(F.window,Z,u-F.wsize,F.wsize,0),F.wnext=0,F.whave=F.wsize):(V<(st=F.wsize-F.wnext)&&(st=V),r.arraySet(F.window,Z,u-V,st,F.wnext),(V-=st)?(r.arraySet(F.window,Z,u-V,V,0),F.wnext=V,F.whave=F.wsize):(F.wnext+=st,F.wnext===F.wsize&&(F.wnext=0),F.whave<F.wsize&&(F.whave+=st))),0}i.inflateReset=z,i.inflateReset2=O,i.inflateResetKeep=A,i.inflateInit=function(P){return U(P,15)},i.inflateInit2=U,i.inflate=function(P,Z){var u,V,st,F,rt,J,tt,N,R,ct,et,Q,pt,yt,ft,Y,B,$,nt,T,o,I,E,g,p=0,C=new r.Buf8(4),L=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!P||!P.state||!P.output||!P.input&&P.avail_in!==0)return d;(u=P.state).mode===12&&(u.mode=13),rt=P.next_out,st=P.output,tt=P.avail_out,F=P.next_in,V=P.input,J=P.avail_in,N=u.hold,R=u.bits,ct=J,et=tt,I=w;t:for(;;)switch(u.mode){case x:if(u.wrap===0){u.mode=13;break}for(;R<16;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}if(2&u.wrap&&N===35615){C[u.check=0]=255&N,C[1]=N>>>8&255,u.check=l(u.check,C,2,0),R=N=0,u.mode=2;break}if(u.flags=0,u.head&&(u.head.done=!1),!(1&u.wrap)||(((255&N)<<8)+(N>>8))%31){P.msg="incorrect header check",u.mode=30;break}if((15&N)!=8){P.msg="unknown compression method",u.mode=30;break}if(R-=4,o=8+(15&(N>>>=4)),u.wbits===0)u.wbits=o;else if(o>u.wbits){P.msg="invalid window size",u.mode=30;break}u.dmax=1<<o,P.adler=u.check=1,u.mode=512&N?10:12,R=N=0;break;case 2:for(;R<16;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}if(u.flags=N,(255&u.flags)!=8){P.msg="unknown compression method",u.mode=30;break}if(57344&u.flags){P.msg="unknown header flags set",u.mode=30;break}u.head&&(u.head.text=N>>8&1),512&u.flags&&(C[0]=255&N,C[1]=N>>>8&255,u.check=l(u.check,C,2,0)),R=N=0,u.mode=3;case 3:for(;R<32;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}u.head&&(u.head.time=N),512&u.flags&&(C[0]=255&N,C[1]=N>>>8&255,C[2]=N>>>16&255,C[3]=N>>>24&255,u.check=l(u.check,C,4,0)),R=N=0,u.mode=4;case 4:for(;R<16;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}u.head&&(u.head.xflags=255&N,u.head.os=N>>8),512&u.flags&&(C[0]=255&N,C[1]=N>>>8&255,u.check=l(u.check,C,2,0)),R=N=0,u.mode=5;case 5:if(1024&u.flags){for(;R<16;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}u.length=N,u.head&&(u.head.extra_len=N),512&u.flags&&(C[0]=255&N,C[1]=N>>>8&255,u.check=l(u.check,C,2,0)),R=N=0}else u.head&&(u.head.extra=null);u.mode=6;case 6:if(1024&u.flags&&(J<(Q=u.length)&&(Q=J),Q&&(u.head&&(o=u.head.extra_len-u.length,u.head.extra||(u.head.extra=new Array(u.head.extra_len)),r.arraySet(u.head.extra,V,F,Q,o)),512&u.flags&&(u.check=l(u.check,V,Q,F)),J-=Q,F+=Q,u.length-=Q),u.length))break t;u.length=0,u.mode=7;case 7:if(2048&u.flags){if(J===0)break t;for(Q=0;o=V[F+Q++],u.head&&o&&u.length<65536&&(u.head.name+=String.fromCharCode(o)),o&&Q<J;);if(512&u.flags&&(u.check=l(u.check,V,Q,F)),J-=Q,F+=Q,o)break t}else u.head&&(u.head.name=null);u.length=0,u.mode=8;case 8:if(4096&u.flags){if(J===0)break t;for(Q=0;o=V[F+Q++],u.head&&o&&u.length<65536&&(u.head.comment+=String.fromCharCode(o)),o&&Q<J;);if(512&u.flags&&(u.check=l(u.check,V,Q,F)),J-=Q,F+=Q,o)break t}else u.head&&(u.head.comment=null);u.mode=9;case 9:if(512&u.flags){for(;R<16;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}if(N!==(65535&u.check)){P.msg="header crc mismatch",u.mode=30;break}R=N=0}u.head&&(u.head.hcrc=u.flags>>9&1,u.head.done=!0),P.adler=u.check=0,u.mode=12;break;case 10:for(;R<32;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}P.adler=u.check=_(N),R=N=0,u.mode=11;case 11:if(u.havedict===0)return P.next_out=rt,P.avail_out=tt,P.next_in=F,P.avail_in=J,u.hold=N,u.bits=R,2;P.adler=u.check=1,u.mode=12;case 12:if(Z===5||Z===6)break t;case 13:if(u.last){N>>>=7&R,R-=7&R,u.mode=27;break}for(;R<3;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}switch(u.last=1&N,R-=1,3&(N>>>=1)){case 0:u.mode=14;break;case 1:if(q(u),u.mode=20,Z!==6)break;N>>>=2,R-=2;break t;case 2:u.mode=17;break;case 3:P.msg="invalid block type",u.mode=30}N>>>=2,R-=2;break;case 14:for(N>>>=7&R,R-=7&R;R<32;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}if((65535&N)!=(N>>>16^65535)){P.msg="invalid stored block lengths",u.mode=30;break}if(u.length=65535&N,R=N=0,u.mode=15,Z===6)break t;case 15:u.mode=16;case 16:if(Q=u.length){if(J<Q&&(Q=J),tt<Q&&(Q=tt),Q===0)break t;r.arraySet(st,V,F,Q,rt),J-=Q,F+=Q,tt-=Q,rt+=Q,u.length-=Q;break}u.mode=12;break;case 17:for(;R<14;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}if(u.nlen=257+(31&N),N>>>=5,R-=5,u.ndist=1+(31&N),N>>>=5,R-=5,u.ncode=4+(15&N),N>>>=4,R-=4,286<u.nlen||30<u.ndist){P.msg="too many length or distance symbols",u.mode=30;break}u.have=0,u.mode=18;case 18:for(;u.have<u.ncode;){for(;R<3;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}u.lens[L[u.have++]]=7&N,N>>>=3,R-=3}for(;u.have<19;)u.lens[L[u.have++]]=0;if(u.lencode=u.lendyn,u.lenbits=7,E={bits:u.lenbits},I=f(0,u.lens,0,19,u.lencode,0,u.work,E),u.lenbits=E.bits,I){P.msg="invalid code lengths set",u.mode=30;break}u.have=0,u.mode=19;case 19:for(;u.have<u.nlen+u.ndist;){for(;Y=(p=u.lencode[N&(1<<u.lenbits)-1])>>>16&255,B=65535&p,!((ft=p>>>24)<=R);){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}if(B<16)N>>>=ft,R-=ft,u.lens[u.have++]=B;else{if(B===16){for(g=ft+2;R<g;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}if(N>>>=ft,R-=ft,u.have===0){P.msg="invalid bit length repeat",u.mode=30;break}o=u.lens[u.have-1],Q=3+(3&N),N>>>=2,R-=2}else if(B===17){for(g=ft+3;R<g;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}R-=ft,o=0,Q=3+(7&(N>>>=ft)),N>>>=3,R-=3}else{for(g=ft+7;R<g;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}R-=ft,o=0,Q=11+(127&(N>>>=ft)),N>>>=7,R-=7}if(u.have+Q>u.nlen+u.ndist){P.msg="invalid bit length repeat",u.mode=30;break}for(;Q--;)u.lens[u.have++]=o}}if(u.mode===30)break;if(u.lens[256]===0){P.msg="invalid code -- missing end-of-block",u.mode=30;break}if(u.lenbits=9,E={bits:u.lenbits},I=f(y,u.lens,0,u.nlen,u.lencode,0,u.work,E),u.lenbits=E.bits,I){P.msg="invalid literal/lengths set",u.mode=30;break}if(u.distbits=6,u.distcode=u.distdyn,E={bits:u.distbits},I=f(m,u.lens,u.nlen,u.ndist,u.distcode,0,u.work,E),u.distbits=E.bits,I){P.msg="invalid distances set",u.mode=30;break}if(u.mode=20,Z===6)break t;case 20:u.mode=21;case 21:if(6<=J&&258<=tt){P.next_out=rt,P.avail_out=tt,P.next_in=F,P.avail_in=J,u.hold=N,u.bits=R,c(P,et),rt=P.next_out,st=P.output,tt=P.avail_out,F=P.next_in,V=P.input,J=P.avail_in,N=u.hold,R=u.bits,u.mode===12&&(u.back=-1);break}for(u.back=0;Y=(p=u.lencode[N&(1<<u.lenbits)-1])>>>16&255,B=65535&p,!((ft=p>>>24)<=R);){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}if(Y&&!(240&Y)){for($=ft,nt=Y,T=B;Y=(p=u.lencode[T+((N&(1<<$+nt)-1)>>$)])>>>16&255,B=65535&p,!($+(ft=p>>>24)<=R);){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}N>>>=$,R-=$,u.back+=$}if(N>>>=ft,R-=ft,u.back+=ft,u.length=B,Y===0){u.mode=26;break}if(32&Y){u.back=-1,u.mode=12;break}if(64&Y){P.msg="invalid literal/length code",u.mode=30;break}u.extra=15&Y,u.mode=22;case 22:if(u.extra){for(g=u.extra;R<g;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}u.length+=N&(1<<u.extra)-1,N>>>=u.extra,R-=u.extra,u.back+=u.extra}u.was=u.length,u.mode=23;case 23:for(;Y=(p=u.distcode[N&(1<<u.distbits)-1])>>>16&255,B=65535&p,!((ft=p>>>24)<=R);){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}if(!(240&Y)){for($=ft,nt=Y,T=B;Y=(p=u.distcode[T+((N&(1<<$+nt)-1)>>$)])>>>16&255,B=65535&p,!($+(ft=p>>>24)<=R);){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}N>>>=$,R-=$,u.back+=$}if(N>>>=ft,R-=ft,u.back+=ft,64&Y){P.msg="invalid distance code",u.mode=30;break}u.offset=B,u.extra=15&Y,u.mode=24;case 24:if(u.extra){for(g=u.extra;R<g;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}u.offset+=N&(1<<u.extra)-1,N>>>=u.extra,R-=u.extra,u.back+=u.extra}if(u.offset>u.dmax){P.msg="invalid distance too far back",u.mode=30;break}u.mode=25;case 25:if(tt===0)break t;if(Q=et-tt,u.offset>Q){if((Q=u.offset-Q)>u.whave&&u.sane){P.msg="invalid distance too far back",u.mode=30;break}pt=Q>u.wnext?(Q-=u.wnext,u.wsize-Q):u.wnext-Q,Q>u.length&&(Q=u.length),yt=u.window}else yt=st,pt=rt-u.offset,Q=u.length;for(tt<Q&&(Q=tt),tt-=Q,u.length-=Q;st[rt++]=yt[pt++],--Q;);u.length===0&&(u.mode=21);break;case 26:if(tt===0)break t;st[rt++]=u.length,tt--,u.mode=21;break;case 27:if(u.wrap){for(;R<32;){if(J===0)break t;J--,N|=V[F++]<<R,R+=8}if(et-=tt,P.total_out+=et,u.total+=et,et&&(P.adler=u.check=u.flags?l(u.check,st,et,rt-et):a(u.check,st,et,rt-et)),et=tt,(u.flags?N:_(N))!==u.check){P.msg="incorrect data check",u.mode=30;break}R=N=0}u.mode=28;case 28:if(u.wrap&&u.flags){for(;R<32;){if(J===0)break t;J--,N+=V[F++]<<R,R+=8}if(N!==(4294967295&u.total)){P.msg="incorrect length check",u.mode=30;break}R=N=0}u.mode=29;case 29:I=1;break t;case 30:I=-3;break t;case 31:return-4;case 32:default:return d}return P.next_out=rt,P.avail_out=tt,P.next_in=F,P.avail_in=J,u.hold=N,u.bits=R,(u.wsize||et!==P.avail_out&&u.mode<30&&(u.mode<27||Z!==4))&&it(P,P.output,P.next_out,et-P.avail_out)?(u.mode=31,-4):(ct-=P.avail_in,et-=P.avail_out,P.total_in+=ct,P.total_out+=et,u.total+=et,u.wrap&&et&&(P.adler=u.check=u.flags?l(u.check,st,et,P.next_out-et):a(u.check,st,et,P.next_out-et)),P.data_type=u.bits+(u.last?64:0)+(u.mode===12?128:0)+(u.mode===20||u.mode===15?256:0),(ct==0&&et===0||Z===4)&&I===w&&(I=-5),I)},i.inflateEnd=function(P){if(!P||!P.state)return d;var Z=P.state;return Z.window&&(Z.window=null),P.state=null,w},i.inflateGetHeader=function(P,Z){var u;return P&&P.state&&2&(u=P.state).wrap?((u.head=Z).done=!1,w):d},i.inflateSetDictionary=function(P,Z){var u,V=Z.length;return P&&P.state?(u=P.state).wrap!==0&&u.mode!==11?d:u.mode===11&&a(1,Z,V,0)!==u.check?-3:it(P,Z,V,V)?(u.mode=31,-4):(u.havedict=1,w):d},i.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(n,s,i){var r=n("../utils/common"),a=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],l=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],c=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],f=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];s.exports=function(y,m,w,d,x,h,v,_){var k,A,z,O,U,H,G,j,q,it=_.bits,P=0,Z=0,u=0,V=0,st=0,F=0,rt=0,J=0,tt=0,N=0,R=null,ct=0,et=new r.Buf16(16),Q=new r.Buf16(16),pt=null,yt=0;for(P=0;P<=15;P++)et[P]=0;for(Z=0;Z<d;Z++)et[m[w+Z]]++;for(st=it,V=15;1<=V&&et[V]===0;V--);if(V<st&&(st=V),V===0)return x[h++]=20971520,x[h++]=20971520,_.bits=1,0;for(u=1;u<V&&et[u]===0;u++);for(st<u&&(st=u),P=J=1;P<=15;P++)if(J<<=1,(J-=et[P])<0)return-1;if(0<J&&(y===0||V!==1))return-1;for(Q[1]=0,P=1;P<15;P++)Q[P+1]=Q[P]+et[P];for(Z=0;Z<d;Z++)m[w+Z]!==0&&(v[Q[m[w+Z]]++]=Z);if(H=y===0?(R=pt=v,19):y===1?(R=a,ct-=257,pt=l,yt-=257,256):(R=c,pt=f,-1),P=u,U=h,rt=Z=N=0,z=-1,O=(tt=1<<(F=st))-1,y===1&&852<tt||y===2&&592<tt)return 1;for(;;){for(G=P-rt,q=v[Z]<H?(j=0,v[Z]):v[Z]>H?(j=pt[yt+v[Z]],R[ct+v[Z]]):(j=96,0),k=1<<P-rt,u=A=1<<F;x[U+(N>>rt)+(A-=k)]=G<<24|j<<16|q|0,A!==0;);for(k=1<<P-1;N&k;)k>>=1;if(k!==0?(N&=k-1,N+=k):N=0,Z++,--et[P]==0){if(P===V)break;P=m[w+v[Z]]}if(st<P&&(N&O)!==z){for(rt===0&&(rt=st),U+=u,J=1<<(F=P-rt);F+rt<V&&!((J-=et[F+rt])<=0);)F++,J<<=1;if(tt+=1<<F,y===1&&852<tt||y===2&&592<tt)return 1;x[z=N&O]=st<<24|F<<16|U-h|0}}return N!==0&&(x[U+N]=P-rt<<24|64<<16|0),_.bits=st,0}},{"../utils/common":41}],51:[function(n,s,i){s.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(n,s,i){var r=n("../utils/common"),a=0,l=1;function c(p){for(var C=p.length;0<=--C;)p[C]=0}var f=0,y=29,m=256,w=m+1+y,d=30,x=19,h=2*w+1,v=15,_=16,k=7,A=256,z=16,O=17,U=18,H=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],G=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],j=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],q=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],it=new Array(2*(w+2));c(it);var P=new Array(2*d);c(P);var Z=new Array(512);c(Z);var u=new Array(256);c(u);var V=new Array(y);c(V);var st,F,rt,J=new Array(d);function tt(p,C,L,D,S){this.static_tree=p,this.extra_bits=C,this.extra_base=L,this.elems=D,this.max_length=S,this.has_stree=p&&p.length}function N(p,C){this.dyn_tree=p,this.max_code=0,this.stat_desc=C}function R(p){return p<256?Z[p]:Z[256+(p>>>7)]}function ct(p,C){p.pending_buf[p.pending++]=255&C,p.pending_buf[p.pending++]=C>>>8&255}function et(p,C,L){p.bi_valid>_-L?(p.bi_buf|=C<<p.bi_valid&65535,ct(p,p.bi_buf),p.bi_buf=C>>_-p.bi_valid,p.bi_valid+=L-_):(p.bi_buf|=C<<p.bi_valid&65535,p.bi_valid+=L)}function Q(p,C,L){et(p,L[2*C],L[2*C+1])}function pt(p,C){for(var L=0;L|=1&p,p>>>=1,L<<=1,0<--C;);return L>>>1}function yt(p,C,L){var D,S,M=new Array(v+1),K=0;for(D=1;D<=v;D++)M[D]=K=K+L[D-1]<<1;for(S=0;S<=C;S++){var W=p[2*S+1];W!==0&&(p[2*S]=pt(M[W]++,W))}}function ft(p){var C;for(C=0;C<w;C++)p.dyn_ltree[2*C]=0;for(C=0;C<d;C++)p.dyn_dtree[2*C]=0;for(C=0;C<x;C++)p.bl_tree[2*C]=0;p.dyn_ltree[2*A]=1,p.opt_len=p.static_len=0,p.last_lit=p.matches=0}function Y(p){8<p.bi_valid?ct(p,p.bi_buf):0<p.bi_valid&&(p.pending_buf[p.pending++]=p.bi_buf),p.bi_buf=0,p.bi_valid=0}function B(p,C,L,D){var S=2*C,M=2*L;return p[S]<p[M]||p[S]===p[M]&&D[C]<=D[L]}function $(p,C,L){for(var D=p.heap[L],S=L<<1;S<=p.heap_len&&(S<p.heap_len&&B(C,p.heap[S+1],p.heap[S],p.depth)&&S++,!B(C,D,p.heap[S],p.depth));)p.heap[L]=p.heap[S],L=S,S<<=1;p.heap[L]=D}function nt(p,C,L){var D,S,M,K,W=0;if(p.last_lit!==0)for(;D=p.pending_buf[p.d_buf+2*W]<<8|p.pending_buf[p.d_buf+2*W+1],S=p.pending_buf[p.l_buf+W],W++,D===0?Q(p,S,C):(Q(p,(M=u[S])+m+1,C),(K=H[M])!==0&&et(p,S-=V[M],K),Q(p,M=R(--D),L),(K=G[M])!==0&&et(p,D-=J[M],K)),W<p.last_lit;);Q(p,A,C)}function T(p,C){var L,D,S,M=C.dyn_tree,K=C.stat_desc.static_tree,W=C.stat_desc.has_stree,X=C.stat_desc.elems,ot=-1;for(p.heap_len=0,p.heap_max=h,L=0;L<X;L++)M[2*L]!==0?(p.heap[++p.heap_len]=ot=L,p.depth[L]=0):M[2*L+1]=0;for(;p.heap_len<2;)M[2*(S=p.heap[++p.heap_len]=ot<2?++ot:0)]=1,p.depth[S]=0,p.opt_len--,W&&(p.static_len-=K[2*S+1]);for(C.max_code=ot,L=p.heap_len>>1;1<=L;L--)$(p,M,L);for(S=X;L=p.heap[1],p.heap[1]=p.heap[p.heap_len--],$(p,M,1),D=p.heap[1],p.heap[--p.heap_max]=L,p.heap[--p.heap_max]=D,M[2*S]=M[2*L]+M[2*D],p.depth[S]=(p.depth[L]>=p.depth[D]?p.depth[L]:p.depth[D])+1,M[2*L+1]=M[2*D+1]=S,p.heap[1]=S++,$(p,M,1),2<=p.heap_len;);p.heap[--p.heap_max]=p.heap[1],function(at,mt){var kt,Pt,Kt,Ct,Xt,Se,It=mt.dyn_tree,Zt=mt.max_code,tn=mt.stat_desc.static_tree,_i=mt.stat_desc.has_stree,yi=mt.stat_desc.extra_bits,$s=mt.stat_desc.extra_base,Re=mt.stat_desc.max_length,en=0;for(Ct=0;Ct<=v;Ct++)at.bl_count[Ct]=0;for(It[2*at.heap[at.heap_max]+1]=0,kt=at.heap_max+1;kt<h;kt++)Re<(Ct=It[2*It[2*(Pt=at.heap[kt])+1]+1]+1)&&(Ct=Re,en++),It[2*Pt+1]=Ct,Zt<Pt||(at.bl_count[Ct]++,Xt=0,$s<=Pt&&(Xt=yi[Pt-$s]),Se=It[2*Pt],at.opt_len+=Se*(Ct+Xt),_i&&(at.static_len+=Se*(tn[2*Pt+1]+Xt)));if(en!==0){do{for(Ct=Re-1;at.bl_count[Ct]===0;)Ct--;at.bl_count[Ct]--,at.bl_count[Ct+1]+=2,at.bl_count[Re]--,en-=2}while(0<en);for(Ct=Re;Ct!==0;Ct--)for(Pt=at.bl_count[Ct];Pt!==0;)Zt<(Kt=at.heap[--kt])||(It[2*Kt+1]!==Ct&&(at.opt_len+=(Ct-It[2*Kt+1])*It[2*Kt],It[2*Kt+1]=Ct),Pt--)}}(p,C),yt(M,ot,p.bl_count)}function o(p,C,L){var D,S,M=-1,K=C[1],W=0,X=7,ot=4;for(K===0&&(X=138,ot=3),C[2*(L+1)+1]=65535,D=0;D<=L;D++)S=K,K=C[2*(D+1)+1],++W<X&&S===K||(W<ot?p.bl_tree[2*S]+=W:S!==0?(S!==M&&p.bl_tree[2*S]++,p.bl_tree[2*z]++):W<=10?p.bl_tree[2*O]++:p.bl_tree[2*U]++,M=S,ot=(W=0)===K?(X=138,3):S===K?(X=6,3):(X=7,4))}function I(p,C,L){var D,S,M=-1,K=C[1],W=0,X=7,ot=4;for(K===0&&(X=138,ot=3),D=0;D<=L;D++)if(S=K,K=C[2*(D+1)+1],!(++W<X&&S===K)){if(W<ot)for(;Q(p,S,p.bl_tree),--W!=0;);else S!==0?(S!==M&&(Q(p,S,p.bl_tree),W--),Q(p,z,p.bl_tree),et(p,W-3,2)):W<=10?(Q(p,O,p.bl_tree),et(p,W-3,3)):(Q(p,U,p.bl_tree),et(p,W-11,7));M=S,ot=(W=0)===K?(X=138,3):S===K?(X=6,3):(X=7,4)}}c(J);var E=!1;function g(p,C,L,D){et(p,(f<<1)+(D?1:0),3),function(S,M,K,W){Y(S),W&&(ct(S,K),ct(S,~K)),r.arraySet(S.pending_buf,S.window,M,K,S.pending),S.pending+=K}(p,C,L,!0)}i._tr_init=function(p){E||(function(){var C,L,D,S,M,K=new Array(v+1);for(S=D=0;S<y-1;S++)for(V[S]=D,C=0;C<1<<H[S];C++)u[D++]=S;for(u[D-1]=S,S=M=0;S<16;S++)for(J[S]=M,C=0;C<1<<G[S];C++)Z[M++]=S;for(M>>=7;S<d;S++)for(J[S]=M<<7,C=0;C<1<<G[S]-7;C++)Z[256+M++]=S;for(L=0;L<=v;L++)K[L]=0;for(C=0;C<=143;)it[2*C+1]=8,C++,K[8]++;for(;C<=255;)it[2*C+1]=9,C++,K[9]++;for(;C<=279;)it[2*C+1]=7,C++,K[7]++;for(;C<=287;)it[2*C+1]=8,C++,K[8]++;for(yt(it,w+1,K),C=0;C<d;C++)P[2*C+1]=5,P[2*C]=pt(C,5);st=new tt(it,H,m+1,w,v),F=new tt(P,G,0,d,v),rt=new tt(new Array(0),j,0,x,k)}(),E=!0),p.l_desc=new N(p.dyn_ltree,st),p.d_desc=new N(p.dyn_dtree,F),p.bl_desc=new N(p.bl_tree,rt),p.bi_buf=0,p.bi_valid=0,ft(p)},i._tr_stored_block=g,i._tr_flush_block=function(p,C,L,D){var S,M,K=0;0<p.level?(p.strm.data_type===2&&(p.strm.data_type=function(W){var X,ot=4093624447;for(X=0;X<=31;X++,ot>>>=1)if(1&ot&&W.dyn_ltree[2*X]!==0)return a;if(W.dyn_ltree[18]!==0||W.dyn_ltree[20]!==0||W.dyn_ltree[26]!==0)return l;for(X=32;X<m;X++)if(W.dyn_ltree[2*X]!==0)return l;return a}(p)),T(p,p.l_desc),T(p,p.d_desc),K=function(W){var X;for(o(W,W.dyn_ltree,W.l_desc.max_code),o(W,W.dyn_dtree,W.d_desc.max_code),T(W,W.bl_desc),X=x-1;3<=X&&W.bl_tree[2*q[X]+1]===0;X--);return W.opt_len+=3*(X+1)+5+5+4,X}(p),S=p.opt_len+3+7>>>3,(M=p.static_len+3+7>>>3)<=S&&(S=M)):S=M=L+5,L+4<=S&&C!==-1?g(p,C,L,D):p.strategy===4||M===S?(et(p,2+(D?1:0),3),nt(p,it,P)):(et(p,4+(D?1:0),3),function(W,X,ot,at){var mt;for(et(W,X-257,5),et(W,ot-1,5),et(W,at-4,4),mt=0;mt<at;mt++)et(W,W.bl_tree[2*q[mt]+1],3);I(W,W.dyn_ltree,X-1),I(W,W.dyn_dtree,ot-1)}(p,p.l_desc.max_code+1,p.d_desc.max_code+1,K+1),nt(p,p.dyn_ltree,p.dyn_dtree)),ft(p),D&&Y(p)},i._tr_tally=function(p,C,L){return p.pending_buf[p.d_buf+2*p.last_lit]=C>>>8&255,p.pending_buf[p.d_buf+2*p.last_lit+1]=255&C,p.pending_buf[p.l_buf+p.last_lit]=255&L,p.last_lit++,C===0?p.dyn_ltree[2*L]++:(p.matches++,C--,p.dyn_ltree[2*(u[L]+m+1)]++,p.dyn_dtree[2*R(C)]++),p.last_lit===p.lit_bufsize-1},i._tr_align=function(p){et(p,2,3),Q(p,A,it),function(C){C.bi_valid===16?(ct(C,C.bi_buf),C.bi_buf=0,C.bi_valid=0):8<=C.bi_valid&&(C.pending_buf[C.pending++]=255&C.bi_buf,C.bi_buf>>=8,C.bi_valid-=8)}(p)}},{"../utils/common":41}],53:[function(n,s,i){s.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(n,s,i){(function(r){(function(a,l){if(!a.setImmediate){var c,f,y,m,w=1,d={},x=!1,h=a.document,v=Object.getPrototypeOf&&Object.getPrototypeOf(a);v=v&&v.setTimeout?v:a,c={}.toString.call(a.process)==="[object process]"?function(z){process.nextTick(function(){k(z)})}:function(){if(a.postMessage&&!a.importScripts){var z=!0,O=a.onmessage;return a.onmessage=function(){z=!1},a.postMessage("","*"),a.onmessage=O,z}}()?(m="setImmediate$"+Math.random()+"$",a.addEventListener?a.addEventListener("message",A,!1):a.attachEvent("onmessage",A),function(z){a.postMessage(m+z,"*")}):a.MessageChannel?((y=new MessageChannel).port1.onmessage=function(z){k(z.data)},function(z){y.port2.postMessage(z)}):h&&"onreadystatechange"in h.createElement("script")?(f=h.documentElement,function(z){var O=h.createElement("script");O.onreadystatechange=function(){k(z),O.onreadystatechange=null,f.removeChild(O),O=null},f.appendChild(O)}):function(z){setTimeout(k,0,z)},v.setImmediate=function(z){typeof z!="function"&&(z=new Function(""+z));for(var O=new Array(arguments.length-1),U=0;U<O.length;U++)O[U]=arguments[U+1];var H={callback:z,args:O};return d[w]=H,c(w),w++},v.clearImmediate=_}function _(z){delete d[z]}function k(z){if(x)setTimeout(k,0,z);else{var O=d[z];if(O){x=!0;try{(function(U){var H=U.callback,G=U.args;switch(G.length){case 0:H();break;case 1:H(G[0]);break;case 2:H(G[0],G[1]);break;case 3:H(G[0],G[1],G[2]);break;default:H.apply(l,G)}})(O)}finally{_(z),x=!1}}}}function A(z){z.source===a&&typeof z.data=="string"&&z.data.indexOf(m)===0&&k(+z.data.slice(m.length))}})(typeof self>"u"?r===void 0?this:r:self)}).call(this,typeof cn<"u"?cn:typeof self<"u"?self:typeof window<"u"?window:{})},{}]},{},[10])(10)})})(gi);var Tn=gi.exports;class Ds{settings;app;api;constructor(e,n){this.app=e,this.settings=n,this.api=new Ce(n.token)}async getPluginUrl(e,n){const s=Date.now(),i=localStorage.getItem("pluginUrl");if(console.log(i,"cachedPluginUrl"),i){const c=JSON.parse(i);if(c.name===e&&c.version===n&&s<c.expiryTime)return c.url}const r=await this.getPluginDownloadUrl(e,n),a=s+15*60*1e3,l={name:e,version:n,url:r,expiryTime:a};return localStorage.setItem("pluginUrl",JSON.stringify(l)),r}async getPluginDownloadUrl(e,n){const s=await this.api.getDownloadUrl(e,n);if(s.startsWith("http"))return s;throw new lt.Notice(`${JSON.parse(s).message}`),new Error(`${JSON.parse(s).message}`)}async downloadPluginToPluginFolder(e,n){const s=await this.getPluginUrl(e,n);if(!s)return new lt.Notice(`获取${e}插件下载地址失败！`),!1;if(app.plugins.manifests[e])return new lt.Notice(`插件${e}已经安装，无需重复安装！`),!1;try{const i=await lt.requestUrl({url:s,method:"GET"}),r=lt.normalizePath(app.vault.configDir+"/plugins/"+e)+"/",a=this.app.vault.adapter,l=await Tn.loadAsync(i.arrayBuffer);(await a.exists(r)===!1||!await a.exists(r+"manifest.json"))&&await a.mkdir(r);try{for(const[c,f]of Object.entries(l.files)){const y=r+c,m=y.substring(0,y.lastIndexOf("/"));if(await a.mkdir(m),!f.dir){const w=await f.async("string");await a.write(y,w)}}}catch{throw new lt.Notice(`插件${e}解压失败！请联系开发者处理！`,5e3),a.rmdir(r,!0),Error(`插件${e}解压失败！`)}return new lt.Notice(`插件${e}安装成功！
请在插件列表中启用`,5e3),await app.plugins.loadManifests(),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return console.log(i),new lt.Notice(`插件${e}安装失败！${i}`,5e3),!1}}async updatePluginToExistPluginFolder(e,n){const s=await this.getPluginDownloadUrl(e,n);if(!s)throw new lt.Notice(`获取${e}插件下载地址失败！`),new Error(`获取${e}插件下载地址失败！`);if(e!="obsidian-pkmer"&&!app.plugins.manifests[e])return new lt.Notice(`插件${e}未安装！`),!1;try{let i=lt.normalizePath(app.vault.configDir+"/plugins/"+e)+"/";e=="obsidian-pkmer"&&(i=lt.normalizePath(app.vault.configDir+"/plugins/")+"/");const r=this.app.vault.adapter;if(await r.exists(i)===!1&&!await r.exists(i+"manifest.json"))throw new Error(`插件${e}未安装！`);const a=await lt.requestUrl({url:s,method:"GET"}),l=await Tn.loadAsync(a.arrayBuffer);try{for(const[c,f]of Object.entries(l.files)){const y=i+c,m=y.substring(0,y.lastIndexOf("/"));if(await r.mkdir(m),!f.dir){const w=await f.async("string");await r.write(y,w)}}}catch{throw new lt.Notice(`插件${e}解压失败！得手动清除残留文件！`),Error(`插件${e}解压失败！`)}return new lt.Notice(`插件${e}更新成功！
 请在插件列表中重新启用`),await app.plugins.loadManifests(),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return new lt.Notice(`插件${e}更新失败！${i}`),!1}}}const Nl={class:"text-right pkmer-toolbar"},jl={class:"z-10 flex w-3/4 p-4 m-auto my-4 top-20 bg-yellow-200/50"},Hl=b("div",{class:"mr-2"},"⚠️",-1),Wl=b("span",{class:"font-bold"},"提示：",-1),wi=pe({__name:"Head",props:{isLogin:{type:Boolean},settings:{},app:{}},async setup(t){let e,n;const s=t,i=ht(0),r=ht(""),a=ht(),l=s.isLogin,c=new Ce(s.settings.token),f=new Ds(s.app,s.settings);a.value=([e,n]=bn(()=>c.getPkmerVersion()),e=await e,n(),e),l&&(i.value=([e,n]=bn(()=>c.getDownloadCount()),e=await e,n(),e)),r.value=s.app.plugins.manifests.pkmer.version;const y=Ot(()=>{if(a.value!=r.value)return"发现新版本:"+a.value;if(a.value==r.value)return"Ver:"+r.value}),m=async()=>{a.value==r.value||(new lt.Notice("正在更新插件，请稍后...",3e3),!await f.updatePluginToExistPluginFolder("obsidian-pkmer",a.value))||s.app.workspace.activeLeaf.rebuildView()},w=async()=>{l&&(localStorage.removeItem("pluginList"),localStorage.removeItem("pluginListExpiry"),localStorage.removeItem("themeList"),localStorage.removeItem("themeListExpiry")),s.app.workspace.activeLeaf.rebuildView()},d=()=>{s.app.setting.open(),s.app.setting.openTabById("pkmer")};return(x,h)=>(gt(),wt(Bt,null,[b("div",Nl,[b("span",{onClick:m,class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-yellow-600 text-white shadow-xl shadow-primary-500/20"},Tt(y.value),1),St(b("span",{class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-yellow-600 text-white shadow-xl shadow-primary-500/20"}," 剩余次数 "+Tt(i.value),513),[[Et,$t(l)]]),b("span",{onClick:w,class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-green-500 text-white shadow-xl shadow-primary-500/20"}," 刷新 "),b("span",{class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-primary-500 text-white shadow-xl shadow-primary-500/20",onClick:d}," 设置 ")]),St(b("div",jl,[b("div",{class:"flex items-center"},[Hl,b("div",null,[Wl,b("span",null,[Mt("当前是未登录状态，仅展示下载前20的热门内容，请"),b("button",{class:"bg-yellow-600 w-20 h-6 inline-block px-1 py-1 m-1 font-sans text-xs rounded-lg",onClick:d}," 点此登录"),Mt("后获取全部内容。")])])])],512),[[Et,!$t(l)]])],64))}}),Zl={"data-pagefind-body":"",class:"w-full"},Vl={class:"flex items-center justify-between w-full px-2 py-4 mx-auto font-sans search first-letter:"},Kl={class:"flex flex-wrap items-center justify-center w-full first-letter:mx-auto"},Gl={class:"w-full lg:max-w-[60vw] mx-auto py-3 md:px-6"},ql={class:"flex-wrap relative top-0 z-30 flex items-center w-full overflow-x-auto divide-x rounded dark:bg-muted-800 border-muted-200 dark:border-muted-700 divide-muted-200 dark:divide-muted-700 dark:shadow-muted-900/30 md:overflow-x-visible"},Jl={class:"widget-item"},Yl=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"solar:round-sort-vertical-line-duotone",class:"w-6 h-6 iconify iconify--solar"},[b("g",{fill:"none",stroke:"currentColor","stroke-width":"1.5"},[b("circle",{cx:"12",cy:"12",r:"10",opacity:".5"}),b("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M9.5 8v8m0 0L7 13.25M9.5 16l2.5-2.75M14.5 16V8m0 0L12 10.75M14.5 8l2.5 2.75"})])])],-1),Xl=[Yl],Ql={class:"widget-item"},tc=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"ic:sharp-update",class:"w-6 h-6 iconify iconify--ic"},[b("path",{fill:"currentColor",d:"M11 8v5l4.25 2.52l.77-1.28l-3.52-2.09V8H11zm10 2V3l-2.64 2.64A8.937 8.937 0 0 0 12 3a9 9 0 1 0 9 9h-2c0 3.86-3.14 7-7 7s-7-3.14-7-7s3.14-7 7-7c1.93 0 3.68.79 4.95 2.05L14 10h7z"})])],-1),ec=[tc],nc={class:"widget-item"},sc=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-6 h-6 iconify iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M2 17L5.75 7H7.9l3.75 10H9.6l-.85-2.4H4.9L4.1 17H2Zm3.5-4.1h2.6L6.9 9.15h-.15L5.5 12.9Zm8.2 4.1v-1.9l5.05-6.3H13.9V7h7.05v1.9l-5 6.3H21V17h-7.3ZM9 5l3-3l3 3H9Zm3 17l-3-3h6l-3 3Z"})])],-1),rc=[sc],ic={class:"widget-item"},oc=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:whatshot",class:"iconify w-6 h-6 iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M12 22q-2.5 0-4.588-1.1T3.95 17.95l4.1-4.1l3 2.5L16 11.4V14h2V8h-6v2h2.6l-3.65 3.65l-3-2.5L2.9 16.2q-.425-.95-.662-2.013T2 12q0-2.075.788-3.9t2.137-3.175q1.35-1.35 3.175-2.137T12 2q2.075 0 3.9.788t3.175 2.137q1.35 1.35 2.138 3.175T22 12q0 2.075-.788 3.9t-2.137 3.175q-1.35 1.35-3.175 2.138T12 22Z"})])],-1),ac=[oc],lc={class:"widget-item"},cc=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-5 h-5 iconify iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M4.5 11a8.5 8.5 0 1 1 8.188 8.494a6.47 6.47 0 0 1-.68 1.457c.327.033.658.049.992.049c5.523 0 10-4.477 10-10S18.523 1 13 1S3 5.477 3 11c0 .334.016.665.048.991a6.51 6.51 0 0 1 1.458-.68A8.65 8.65 0 0 1 4.5 11Zm8.493-5.352a.75.75 0 0 0-1.493.102v6l.007.102a.75.75 0 0 0 .743.648h4l.102-.007A.75.75 0 0 0 16.25 11H13V5.75l-.007-.102ZM1 17.5a5.5 5.5 0 0 1 5-5.477v5.77l-1.646-1.647a.5.5 0 0 0-.708.708l2.5 2.5a.5.5 0 0 0 .708 0l2.5-2.5a.5.5 0 0 0-.708-.708L7 17.793v-5.77A5.5 5.5 0 1 1 1 17.5Zm8.5 3A.5.5 0 0 0 9 20H4a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5Z"})])],-1),uc={class:"num"},dc=["tooltip"],fc=b("option",{class:"text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800",value:"default"}," 默认 ",-1),hc=b("option",{class:"text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800",value:"mobile"}," 移动端 ",-1),pc=b("option",{class:"text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800",value:"desktop"}," 仅桌面端 ",-1),mc=[fc,hc,pc],gc={class:"relative w-full"},wc={class:"relative group"},vc=["value"],_c=b("div",{class:"absolute top-0 left-0 hidden md:flex items-center justify-center w-16 h-8 transition-colors duration-300 text-muted-400 group-focus-within:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"lucide:search",class:"w-4 h-4 iconify iconify--lucide"},[b("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2"},[b("circle",{cx:"11",cy:"11",r:"8"}),b("path",{d:"m21 21l-4.3-4.3"})])])],-1),yc={class:"text-right"},bc=b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",viewBox:"0 0 32 32"},[b("path",{fill:"white",d:"M16 2C8.2 2 2 8.2 2 16s6.2 14 14 14s14-6.2 14-14S23.8 2 16 2m5.4 21L16 17.6L10.6 23L9 21.4l5.4-5.4L9 10.6L10.6 9l5.4 5.4L21.4 9l1.6 1.6l-5.4 5.4l5.4 5.4z"})],-1),xc=[bc],kc={class:"w-full bg-muted-100 dark:bg-muted-1000"},Cc={class:"w-full mx-auto max-w-7xl"},Sc={class:"flex items-center w-full overflow-hidden"},Tc={class:"flex flex-col justify-between w-full h-full md:px-6 pt-4 pb-16"},Ic={class:"w-full max-w-[90vw] mx-auto space-y-4 text-center"},Ec={class:"flex flex-col gap-12 py-12"},Ac={class:"flex items-center justify-center w-full p-6 -m-3"},Pc={class:"w-full max-w-[210px] pt-16"},Oc=b("div",null,"Load More",-1),zc=[Oc],Lc={class:"fixed inset-0 z-30 flex items-center justify-center overflow-auto bg-black bg-opacity-50"},Bc={class:"flex items-center justify-between"},Dc=b("h5",{class:"mr-3 max-w-none"},null,-1),$c=b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor"},[b("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M6 18L18 6M6 6l12 12"})],-1),Uc=[$c],Rc={class:"body-font"},Mc={class:"container px-5 py-4 mx-auto"},Fc={class:"mb-6 text-2xl font-medium text-center title-font"},Nc=b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"line-md:downloading-loop",class:"w-6 h-6 iconify iconify--line-md"},[b("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-width":"2"},[b("path",{"stroke-dasharray":"2 4","stroke-dashoffset":"6",d:"M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21"},[b("animate",{attributeName:"stroke-dashoffset",dur:"0.6s",repeatCount:"indefinite",values:"6;0"})]),b("path",{"stroke-dasharray":"30","stroke-dashoffset":"30",d:"M12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.1s",dur:"0.3s",values:"30;0"})]),b("path",{"stroke-dasharray":"10","stroke-dashoffset":"10",d:"M12 8v7.5"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.5s",dur:"0.2s",values:"10;0"})]),b("path",{"stroke-dasharray":"6","stroke-dashoffset":"6",d:"M12 15.5l3.5 -3.5M12 15.5l-3.5 -3.5"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.7s",dur:"0.2s",values:"6;0"})])])],-1),jc=b("div",null,[b("p",{class:"mb-4 text-base leading-relaxed"}," 注意，安装和更新操作不可逆，请确认后再操作。 ")],-1),Hc={class:"flex-wrap block -mx-4 -mt-4 space-y-6 md:flex sm:-m-4 md:-mb-10 md:space-y-0"},Wc={class:"flex md:p-4 md:w-1/2"},Zc={class:"flex-grow"},Vc=pe({__name:"PluginMarket",props:{settings:{},app:{},tab:{}},async setup(t){let e,n;const s=t,i=ht(""),r=ht(""),a=ht(!1),l=ht();let c=ht(24),f=ht(1);const y=ht(!0),m=ht("default"),w=new Ce(s.settings.token),d=new Ds(s.app,s.settings),x=ht(!1),h=([e,n]=bn(()=>w.isUserLogin()),e=await e,n(),e),v=async()=>{const Y=await w.getPkmerDocs();if(h)try{l.value=await w.getPluginList(),Array.isArray(l.value)?l.value.forEach(B=>{const $=Y.find(o=>o.slug==B.id);$&&(B.contentUrl=`https://pkmer.cn/show/${$.uid}`);const nt=Y.find(o=>o.slug.includes(B.id+"_readme"));nt&&(B.readme_zh=`https://pkmer.cn/show/${nt.uid}`);const T=s.app.plugins.manifests;B.isInstalled=T[B.id]!==void 0,B.isOutdated=B.isInstalled&&T[B.id].version!==B.version}):l.value=[]}catch(B){console.error("Error loading plugins:",B)}else l.value=await w.getTop20Plugins(),Array.isArray(l.value)?l.value.forEach(B=>{const $=Y.find(o=>o.slug==B.id);$&&(B.contentUrl=`https://pkmer.cn/show/${$.uid}`);const nt=Y.find(o=>o.slug.includes(B.id+"_readme"));nt&&(B.readme_zh=`https://pkmer.cn/show/${nt.uid}`);const T=s.app.plugins.manifests[B.id];B.isInstalled=T!==void 0,B.isOutdated=T?.version!==B.version}):l.value=[]},_=Ot(()=>{if(l.value)return l.value.filter($=>$.isInstalled===!0).length}),k=Ot(()=>l.value?l.value.filter($=>$.isOutdated===!0).length:!1),A=()=>{x.value=!0,N()},z=ht(""),O=ht("all"),U=ht(""),H=ht(""),G=async()=>{a.value=!1,new lt.Notice("正在下载插件，请稍后...",3e3),await d.downloadPluginToPluginFolder(U.value,H.value)&&(l.value=l.value.map(B=>(B.id==U.value&&(B.isInstalled=!0),B)))},j=async()=>{a.value=!1,new lt.Notice("正在更新插件，请稍后...",3e3),await d.updatePluginToExistPluginFolder(U.value,H.value)&&(l.value=l.value.map(B=>(B.id==U.value&&(B.isOutdated=!1),B)))},q=()=>{a.value=!1},it=Y=>{O.value=Y},P=(Y,B,$)=>{a.value=!0,U.value=B,H.value=$,Y==="download"?y.value=!0:y.value=!1},Z=()=>{const Y=window.location.hash.slice(1);if(Y){const B=decodeURIComponent(Y);O.value=B}},u=ht();Dn(async()=>{if(x.value=!1,Z(),await v(),i.value="pkmerDownloadCount",r.value="asc",app.workspace.on("resize",V),u.value=s.app.workspace.activeLeaf.view.leaf.width,s.tab){const Y=JSON.parse(s.tab);Y.type=="updated"&&Q(),Y.type=="installed"&&et()}});const V=()=>{u.value=s.app.workspace.activeLeaf.view.leaf.width};Xe(()=>{localStorage.removeItem("pkmer-update-tab")});const st=Y=>{lt.debounce(()=>{z.value=Y.target.value},800)()},F=Ot(()=>{const Y=z.value.toLowerCase().trim();let B=l.value;return m.value==="mobile"?B=B.filter($=>!$.isDesktopOnly):m.value==="desktop"&&(B=B.filter($=>$.isDesktopOnly)),Y.length<1?B:B.filter($=>$.id.toLowerCase().includes(Y)||$.name.toLowerCase().includes(Y)||$.author.toLowerCase().includes(Y)||$.description?.toLowerCase().includes(Y)||$.chineseDescription?.toLowerCase().includes(Y)||$.tags?.toLowerCase().includes(Y))}),rt=Ot(()=>Math.ceil(F.value?.length/c.value)),J=Ot(()=>f.value<rt.value);function tt(){i.value="pkmerDownloadCount",r.value=r.value==="asc"?"desc":"asc"}function N(){i.value="downloadCount",r.value=r.value==="asc"?"desc":"asc"}function R(){i.value="updateTime",r.value=r.value==="asc"?"desc":"asc"}function ct(){i.value="fileName",r.value=r.value==="asc"?"desc":"asc"}function et(){i.value="installed",r.value=r.value==="asc"?"desc":"asc"}function Q(){i.value="updated",r.value=r.value==="asc"?"desc":"asc"}const pt=Ot(()=>{let Y=[];return O.value=="all"?i.value==="downloadCount"?r.value==="asc"?Y=F.value.sort((B,$)=>B.downloadCount-$.downloadCount):Y=F.value.sort((B,$)=>$.downloadCount-B.downloadCount):i.value==="updateTime"?r.value==="asc"?Y=F.value.sort((B,$)=>new Date(B.pluginUpdatedTime).getTime()-new Date($.pluginUpdatedTime).getTime()):Y=F.value.sort((B,$)=>new Date($.pluginUpdatedTime).getTime()-new Date(B.pluginUpdatedTime).getTime()):i.value==="fileName"?r.value==="asc"?Y=F.value.sort((B,$)=>B.name.localeCompare($.name)):Y=F.value.sort((B,$)=>$.name.localeCompare(B.name)):i.value==="installed"?Y=F.value.filter(B=>B.isInstalled):i.value==="updated"?Y=F.value.filter(B=>B.isOutdated):i.value==="pkmerDownloadCount"?r.value==="asc"?Y=F.value.sort((B,$)=>B.id==="obsidian-memos"?-1:$.id==="obsidian-memos"?1:B.source==="community"&&$.source!=="community"?-1:B.source!=="community"&&$.source==="community"?1:$.pkmerDownloadCount-B.pkmerDownloadCount):Y=F.value.sort((B,$)=>B.source==="community"&&$.source!=="community"?-1:B.source!=="community"&&$.source==="community"?1:B.pkmerDownloadCount-$.pkmerDownloadCount):Y=F.value?.slice(0,f.value*c.value):(Y=F.value.filter(B=>B.tags?.includes(O.value)),i.value==="downloadCount"?r.value==="asc"?Y=Y.sort((B,$)=>B.downloadCount-$.downloadCount):Y=Y.sort((B,$)=>$.downloadCount-B.downloadCount):i.value==="updateTime"?r.value==="asc"?Y=Y.sort((B,$)=>new Date(B.pluginUpdatedTime).getTime()-new Date($.pluginUpdatedTime).getTime()):Y=Y.sort((B,$)=>new Date($.pluginUpdatedTime).getTime()-new Date(B.pluginUpdatedTime).getTime()):i.value==="fileName"?r.value==="asc"?Y=Y.sort((B,$)=>B.name.localeCompare($.name)):Y=Y.sort((B,$)=>$.name.localeCompare(B.name)):i.value==="pkmerDownloadCount"&&(r.value==="asc"?Y=Y.sort((B,$)=>B.pkmerDownloadCount-$.pkmerDownloadCount):Y=Y.sort((B,$)=>$.pkmerDownloadCount-B.pkmerDownloadCount))),Y?.slice(0,f.value*c.value)}),yt=Ot(()=>Array.isArray(F.value)?F.value:[]),ft=()=>{const Y=f.value*c.value,B=Y+c.value,$=pt.value?.slice(Y,B);f.value++,l.value=[...l.value,...$]};return(Y,B)=>(gt(),wt(Bt,null,[Lt(wi,{settings:s.settings,isLogin:$t(h),app:s.app},null,8,["settings","isLogin","app"]),b("main",Zl,[b("div",Vl,[b("div",Kl,[b("div",Gl,[b("div",ql,[b("div",Jl,[b("button",{class:At([{active:i.value=="downloadCount"},"flex items-center px-2 font-sans transition-colors duration-300 group whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按下载量",flow:"down",onClick:N},Xl,2)]),b("div",Ql,[b("button",{class:At([{active:i.value=="updateTime"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按更新时间",flow:"down",onClick:R},ec,2)]),b("div",nc,[b("button",{class:At([{active:i.value=="fileName"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按文件名排序",flow:"down",onClick:ct},rc,2)]),b("div",ic,[b("button",{class:At(["active items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700",{active:i.value=="pkmerDownloadCount"}]),tooltip:"按插件热度",flow:"down",onClick:tt},ac,2)]),b("div",lc,[b("button",{class:At([{active:i.value=="installed"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"筛选已安装插件",flow:"down",onClick:et},[cc,b("span",uc,Tt(_.value),1)],2)]),b("div",{class:"widget-item",tooltip:m.value=="mobile"?"支持移动端的插件":m.value=="desktop"?"仅支持桌面端的插件":"所有终端"},[St(b("select",{"onUpdate:modelValue":B[0]||(B[0]=$=>m.value=$),class:"block border px-2 w-18 text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800 rounded-md shadow-sm focus:outline-none"},mc,512),[[Na,m.value]])],8,dc),b("div",gc,[b("div",wc,[b("input",{type:"text",class:"w-full h-8 pl-2 md:pl-16 pr-5 font-sans text-base leading-5 transition-all duration-300 text-muted-600 focus:border-muted-300 focus:shadow-lg focus:shadow-muted-300/50 dark:focus:shadow-muted-800/50 placeholder:text-muted-300 dark:placeholder:text-muted-500 dark:bg-muted-800 dark:text-muted-200 dark:border-muted-700 dark:focus:border-muted-600 tw-accessibility",placeholder:"Search plugins...",onInput:st,value:z.value},null,40,vc),_c])])])])])]),b("div",yc,[St(b("button",{onClick:Q,class:"inline-block w-full font-sans text-xs px-3 m-1 rounded-lg bg-green-600 text-white shadow-xl shadow-primary-500/20"},[Mt(" 发现 "+Tt(k.value)+" 个插件更新！【点我查看】 ",1),b("button",{onClick:Nn(A,["stop"]),class:"ml-2 px-3 shadow-none"},xc)],512),[[Et,k.value&&!x.value]])]),b("section",kc,[b("div",Cc,[b("div",Sc,[b("div",Tc,[b("div",Ic,[Lt(Xa,{"active-category":O.value,pluginList:yt.value,onUpdateActiveCategory:it},null,8,["active-category","pluginList","onUpdateActiveCategory"])]),b("div",Ec,[b("div",{class:At(["grid gap-6 -m-3 ptablet:grid-cols-2 ltablet:grid-cols-3 lg:grid-cols-3",{"!grid-cols-1":u.value<=768&&u.value>0,"!grid-cols-2":u.value>768&&u.value<1024,"!grid-cols-3":u.value>1024}])},[(gt(!0),wt(Bt,null,$n(pt.value,$=>(gt(),wt("div",{key:$.id},[Lt(Fl,{app:s.app,"plugin-info":$,isLogin:$t(h),onDownloadUpdatePlugin:P},null,8,["app","plugin-info","isLogin","onDownloadUpdatePlugin"])]))),128))],2),b("div",Ac,[b("div",Pc,[J.value?(gt(),wt("button",{key:0,onClick:ft,class:"relative inline-flex items-center justify-center w-full gap-2 px-6 py-4 font-sans font-semibold transition-all duration-300 border rounded-lg dark:bg-muted-700 text-muted-800 dark:text-white border-muted-300 dark:border-muted-600 tw-accessibility hover:shadow-xl hover:shadow-muted-400/20"},zc)):Qe("",!0)])])])])])])])]),St(b("div",Lc,[b("div",{class:"max-w-3xl px-6 py-4 mx-auto text-left bg-white rounded shadow-lg dark:bg-muted-700",onClick:B[2]||(B[2]=$=>a.value=!1),"x-transition:enter":"motion-safe:ease-out duration-300","x-transition:enter-start":"opacity-0 scale-90","x-transition:enter-end":"opacity-100 scale-100"},[b("div",Bc,[Dc,b("button",{type:"button",class:"z-50 cursor-pointer",onClick:B[1]||(B[1]=$=>a.value=!1)},Uc)]),b("section",Rc,[b("div",Mc,[b("h3",Fc,[Nc,Mt(" 即将安装...."+Tt(U.value.toUpperCase()),1)]),jc,b("div",Hc,[b("div",Wc,[b("div",Zc,[y.value?(gt(),wt("h2",{key:0,onClick:G,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 确 认 ")):(gt(),wt("h2",{key:1,onClick:j,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 更 新 "))])]),b("div",{class:"flex md:p-4 md:w-1/2"},[b("div",{class:"flex-grow"},[b("h2",{onClick:q,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 取 消 ")])])])])])])],512),[[Et,a.value]])],64))}});const Ue=t=>(Zr("data-v-1a6e40f1"),t=t(),Vr(),t),Kc={class:"relative"},Gc={class:"h-full flex flex-col items-start gap-4 p-6"},qc={class:"relative w-full space-y-2"},Jc={class:"relative"},Yc={class:"mark"},Xc=Ue(()=>b("span",{class:"learn"},"Tips ",-1)),Qc=[Xc],tu=["data-name"],eu=["src","alt"],nu=["src"],su={class:"plugin_name relative flex items-center h-10 overflow-hidden"},ru={"data-pagefind-meta":"title",class:"flex items-center font-heading text-lg font-medium text-muted-800 dark:text-white leading-6"},iu=["src"],ou={class:"-mt-2 text-orange-500 ml-2 text-lg font-serif font-bold italic"},au=Ue(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-v-35974737":"","data-icon":"mdi:temperature-celsius",class:"-mt-2 text-orange-500 iconify w-4 h-4 iconify--mdi"},[b("path",{fill:"currentColor",d:"M16.5 5c1.55 0 3 .47 4.19 1.28l-1.16 2.89A4.47 4.47 0 0 0 16.5 8C14 8 12 10 12 12.5s2 4.5 4.5 4.5c1.03 0 1.97-.34 2.73-.92l1.14 2.85A7.47 7.47 0 0 1 16.5 20A7.5 7.5 0 0 1 9 12.5A7.5 7.5 0 0 1 16.5 5M6 3a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0 2a1 1 0 0 0-1 1a1 1 0 0 0 1 1a1 1 0 0 0 1-1a1 1 0 0 0-1-1Z"})],-1)),lu={class:"flex items-center flex-wrap leading-6 text-muted-600 dark:text-muted-400"},cu=["src"],uu=["src"],du=["href"],fu=Ue(()=>b("span",{class:"text-white font-sans text-xs py-1 px-3 m-1 rounded-lg bg-yellow-500"}," 教程 ",-1)),hu=[fu],pu={class:"w-full mt-auto space-y-6"},mu={class:"flex items-center justify-start w-full relative"},gu=["src","onerror"],wu=["href"],vu={class:"pl-2"},_u=["tooltip"],yu={class:"block ml-auto font-sans text-sm text-muted-400"},bu=Ue(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"svg-icon lucide-download"},[b("path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}),b("polyline",{points:"7 10 12 15 17 10"}),b("line",{x1:"12",y1:"15",x2:"12",y2:"3"})],-1)),xu=Ue(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 20 20","data-v-5ade68da":"","data-icon":"dashicons:update",class:"block w-4 h-4 mx-auto iconify iconify--dashicons"},[b("path",{fill:"currentColor",d:"M10.2 3.28c3.53 0 6.43 2.61 6.92 6h2.08l-3.5 4l-3.5-4h2.32a4.439 4.439 0 0 0-4.32-3.45c-1.45 0-2.73.71-3.54 1.78L4.95 5.66a6.965 6.965 0 0 1 5.25-2.38zm-.4 13.44c-3.52 0-6.43-2.61-6.92-6H.8l3.5-4c1.17 1.33 2.33 2.67 3.5 4H5.48a4.439 4.439 0 0 0 4.32 3.45c1.45 0 2.73-.71 3.54-1.78l1.71 1.95a6.95 6.95 0 0 1-5.25 2.38z"})],-1)),ku=Ue(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 48 48","data-v-5ade68da":"","data-icon":"icon-park-outline:link-cloud-sucess",class:"block w-4 h-4 mx-auto iconify iconify--icon-park-outline"},[b("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"4"},[b("path",{d:"M12 33c-3.333 0-8-1.5-8-7.5c0-7 7-8.5 9-8.5c1-3.5 3-9 11-9c7 0 10 4 11 7.5c0 0 9 1 9 9.5c0 6-4 8-8 8"}),b("path",{d:"m18 33l6 5l8-10"})])],-1)),Cu=pe({__name:"ThemeCard",props:{app:{},themeInfo:{},isLogin:{type:Boolean}},emits:["download-update-theme"],setup(t){const e=t,n=e.isLogin;function s(){return e.themeInfo.authorAvatar&&e.themeInfo.authorAvatar.length>0?e.themeInfo.authorAvatar:c(e.themeInfo.author)}const i=ht(!1);let r=[];e.themeInfo.tags&&e.themeInfo.tags.length>0&&(r=e.themeInfo.tags.split(","));function a(w){return w>=1e6?(w/1e6).toFixed(0)+"M":w>=1e3?(w/1e3).toFixed(0)+"K":w.toString()}function l(w){return(w.match(/\b\w/g)||[]).join("").toUpperCase()}function c(w){let d="";if(w){const x=l(w);/^[a-zA-Z]+$/.test(x)?d=`https://dummyimage.com/100x100/555/fff&text=${x.toUpperCase()}`:d=`https://dummyimage.com/100x100/555/ffff&text=${encodeURIComponent(x)}`}else d="https://cdn.pkmer.cn/covers/logo.png!nomark";return d}const f=async w=>{await e.app.customCss.setTheme(w)},y=()=>`background-image:url(${`https://pkmer.cn/img/cover/${Math.floor(Math.random()*11)}.jpg`});`,m=()=>{e.app.setting.open(),e.app.setting.openTabById("pkmer")};return(w,d)=>(gt(),wt("div",Kc,[b("div",Gc,[b("div",qc,[b("div",Jc,[St(b("span",{class:"absolute top-3 left-3 inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-primary-500 text-white shadow-xl shadow-primary-500/20"},Tt($t(r)[0]),513),[[Et,$t(r)[0]]]),St(b("view",Yc,Qc,512),[[Et,w.themeInfo.contentUrl]]),St(b("div",{class:"noimg h-40 md:h-52","data-name":w.themeInfo.name,style:Je(y())},null,12,tu),[[Et,!w.themeInfo.banner]]),St(b("img",{class:"w-full h-52 object-contain aspect-video rounded-xl cursor-pointer",src:w.themeInfo.banner?.replace("gif!pkmer","gif").replace("!pkmer","!nomark"),alt:w.themeInfo.name,width:"348",height:"208",onerror:"javascript:this.src='https://cdn.pkmer.cn/covers/pkmer2.png!nomark';this.οnerrοr=null;",onClick:d[0]||(d[0]=x=>i.value=!0)},null,8,eu),[[Et,w.themeInfo.banner]]),i.value?(gt(),wt("div",{key:0,class:"overlay",onClick:d[2]||(d[2]=x=>i.value=!1)},[b("img",{src:w.themeInfo.banner?.replace("!nomark","!pkmer"),alt:"原图",onClick:d[1]||(d[1]=Nn(()=>{},["stop"]))},null,8,nu)])):Qe("",!0)]),b("div",su,[b("h3",ru,[Mt(Tt(w.themeInfo.name)+" ",1),b("img",{class:"-mt-2 ml-2",alt:"version",src:`https://img.shields.io/badge/${w.themeInfo.version}-brightgreen`},null,8,iu),b("span",ou,Tt(a(w.themeInfo.pkmerDownloadCount)),1),au])]),b("p",lu,[b("img",{class:"h-ful",alt:"GitHub stars",src:`https://img.shields.io/github/stars/${w.themeInfo.repo}?style=plastic&color=4F46E5&label=关注量`},null,8,cu),b("img",{class:"h-ful ml-2",alt:"下载数量",src:`https://img.shields.io/badge/下载总数-${a(w.themeInfo.downloadCount)}-yellow`},null,8,uu),b("a",{class:At(["ml-2",{visible:w.themeInfo.contentUrl,invisible:!w.themeInfo.contentUrl}]),href:w.themeInfo.contentUrl?w.themeInfo.contentUrl:"javascript:void(0)"},hu,10,du)]),St(b("p",{class:"plugin_desc text-base mt-auto min-h-[3rem] text-muted-600 dark:text-muted-400 leading-6"},Tt(w.themeInfo.chineseDescription?.replace("【机翻】","")||w.themeInfo.description),513),[[Et,w.themeInfo.description]])]),b("div",pu,[b("div",mu,[b("img",{class:"w-12 mask mask-blob",src:s(),onerror:`javascript:this.src='${c(w.themeInfo.author)}'`,alt:"avatar"},null,8,gu),b("a",{href:"https://github.com/"+w.themeInfo.repo},[b("div",vu,[b("h3",{class:"whitespace-nowrap text-ellipsis overflow-hidden max-w-[140px] font-heading font-medium text-muted-800 dark:text-muted-50",tooltip:w.themeInfo.author},Tt(w.themeInfo.author),9,_u)])],8,wu),b("div",yu,[St(b("button",{onClick:m,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"}," 请登录 ",512),[[Et,!$t(n)]]),St(b("div",null,[w.themeInfo.isInstalled?w.themeInfo.isInstalled&&w.themeInfo.isOutdated?(gt(),wt("button",{key:1,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:d[4]||(d[4]=x=>w.$emit("download-update-theme","update",w.themeInfo.name,w.themeInfo.version))},[xu,Mt(" 更新 ")])):(gt(),wt("button",{key:2,onClick:d[5]||(d[5]=x=>f(w.themeInfo.name)),tooltip:"主题已安装，应用当前主题",flow:"down",class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"},[ku,Mt(" 应用 ")])):St((gt(),wt("button",{key:0,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:d[3]||(d[3]=x=>w.$emit("download-update-theme","download",w.themeInfo.name,w.themeInfo.version))},[bu,Mt(" 下载 ")],512)),[[Et,$t(n)]])],512),[[Et,$t(n)]])])])])])]))}});const Su=mi(Cu,[["__scopeId","data-v-1a6e40f1"]]),Tu={class:"relative w-full flex justify-center gap-2 flex-wrap"},Iu=["onClick"],Eu=pe({__name:"ThemeToolbar",props:{themeList:{},activeCategory:{}},emits:["update-active-category"],setup(t){const e=t;let n=[];const s=Ot(()=>{Array.isArray(e.themeList)&&e.themeList.forEach(a=>{if(a.tags&&typeof a.tags=="string"){let l=a.tags.split(",").map(c=>c.trim());l=l.filter(c=>c!==""),l.length>0&&n.push(l[0])}});let r=[];return Array.isArray(e.themeList)&&e.themeList.forEach(a=>{if(a.modes&&typeof a.modes=="string"){let l=a.modes.split(",").map(c=>c.trim());l=l.filter(c=>c!==""),l.length>0&&r.push(l[0])}}),n.concat(r)}),i=Ot(()=>Array.from(new Set(s.value)));return(r,a)=>(gt(),wt("div",Tu,[b("button",{class:At(["h-6 inline-flex justify-center items-center py-2 px-4 font-sans text-sm rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 border-2 transition-colors duration-300 tw-accessibility",r.activeCategory==="all"?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent "]),onClick:a[0]||(a[0]=l=>r.$emit("update-active-category","all"))}," All ",2),(gt(!0),wt(Bt,null,$n(i.value,l=>(gt(),wt("div",{class:"plugin-item",key:l},[b("button",{class:At(["flex-1 inline-flex justify-center items-center py-2 px-4 font-sans text-sm rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 border-2 transition-colors duration-300 tw-accessibility",r.activeCategory===l?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent"]),onClick:()=>{r.$emit("update-active-category",l)}},Tt(l),11,Iu)]))),128))]))}});class vi{settings;app;api;constructor(e,n){this.app=e,this.settings=n,this.api=new Ce(n.token)}async getThemeUrl(e,n){const s=Date.now(),i=localStorage.getItem("themeUrl");if(i){const c=JSON.parse(i);if(c.name===e&&c.version===n&&s<c.expiryTime)return c.url}const r=await this.getThemeDownloadUrl(e,n),a=s+15*60*1e3,l={name:e,version:n,url:r,expiryTime:a};return localStorage.setItem("themeUrl",JSON.stringify(l)),r}async getThemeDownloadUrl(e,n){const s=await this.api.getThemeDownloadUrl(e,n);if(s.startsWith("http"))return s;throw new lt.Notice(`${JSON.parse(s).message}`),new Error(`${JSON.parse(s).message}`)}async downloadThemeToThemeFolder(e,n){const s=await this.getThemeUrl(e,n);if(!s)return new lt.Notice(`获取${e}主题下载地址失败！`),!1;if(app.customCss.themes[e])return new lt.Notice(`主题${e}已经安装，无需重复安装！`),!1;try{const i=await lt.requestUrl({url:s,method:"GET"}),r=lt.normalizePath(app.vault.configDir+"/themes/"+e)+"/",a=this.app.vault.adapter,l=await Tn.loadAsync(i.arrayBuffer);(await a.exists(r)===!1||!await a.exists(r+"manifest.json"))&&await a.mkdir(r);try{l.forEach(async(c,f)=>{const y=r+c,m=await f.async("string");await a.write(y,m)})}catch{throw new lt.Notice(`主题${e}解压失败！得手动清除残留文件！`,5e3),a.rmdir(r,!0),Error(`主题${e}解压失败！`)}return new lt.Notice(`主题${e}安装并启用成功！
`,5e3),await app.customCss.setTheme(e),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return console.log(i),new lt.Notice(`主题${e}安装失败！${i}`,5e3),!1}}async updateThemeToExistThemeFolder(e,n){const s=await this.getThemeDownloadUrl(e,n);if(!s)throw new lt.Notice(`获取${e}主题下载地址失败！`),new Error(`获取${e}主题下载地址失败！`);if(!app.customCss.themes[e])return new lt.Notice(`主题${e}未安装！`),!1;try{const i=lt.normalizePath(app.vault.configDir+"/themes/"+e)+"/",r=this.app.vault.adapter;if(await r.exists(i)===!1&&!await r.exists(i+"manifest.json"))throw new Error(`主题${e}未安装！`);const a=await lt.requestUrl({url:s,method:"GET"}),l=await Tn.loadAsync(a.arrayBuffer);try{l.forEach(async(c,f)=>{const y=i+c,m=await f.async("string");await r.write(y,m)})}catch{throw new lt.Notice(`主题${e}解压失败！得手动清除残留文件！`),Error(`主题${e}解压失败！`)}return new lt.Notice(`主题${e}更新成功！
 新主题已生效`),await app.customCss.setTheme(e),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return new lt.Notice(`主题${e}更新失败！${i}`),!1}}}const Au={"data-pagefind-body":"",class:"w-full"},Pu={class:"flex items-center justify-between w-full px-2 py-4 mx-auto font-sans search first-letter:"},Ou={class:"flex flex-wrap items-center justify-center w-full first-letter:mx-auto"},zu={class:"w-full lg:max-w-[60vw] mx-auto py-3 md:px-6"},Lu={class:"flex-wrap relative top-0 z-30 flex items-center w-full overflow-x-auto divide-x rounded dark:bg-muted-800 border-muted-200 dark:border-muted-700 divide-muted-200 dark:divide-muted-700 dark:shadow-muted-900/30 md:overflow-x-visible"},Bu={class:"widget-item"},Du=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"solar:round-sort-vertical-line-duotone",class:"w-6 h-6 iconify iconify--solar"},[b("g",{fill:"none",stroke:"currentColor","stroke-width":"1.5"},[b("circle",{cx:"12",cy:"12",r:"10",opacity:".5"}),b("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M9.5 8v8m0 0L7 13.25M9.5 16l2.5-2.75M14.5 16V8m0 0L12 10.75M14.5 8l2.5 2.75"})])])],-1),$u=[Du],Uu={class:"widget-item"},Ru=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"ic:sharp-update",class:"w-6 h-6 iconify iconify--ic"},[b("path",{fill:"currentColor",d:"M11 8v5l4.25 2.52l.77-1.28l-3.52-2.09V8H11zm10 2V3l-2.64 2.64A8.937 8.937 0 0 0 12 3a9 9 0 1 0 9 9h-2c0 3.86-3.14 7-7 7s-7-3.14-7-7s3.14-7 7-7c1.93 0 3.68.79 4.95 2.05L14 10h7z"})])],-1),Mu=[Ru],Fu={class:"widget-item"},Nu=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-6 h-6 iconify iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M2 17L5.75 7H7.9l3.75 10H9.6l-.85-2.4H4.9L4.1 17H2Zm3.5-4.1h2.6L6.9 9.15h-.15L5.5 12.9Zm8.2 4.1v-1.9l5.05-6.3H13.9V7h7.05v1.9l-5 6.3H21V17h-7.3ZM9 5l3-3l3 3H9Zm3 17l-3-3h6l-3 3Z"})])],-1),ju=[Nu],Hu={class:"widget-item"},Wu=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:whatshot",class:"iconify w-6 h-6 iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M12 22q-2.5 0-4.588-1.1T3.95 17.95l4.1-4.1l3 2.5L16 11.4V14h2V8h-6v2h2.6l-3.65 3.65l-3-2.5L2.9 16.2q-.425-.95-.662-2.013T2 12q0-2.075.788-3.9t2.137-3.175q1.35-1.35 3.175-2.137T12 2q2.075 0 3.9.788t3.175 2.137q1.35 1.35 2.138 3.175T22 12q0 2.075-.788 3.9t-2.137 3.175q-1.35 1.35-3.175 2.138T12 22Z"})])],-1),Zu=[Wu],Vu={class:"widget-item"},Ku=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-5 h-5 iconify iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M4.5 11a8.5 8.5 0 1 1 8.188 8.494a6.47 6.47 0 0 1-.68 1.457c.327.033.658.049.992.049c5.523 0 10-4.477 10-10S18.523 1 13 1S3 5.477 3 11c0 .334.016.665.048.991a6.51 6.51 0 0 1 1.458-.68A8.65 8.65 0 0 1 4.5 11Zm8.493-5.352a.75.75 0 0 0-1.493.102v6l.007.102a.75.75 0 0 0 .743.648h4l.102-.007A.75.75 0 0 0 16.25 11H13V5.75l-.007-.102ZM1 17.5a5.5 5.5 0 0 1 5-5.477v5.77l-1.646-1.647a.5.5 0 0 0-.708.708l2.5 2.5a.5.5 0 0 0 .708 0l2.5-2.5a.5.5 0 0 0-.708-.708L7 17.793v-5.77A5.5 5.5 0 1 1 1 17.5Zm8.5 3A.5.5 0 0 0 9 20H4a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5Z"})])],-1),Gu={class:"num"},qu={class:"relative w-full"},Ju={class:"relative group"},Yu=["value"],Xu=b("div",{class:"absolute top-0 left-0 hidden md:flex items-center justify-center w-16 h-8 transition-colors duration-300 text-muted-400 group-focus-within:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"lucide:search",class:"w-4 h-4 iconify iconify--lucide"},[b("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2"},[b("circle",{cx:"11",cy:"11",r:"8"}),b("path",{d:"m21 21l-4.3-4.3"})])])],-1),Qu={class:"text-right"},td=b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",viewBox:"0 0 32 32"},[b("path",{fill:"white",d:"M16 2C8.2 2 2 8.2 2 16s6.2 14 14 14s14-6.2 14-14S23.8 2 16 2m5.4 21L16 17.6L10.6 23L9 21.4l5.4-5.4L9 10.6L10.6 9l5.4 5.4L21.4 9l1.6 1.6l-5.4 5.4l5.4 5.4z"})],-1),ed=[td],nd={class:"w-full bg-muted-100 dark:bg-muted-1000"},sd={class:"w-full max-w-7xl mx-auto"},rd={class:"w-full flex items-center overflow-hidden"},id={class:"w-full h-full flex flex-col justify-between md:px-6 pb-16 pt-4"},od={class:"w-full max-w-[90vw] mx-auto space-y-4 text-center"},ad={class:"flex flex-col gap-12 py-12"},ld={class:"w-full flex items-center justify-center p-6 -m-3"},cd={class:"w-full max-w-[210px] pt-16"},ud=b("div",null,"Load More",-1),dd=[ud],fd={class:"fixed inset-0 z-30 flex items-center justify-center overflow-auto bg-black bg-opacity-50"},hd=b("h5",{class:"mr-3 max-w-none"},null,-1),pd=b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor"},[b("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M6 18L18 6M6 6l12 12"})],-1),md=[pd],gd={class:"body-font"},wd={class:"container md:px-5 py-4 mx-auto"},vd={class:"text-2xl font-medium title-font text-center mb-6"},_d=b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"line-md:downloading-loop",class:"w-6 h-6 iconify iconify--line-md"},[b("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-width":"2"},[b("path",{"stroke-dasharray":"2 4","stroke-dashoffset":"6",d:"M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21"},[b("animate",{attributeName:"stroke-dashoffset",dur:"0.6s",repeatCount:"indefinite",values:"6;0"})]),b("path",{"stroke-dasharray":"30","stroke-dashoffset":"30",d:"M12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.1s",dur:"0.3s",values:"30;0"})]),b("path",{"stroke-dasharray":"10","stroke-dashoffset":"10",d:"M12 8v7.5"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.5s",dur:"0.2s",values:"10;0"})]),b("path",{"stroke-dasharray":"6","stroke-dashoffset":"6",d:"M12 15.5l3.5 -3.5M12 15.5l-3.5 -3.5"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.7s",dur:"0.2s",values:"6;0"})])])],-1),yd=b("div",null,[b("p",{class:"mb-4 text-base leading-relaxed"}," 注意，安装和更新操作不可逆，请确认后再操作。 ")],-1),bd={class:"block md:flex flex-wrap sm:-m-4 -mx-4 md:-mb-10 md:-mt-4 md:space-y-0"},xd={class:"md:p-4 md:w-1/2 flex"},kd={class:"flex-grow"},Cd=pe({__name:"ThemeMarket",props:{settings:{},app:{},tab:{}},async setup(t){let e,n;const s=t,i=ht(""),r=ht(!1),a=ht([]);let l=ht(24),c=ht(1);const f=ht(!1),y=ht(!0),m=new Ce(s.settings.token),w=new vi(s.app,s.settings),d=([e,n]=bn(()=>m.isUserLogin()),e=await e,n(),e),x=()=>{f.value=!0,R()},h=async()=>{const B=await m.getPkmerDocs();if(d)try{a.value=await m.getThemeList(),a.value=a.value.sort(($,nt)=>nt.downloadCount-$.downloadCount),Array.isArray(a.value)?a.value.forEach($=>{const nt=B.find(o=>o.slug==$.name.replace(/\s+/g,"-").toLowerCase());nt&&($.contentUrl=`https://pkmer.cn/show/${nt.uid}`);const T=s.app.customCss.themes;$.isInstalled=T[$.name]!==void 0,$.isOutdated=$.isInstalled&&T[$.name].version!==$.version}):a.value=[]}catch($){console.error("Error loading themes:",$)}else a.value=await m.getTop20Themes(),Array.isArray(a.value)?a.value.forEach($=>{const nt=B.find(o=>o.slug==$.name.replace(/\s+/g,"-").toLowerCase());nt&&($.contentUrl=`https://pkmer.cn/show/${nt.uid}`);const T=s.app.customCss.themes;$.isInstalled=T[$.name]!==void 0,$.isOutdated=$.isInstalled&&T[$.name].version!==$.version}):a.value=[]},v=Ot(()=>{if(a.value)return a.value.filter(nt=>nt.isInstalled===!0).length}),_=Ot(()=>a.value?a.value.filter(nt=>nt.isOutdated===!0).length:!1),k=ht(""),A=ht("all"),z=ht(""),O=ht(""),U=ht(0),H=B=>{lt.debounce(()=>{k.value=B.target.value},800)()},G=()=>{r.value=!1},j=B=>{A.value=B},q=(B,$,nt)=>{r.value=!0,z.value=$,O.value=nt,B==="download"?y.value=!0:y.value=!1},it=async()=>{r.value=!1,new lt.Notice("正在更新主题，请稍后...",3e3),await w.updateThemeToExistThemeFolder(z.value,O.value)&&(a.value=a.value.map($=>($.name==z.value&&($.isOutdated=!1),$)))},P=async()=>{r.value=!1,new lt.Notice("正在下载主题，请稍后...",3e3),await w.downloadThemeToThemeFolder(z.value,O.value)&&(a.value=a.value.map($=>($.name==z.value&&($.isInstalled=!0),$)))},Z=()=>{r.value=!1},u=()=>{const B=window.location.hash.slice(1);if(B){const $=decodeURIComponent(B);A.value=$}},V=ht();Dn(async()=>{if(u(),await h(),i.value="pkmerDownloadCount",tt.value="asc",app.workspace.on("resize",st),V.value=s.app.workspace.activeLeaf.view.leaf.width,d&&(U.value=await m.getDownloadCount()),s.tab){const B=JSON.parse(s.tab);B.type=="tupdated"&&pt(),B.type=="tupdated"&&Q()}});const st=()=>{V.value=s.app.workspace.activeLeaf.view.leaf.width};Xe(()=>{window.removeEventListener("resize",st)});const F=Ot(()=>{const B=k.value.toLowerCase().trim();return B.length<1?a.value:a.value.filter($=>$.name.toLowerCase().includes(B)||$.author.toLowerCase().includes(B)||$.chineseDescription?.toLowerCase().includes(B)||$.tags?.toLowerCase().includes(B))}),rt=Ot(()=>Math.ceil(F.value?.length/l.value)),J=Ot(()=>c.value<rt.value),tt=ht("");function N(){i.value="pkmerDownloadCount",tt.value=tt.value==="asc"?"desc":"asc"}function R(){i.value="downloadCount",tt.value=tt.value==="asc"?"desc":"asc"}function ct(){i.value="updateTime",tt.value=tt.value==="asc"?"desc":"asc"}function et(){i.value="fileName",tt.value=tt.value==="asc"?"desc":"asc"}function Q(){i.value="installed",tt.value=tt.value==="asc"?"desc":"asc"}function pt(){i.value="updated",tt.value=tt.value==="asc"?"desc":"asc"}const yt=Ot(()=>{let B=[];return A.value=="all"?i.value==="downloadCount"?tt.value==="asc"?B=F.value.sort(($,nt)=>$.downloadCount-nt.downloadCount):B=F.value.sort(($,nt)=>nt.downloadCount-$.downloadCount):i.value==="updateTime"?tt.value==="asc"?B=F.value.sort(($,nt)=>new Date($.updatedTime).getTime()-new Date(nt.updatedTime).getTime()):B=F.value.sort(($,nt)=>new Date(nt.updatedTime).getTime()-new Date($.updatedTime).getTime()):i.value==="fileName"?tt.value==="asc"?B=F.value.sort(($,nt)=>$.name.localeCompare(nt.name)):B=F.value.sort(($,nt)=>nt.name.localeCompare($.name)):i.value==="pkmerDownloadCount"?tt.value==="asc"?B=F.value.sort(($,nt)=>nt.pkmerDownloadCount-$.pkmerDownloadCount):B=F.value.sort(($,nt)=>$.pkmerDownloadCount-nt.pkmerDownloadCount):i.value==="installed"?B=F.value.filter($=>$.isInstalled):i.value==="updated"?B=F.value.filter($=>$.isOutdated):B=F.value?.slice(0,c.value*l.value):(B=F.value.filter($=>$.tags?.toLowerCase().includes(A.value)||$.modes?.toLowerCase().includes(A.value)),i.value==="downloadCount"?tt.value==="asc"?B=B.sort(($,nt)=>$.downloadCount-nt.downloadCount):B=B.sort(($,nt)=>nt.downloadCount-$.downloadCount):i.value==="updateTime"?tt.value==="asc"?B=B.sort(($,nt)=>new Date($.updatedTime).getTime()-new Date(nt.updatedTime).getTime()):B=B.sort(($,nt)=>new Date(nt.updatedTime).getTime()-new Date($.updatedTime).getTime()):i.value==="fileName"?tt.value==="asc"?B=B.sort(($,nt)=>$.name.localeCompare(nt.name)):B=B.sort(($,nt)=>nt.name.localeCompare($.name)):i.value==="pkmerDownloadCount"&&(tt.value==="asc"?B=B.sort(($,nt)=>$.pkmerDownloadCount-nt.pkmerDownloadCount):B=B.sort(($,nt)=>nt.pkmerDownloadCount-$.pkmerDownloadCount))),B?.slice(0,c.value*l.value)}),ft=Ot(()=>Array.isArray(F.value)?F.value:[]),Y=()=>{const B=c.value*l.value,$=B+l.value,nt=yt.value?.slice(B,$);c.value++,a.value=[...a.value,...nt]};return(B,$)=>(gt(),wt(Bt,null,[Lt(wi,{settings:s.settings,isLogin:$t(d),app:s.app},null,8,["settings","isLogin","app"]),b("main",Au,[b("div",Pu,[b("div",Ou,[b("div",zu,[b("div",Lu,[b("div",Bu,[b("button",{class:At([{active:i.value=="downloadCount"},"flex items-center px-2 font-sans transition-colors duration-300 group whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按下载量",flow:"down",onClick:R},$u,2)]),b("div",Uu,[b("button",{class:At([{active:i.value=="updateTime"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按更新时间",flow:"down",onClick:ct},Mu,2)]),b("div",Fu,[b("button",{class:At([{active:i.value=="fileName"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按文件名排序",flow:"down",onClick:et},ju,2)]),b("div",Hu,[b("button",{class:At(["active items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700",{active:i.value=="pkmerDownloadCount"}]),tooltip:"按主题热度",flow:"down",onClick:N},Zu,2)]),b("div",Vu,[b("button",{class:At([{active:i.value=="installed"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"筛选已安装主题",flow:"down",onClick:Q},[Ku,b("span",Gu,Tt(v.value),1)],2)]),b("div",qu,[b("div",Ju,[b("input",{type:"text",class:"w-full h-8 pl-2 md:pl-16 pr-5 font-sans text-base leading-5 transition-all duration-300 text-muted-600 focus:border-muted-300 focus:shadow-lg focus:shadow-muted-300/50 dark:focus:shadow-muted-800/50 placeholder:text-muted-300 dark:placeholder:text-muted-500 dark:bg-muted-800 dark:text-muted-200 dark:border-muted-700 dark:focus:border-muted-600 tw-accessibility",placeholder:"Search themes...",onInput:H,value:k.value},null,40,Yu),Xu])])])])])]),b("div",Qu,[St(b("button",{onClick:pt,class:"inline-block w-full font-sans text-xs px-3 m-1 rounded-lg bg-green-600 text-white shadow-xl shadow-primary-500/20"},[Mt(" 发现 "+Tt(_.value)+" 个主题更新！【点我查看】 ",1),b("button",{onClick:Nn(x,["stop"]),class:"ml-2 px-3 shadow-none"},ed)],512),[[Et,_.value]])]),b("section",nd,[b("div",sd,[b("div",rd,[b("div",id,[b("div",od,[Lt(Eu,{"active-category":A.value,themeList:ft.value,onUpdateActiveCategory:j},null,8,["active-category","themeList","onUpdateActiveCategory"])]),b("div",ad,[b("div",{class:At(["grid gap-6 -m-3 ptablet:grid-cols-2 ltablet:grid-cols-3 lg:grid-cols-3",{"!grid-cols-1":V.value<=768&&V.value>0,"!grid-cols-2":V.value>768&&V.value<1024,"!grid-cols-3":V.value>1024}])},[(gt(!0),wt(Bt,null,$n(yt.value,nt=>(gt(),wt("div",{key:nt.id},[Lt(Su,{app:s.app,"theme-info":nt,isLogin:$t(d),onDownloadUpdateTheme:q},null,8,["app","theme-info","isLogin","onDownloadUpdateTheme"])]))),128))],2),b("div",ld,[b("div",cd,[J.value?(gt(),wt("button",{key:0,onClick:Y,class:"w-full inline-flex items-center justify-center gap-2 font-sans font-semibold bg-white dark:bg-muted-700 text-muted-800 dark:text-white border border-muted-300 dark:border-muted-600 relative px-6 py-4 rounded-lg tw-accessibility hover:shadow-xl hover:shadow-muted-400/20 transition-all duration-300"},dd)):Qe("",!0)])])])])])])])]),St(b("div",fd,[b("div",{class:"max-w-3xl px-6 py-4 mx-auto text-left bg-white rounded shadow-lg dark:bg-muted-700",onClick:Z,"x-transition:enter":"motion-safe:ease-out duration-300","x-transition:enter-start":"opacity-0 scale-90","x-transition:enter-end":"opacity-100 scale-100"},[b("div",{class:"flex items-center justify-between"},[hd,b("button",{type:"button",class:"z-50 cursor-pointer",onClick:Z},md)]),b("section",gd,[b("div",wd,[b("h3",vd,[_d,Mt(" 即将安装...."+Tt(z.value.toUpperCase()),1)]),yd,b("div",bd,[b("div",xd,[b("div",kd,[y.value?(gt(),wt("h2",{key:0,onClick:P,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 确 认 ")):(gt(),wt("h2",{key:1,onClick:it,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 更 新 "))])]),b("div",{class:"md:p-4 md:w-1/2 flex"},[b("div",{class:"flex-grow"},[b("h2",{onClick:G,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 取 消 ")])])])])])])],512),[[Et,r.value]])],64))}});const Sd={class:"w-full"},Td={class:"flex flex-wrap md:content-center"},Id={class:"flex items-center justify-between md:px-8 mx-auto font-sans logo scale-90 md:scale-125 max-w-7xl"},Ed={class:"flex flex-wrap items-center justify-center w-full mx-auto max-w-7xl"},Ad={class:"items-center w-auto gap-6 basis-0"},Pd={href:"https://pkmer.cn",class:"flex items-center gap-3 no-underline text-inherit"},Od={class:"transition-all duration-300 text-primary-600"},zd=ca('<g><path d="M395.631 98.837C358.783 45.867 309.195 16.696 256 16.696S153.217 45.867 116.369 98.837c-35.565 51.124-55.151 118.797-55.151 190.554 0 113.54 87.379 205.913 194.783 205.913s194.783-92.373 194.783-205.913c-.001-71.756-19.588-139.43-55.153-190.554z" style="" fill="#ffc170" class=""></path><path d="M256 495.304c107.403 0 194.783-92.373 194.783-205.913 0-71.757-19.586-139.43-55.151-190.554C358.783 45.867 309.195 16.696 256 16.696" style="" fill="#e1a05a" data-original="#ffd6a0" class=""></path><path d="M0 128h55.652v33.391H0z" style="" fill="#a0bdd4" class=""></path><path d="M13.053 51.94h55.65v33.391h-55.65z" style="" transform="rotate(-160.527 40.878 68.636)" fill="#a0bdd4" class=""></path><path d="M456.348 128H512v33.391h-55.652z" style="" fill="#a0bdd4" class=""></path><path d="M454.411 40.807h33.391v55.65h-33.391z" style="" transform="rotate(-109.469 471.111 68.636)" fill="#a0bdd4" class=""></path><path d="m187.719 277.315 14.949-29.896-47.598-21.154-93.659 51.085c-.124 4-.194 8.013-.194 12.041 0 8.564.505 17.005 1.471 25.298l93.892-51.214 31.139 13.84zM450.63 278.997l-105.587-52.794-89.463 44.731-22.369-9.942-14.948 29.896 38.155 16.958 88.625-44.31 104.166 52.083a218.592 218.592 0 0 0 1.573-26.228c.001-3.476-.059-6.938-.152-10.394z" style="" fill="#f8f8f8" class=""></path><path d="m450.63 278.997-105.587-52.794-89.463 44.731.839 36.913 88.624-44.31 104.166 52.083a218.592 218.592 0 0 0 1.573-26.228 382.07 382.07 0 0 0-.152-10.395z" style="" fill="#fef5ea" class=""></path></g>',1),Ld=[zd],Bd=b("span",{class:"font-sans text-lg font-extrabold tracking-widest uppercase whitespace-nowrap feat dark:text-muted-100"},"Obsidian PKMer Market",-1),Dd={class:"pkmer-tab-container"},$d={class:"mb-5 flex list-none flex-row flex-wrap border-b-0 pl-0"},Ud={class:"relative cursor-pointer my-2 block border-x-0 border-b-2 border-t-0 border-transparent px-7 pb-3.5 pt-4 font-bold uppercase leading-tight hover:isolate dark:hover:bg-slate-900/30 hover:bg-neutral-100 focus:isolate focus:border-transparent"},Rd={class:"relative cursor-pointer my-2 block border-x-0 border-b-2 border-t-0 border-transparent px-7 pb-3.5 pt-4 font-bold uppercase leading-tight hover:isolate dark:hover:bg-slate-900/30 hover:bg-neutral-100 focus:isolate focus:border-transparent"},Md={class:"pkmer-tab-content"},Fd={key:0,class:"opacity-100 transition-opacity duration-150 ease-linear"},Nd={key:1,class:"opacity-100 transition-opacity duration-150 ease-linear"},jd=b("h1",null,"Loading...",-1),Hd=b("h2",null,"如果长时间加载，请确保网络通常，并关闭网络代理。",-1),Wd=pe({__name:"PluginMarketView",props:{settings:{},app:{}},setup(t){const e=t,n=ht("plugin"),s=ht(),i=ht({type:"",count:0}),r=a=>{n.value=a};return Dn(()=>{s.value=localStorage.getItem("pkmer-update-tab"),s.value!==null&&s.value!==""&&(i.value=JSON.parse(s.value),i.value.type=="tupdated"&&r("theme"))}),Xe(()=>{localStorage.removeItem("pkmer-update-tab")}),(a,l)=>(gt(),wt(Bt,null,[b("div",Sd,[b("div",Td,[b("div",Id,[b("div",Ed,[b("div",Ad,[b("a",Pd,[b("div",Od,[(gt(),wt("svg",{class:At(["fill-current w-7 h-7","w-7 h-7"]),width:"1.75rem",xmlns:"http://www.w3.org/2000/svg",version:"1.1","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:svgjs":"http://svgjs.com/svgjs",viewBox:"0 0 512 512","xml:space":"preserve"},Ld))]),Bd])])])])])]),b("div",Dd,[b("ul",$d,[b("li",{class:At(["flex-auto text-center",{active:n.value==="plugin"}]),onClick:l[0]||(l[0]=c=>r("plugin"))},[b("span",Ud,[Mt(" 插件市场 "),St(b("span",{class:"num bradge"},Tt(i.value.count),513),[[Et,i.value.type=="updated"&&i.value.count>0]])])],2),b("li",{class:At(["flex-auto text-center relative",{active:n.value==="theme"}]),onClick:l[1]||(l[1]=c=>r("theme"))},[b("span",Rd,[Mt(" 主题市场 "),St(b("span",{class:"num bradge"},Tt(i.value.count),513),[[Et,i.value.type=="tupdated"&&i.value.count>0]])])],2)]),b("div",Md,[(gt(),li(bo,null,{default:ss(()=>[n.value==="plugin"?(gt(),wt("div",Fd,[Lt(Vc,{settings:e.settings,app:e.app,tab:s.value},null,8,["settings","app","tab"])])):n.value==="theme"?(gt(),wt("div",Nd,[Lt(Cd,{settings:e.settings,app:e.app,tab:s.value},null,8,["settings","app","tab"])])):Qe("",!0)]),fallback:ss(()=>[jd,Hd]),_:1}))])])],64))}});const hs="pkmer-downloader";class Zd extends lt.ItemView{plugin;settings;constructor(e,n){super(e),this.plugin=n,this.settings=n.settings}getIcon(){return"bookmark"}getDisplayText(){return"Pkmer Market"}getViewType(){return hs}async onOpen(){const{contentEl:e}=this;console.log("welcome Pkmer Market"),Va(Wd,{settings:this.settings,app:this.app}).mount(e)}}class mr{modal;settingTab;constructor(e){this.settingTab=e;const{remote:n}=require("electron"),{BrowserWindow:s}=n;this.modal=new s({parent:n.getCurrentWindow(),width:630,height:840,show:!1}),this.modal.once("ready-to-show",()=>{this.modal.setTitle("登录Pkmer~"),this.modal.setMenu(null),this.modal.show()}),this.modal.webContents.on("will-navigate",()=>{this.modal.webContents.executeJavaScript("localStorage.getItem('pkmer-token')").then(i=>{i&&(this.settingTab.saveToken(i),this.settingTab.display(),this.modal.close(),this.settingTab.app.workspace.activeLeaf.rebuildView())})})}async doLogin(){try{await this.modal.loadURL("https://pkmer.cn/products/signIn/")}catch(e){console.log(e)}}async Loginout(){try{await this.modal.loadURL("https://pkmer.cn/products/UserProfile/"),this.modal.webContents.executeJavaScript("localStorage.removeItem('pkmer-token')").then(()=>{this.settingTab.saveToken(""),this.settingTab.display(),this.modal.close(),this.settingTab.app.workspace.activeLeaf.rebuildView()})}catch(e){console.log(e),new lt.Notice("你没登录咋退出？")}}onClose(){this.modal.close()}}class Vd extends lt.PluginSettingTab{plugin;constructor(e,n){super(e,n),this.plugin=n}display(){const{containerEl:e}=this;e.empty(),e.createEl("h1",{text:"Obsidian PKMer Market"}),e.setAttribute("data-type","pkmer-downloader"),lt.Platform.isDesktopApp&&(this.plugin.settings.token?this.showLoginOut():this.showLogin()),new lt.Setting(e).setName("Token").setDesc("Default token for pkmer downloader").addText(s=>s.setPlaceholder("登录获取token").setValue(this.plugin.settings.token).setDisabled(!1).onChange(async i=>{this.plugin.settings.token=i,await this.plugin.saveSettings()})),lt.Platform.isDesktopApp&&new lt.Setting(e).setName("Tips").setDesc("如果登录后，仍然提示登录，请退出重新登录PKMER "),lt.Platform.isMobileApp&&new lt.Setting(e).setName("Tips").setDesc("移动端需要您手动在电脑端登录获取token后复制到输入框中 "),new lt.Setting(e).setName("🥚打开PKMer Market").setDesc("点击开始挑选心爱的插件和主题吧").addButton(s=>{s.setIcon("download").setButtonText("进入").setClass("px-5").setCta().onClick(()=>{app.setting.close(),setTimeout(()=>{this.plugin.openView("")},100)})}),e.createEl("hr",{cls:"mt-2"});const n=e.createEl("div",{cls:"mt-4"});n.createEl("a",{text:"🥚PKMer.cn",href:"https://pkmer.cn"}),n.createEl("span",{text:" | "}),n.createEl("a",{text:"👤个人中心",href:"https://pkmer.cn/products/UserProfile/"})}showLogin(){new lt.Setting(this.containerEl).setName("登录Pkmer").addButton(e=>e.setButtonText("登录").setCta().onClick(async()=>{e.setDisabled(!0),await new mr(this).doLogin(),this.display()}))}showLoginOut(){new lt.Setting(this.containerEl).setName("退出登录").addButton(e=>e.setButtonText("退出").setCta().onClick(async()=>{e.setDisabled(!0),await new mr(this).Loginout(),this.display()}))}saveToken(e){this.plugin.settings.token=e,this.plugin.saveSettings()}}let Kd=class{constructor(e,n){this.app=e,this.settings=n,this.api=new Ce(this.settings.token),this.isUserLogin=!1,this.allPluginList=[],this.loadAllPlugins()}api;isUserLogin;allPluginList;async loadAllPlugins(){try{if(this.isUserLogin=await this.api.isUserLogin(),this.isUserLogin){const e=await this.api.getPluginList();this.allPluginList=Array.isArray(e)?e:[],await this.updatePluginStatus()}}catch(e){throw console.error("Error loading plugins:",e),new Error("Failed to load plugins")}}async updatePluginStatus(){const e=this.app.plugins.manifests;this.allPluginList.forEach(n=>{n.isInstalled=!!e[n.id],n.isOutdated=n.isInstalled&&e[n.id].version!==n.version})}async getPluginStatus(){await this.loadAllPlugins();const e=this.allPluginList.filter(s=>s.isInstalled).length,n=this.allPluginList.filter(s=>s.isOutdated).length;return{installedCount:e,updatedCount:n}}};class Gd{constructor(e,n){this.app=e,this.settings=n,this.api=new Ce(this.settings.token),this.isUserLogin=!1,this.allThemeList=[],this.loadAllThemes()}api;isUserLogin;allThemeList;async loadAllThemes(){try{if(this.isUserLogin=await this.api.isUserLogin(),this.isUserLogin){const e=await this.api.getThemeList();this.allThemeList=Array.isArray(e)?e:[],await this.updateThemeStatus()}}catch(e){console.error("Error loading themes:",e)}}async updateThemeStatus(){const e=this.app.customCss.themes;this.allThemeList.forEach(n=>{n.isInstalled=e[n.name]!==void 0,n.isOutdated=n.isInstalled&&e[n.name].version!==n.version})}async getThemeStatus(){await this.loadAllThemes();const e=this.allThemeList.filter(s=>s.isInstalled).length,n=this.allThemeList.filter(s=>s.isOutdated).length;return{tinstalledCount:e,tupdatedCount:n}}}const qd={token:""};class Jd extends lt.Plugin{settings;statusBarIconEl;async onload(){await this.loadSettings(),localStorage.removeItem("pkmer-update-tab"),this.registerCustomURI(),this.registerCustomCommands(),this.registerCustomRibbon(),this.addStatusBarIcon(),await this.reloadStatusBarHandler(),this.addSettingTab(new Vd(this.app,this)),this.registerView(hs,e=>new Zd(e,this)),addEventListener("reload-statusbar",async()=>{this.reloadStatusBarHandler()})}reloadStatusBarHandler=async()=>{await this.updateStatusBar("")};onunload(){removeEventListener("reload-statusbar",this.reloadStatusBarHandler)}async loadSettings(){this.settings=Object.assign({},qd,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}registerCustomURI(){this.registerObsidianProtocolHandler("pkmer-installer",async e=>{const n=e.pluginID,s=e.themeID,i=e.version;if(!this.settings.token){new lt.Notice("请先登录获取token",5e3),app.setting.open(),app.setting.openTabById("PKMer");return}if(n)try{new lt.Notice("正在下载插件，请稍后...",3e3),await new Ds(app,this.settings).downloadPluginToPluginFolder(n,i)}catch{new lt.Notice("下载失败，请检查网络")}if(s)try{new lt.Notice("正在安装主题，请稍后...",3e3),await new vi(app,this.settings).downloadThemeToThemeFolder(s,i)}catch{new lt.Notice("下载失败，请检查网络")}})}registerCustomCommands(){this.addCommand({id:"open-pkmer-market-view",name:"Open Pkmer Market View",callback:()=>{this.openView("")}})}registerCustomRibbon(){this.addRibbonIcon("download","Open Pkmer Market",()=>{this.openView("")})}addStatusBarIcon(){this.statusBarIconEl=this.addStatusBarItem(),this.statusBarIconEl.addClass("pkmer-statusbar"),this.statusBarIconEl.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"/><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"/><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"/><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"/></svg>',this.registerDomEvent(this.statusBarIconEl,"click",()=>{this.updateStatusBar("statusbar")})}async updateStatusBar(e){const n=new Kd(app,this.settings),s=new Gd(app,this.settings),{installedCount:i,updatedCount:r}=await n.getPluginStatus(),{tinstalledCount:a,tupdatedCount:l}=await s.getThemeStatus();if(r>0||l>0){if(this.statusBarIconEl.setAttribute("aria-label-position","top"),this.statusBarIconEl.setAttribute("aria-label","Updated Info: Plugins: "+r+"/"+i+", Themes: "+l+"/"+a),this.statusBarIconEl.innerHTML=`<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"/><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"/><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"/><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"/></svg>
            <svg xmlns="http://www.w3.org/2000/svg"  style="margin-top: -12px;margin-left: -3px;"  width="1em" height="1em" viewBox="0 0 15 15"><path fill="orange" d="M9.875 7.5a2.375 2.375 0 1 1-4.75 0a2.375 2.375 0 0 1 4.75 0"/></svg> `,e==="statusbar")if(r>0){const c={type:"updated",count:r};this.openView(JSON.stringify(c))}else{const c={type:"tupdated",count:l};this.openView(JSON.stringify(c))}}else this.statusBarIconEl.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"/><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"/><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"/><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"/></svg>',this.statusBarIconEl.setAttribute("aria-label","Updated Info: Plugins: "+r+"/"+i+", Themes: "+l+"/"+a),e==="statusbar"&&this.openView("")}openView(e){let n=!1;app.workspace.iterateAllLeaves(s=>{try{if(s.getViewState().type==="pkmer-downloader"){n=!0,localStorage.setItem("pkmer-update-tab",e),setTimeout(()=>{this.app.workspace.setActiveLeaf(s),this.app.workspace.activeLeaf.rebuildView()},300);return}}catch(i){console.error("Error occurred while processing leaf:",i)}}),n||(localStorage.setItem("pkmer-update-tab",e),setTimeout(()=>{this.app.workspace?.getLeaf()?.setViewState({active:!0,type:hs})},300))}}module.exports=Jd;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
